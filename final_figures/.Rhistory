p1e
f1 <- ggarrange(p1a, p1b, p1c, p1d, p1e, nrow=2, ncol = 3, common.legend = FALSE, align = "hv", labels = c('a', 'b', 'c', 'd', 'e'))
ggsave(filename = 'figS2_ET_prediction_equations.png', height=16, width= 24, units = 'cm', dpi=900)
p1e <- ggplot(data = GEE_ET_tower_all  %>% filter(!is.na(ET_mm_d) & site_ID != 'US-SCg'), #%>% filter('Bucket 2 DSD' >= 10 &
# case_when(site_ID %in% c('US-CZ1', 'US-SCs', 'US-SCw', 'US-SCd', 'US-SCc') ~
#             month %in% c('03', '04', '05'),
#           site_ID %in% c('US-CZ2', 'US-CZ3', 'US-CZ4', 'US-SCf') ~ month %in% c('06', '07', '08'))),
mapping = aes(x = ET.predict.scalars, y = ET.NDVI.predict)) +
geom_smooth(linetype = 'dashed',
method = 'lm', formula = y ~ 0 + x, se=FALSE, color = 'black', linewidth = 2) +
stat_cor(label.x.npc = 0.1, label.y = 5, mapping = aes(label = paste(..rr.label..), formula = y ~ 0 + x),
size = 3.5, color = 'black', r.accuracy = 0.001, p.accuracy = 0.001) +
stat_regline_equation(label.x.npc = 0.1, label.y = 4.5, size = 3.5, formula = y ~ 0 + x) +
geom_point(alpha = 0.5) +
theme_bw() +
ylab(expression('Observed ET (mm day'^-1*')')) +
xlab(expression('Predicted ET with Scalars (mm day'^-1*')'))
p1e
p1e <- ggplot(data = GEE_ET_tower_all  %>% filter(!is.na(ET_mm_d) & site_ID != 'US-SCg'), #%>% filter('Bucket 2 DSD' >= 10 &
# case_when(site_ID %in% c('US-CZ1', 'US-SCs', 'US-SCw', 'US-SCd', 'US-SCc') ~
#             month %in% c('03', '04', '05'),
#           site_ID %in% c('US-CZ2', 'US-CZ3', 'US-CZ4', 'US-SCf') ~ month %in% c('06', '07', '08'))),
mapping = aes(x = ET.predict.scalars, y = ET.NDVI.predict)) +
geom_smooth(linetype = 'dashed',
method = 'lm', formula = y ~ 0 + x, se=FALSE, color = 'black', linewidth = 2) +
stat_cor(label.x.npc = 0.1, label.y = 5, mapping = aes(label = paste(..rr.label..),
size = 3.5, color = 'black', r.accuracy = 0.001, p.accuracy = 0.001), formula = y ~ 0 + x) +
stat_regline_equation(label.x.npc = 0.1, label.y = 4.5, size = 3.5, formula = y ~ 0 + x) +
geom_point(alpha = 0.5) +
theme_bw() +
ylab(expression('Observed ET (mm day'^-1*')')) +
xlab(expression('Predicted ET with Scalars (mm day'^-1*')'))
p1e
p1e <- ggplot(data = GEE_ET_tower_all  %>% filter(!is.na(ET_mm_d) & site_ID != 'US-SCg'), #%>% filter('Bucket 2 DSD' >= 10 &
# case_when(site_ID %in% c('US-CZ1', 'US-SCs', 'US-SCw', 'US-SCd', 'US-SCc') ~
#             month %in% c('03', '04', '05'),
#           site_ID %in% c('US-CZ2', 'US-CZ3', 'US-CZ4', 'US-SCf') ~ month %in% c('06', '07', '08'))),
mapping = aes(x = ET.predict.scalars, y = ET.NDVI.predict)) +
geom_smooth(linetype = 'dashed',
method = 'lm', formula = y ~ 0 + x, se=FALSE, color = 'black', linewidth = 2) +
stat_cor(label.x.npc = 0.1, label.y = 5, mapping = aes(label = paste(..rr.label..)),
size = 3.5, color = 'black', r.accuracy = 0.001, p.accuracy = 0.001, formula = y ~ 0 + x) +
stat_regline_equation(label.x.npc = 0.1, label.y = 4.5, size = 3.5, formula = y ~ 0 + x) +
geom_point(alpha = 0.5) +
theme_bw() +
ylab(expression('Observed ET (mm day'^-1*')')) +
xlab(expression('Predicted ET with Scalars (mm day'^-1*')'))
p1e
p <- c('ggpubr', 'viridis', 'tidyr', 'dplyr', 'ggmap', 'ggplot2', 'magrittr',
'sf','gtools', 'tigris', 'patchwork', 'segmented', 'ggsnewscale',
'rlist', 'ggspatial', 'svglite', 'mgcv', 'zoo', 'purrr', 'webshot', 'stargazer', 'kableExtra',
'broom', 'svglite','sjPlot','purrr', 'sjmisc', 'magick', 'magrittr', 'knitr', 'xtable', 'scales')
# install.packages(p,repo='https://cran.r-project.org/')
# library(segmented)
# library(ggnewscale)
# install.packages(c('scales'),repo='https://cran.r-project.org/')
lapply(p,require,character.only=TRUE)
# library(scales)
#Home Computer directories
setwd('C:/Users/can02/mystuff/fireDieoff/final_figures')
dir_in <- "D:\\Fire_Dieoff"
#Lab computer directories
# setwd('C:\\Users\\Carl\\mystuff\\fireDieoff\\final_figures')
# dir_in <- "C:\\Users\\Carl\\mystuff\\Large_Files\\Fire_Dieoff"
#Add the data
sev.data <- read.csv(file.path(dir_in, "fire_south_sierra_USFS_sevfire_500pt_fire_year_5tree_ts8_300m_20230403.csv"), header = TRUE, na.strings = "NaN")
# fire.data$fire.year <- fire.data$perimeter_year
sev.data$treatment <- 'Disturb'
# summary(sev.data)
# list.files(fire_in)
# list.files(fire_in)
raw.sev.control.data <- read.csv(file.path(dir_in, "control_south_sierra_sev_2km_buffer_500pt_fire_year_5tree_ts16_300m_20230403.csv"), header = TRUE, na.strings = "NaN")
#Duplicate and add the fire severity columns
unchanged.control.data <- raw.sev.control.data
unchanged.control.data$fire_sev_2010 <- 1
low.control.data <- raw.sev.control.data
low.control.data$fire_sev_2010 <- 2
med.control.data <- raw.sev.control.data
med.control.data$fire_sev_2010 <- 3
high.control.data <- raw.sev.control.data
high.control.data$fire_sev_2010 <- 4
# unchanged.control.data
# raw.sev.control.data
# sev.data
sev.control.data <- rbind(unchanged.control.data, low.control.data, med.control.data, high.control.data)
#Add Fire Columns
# control.data$fire_sev_2010 <- -9999
# control.data$fire_year_2010 <- -9999
# control.data$fire_ID_2010 <- -9999
sev.control.data$fire_count_2010 <- -9999
sev.control.data$fire_sev_2019 <- -9999
sev.control.data$fire_year_2019 <- -9999
sev.control.data$fire_ID_2019 <- -9999
sev.control.data$fire_count_2019 <- -9999
sev.control.data$fire_sev_2020 <- -9999
sev.control.data$fire_year_2020 <- -9999
sev.control.data$fire_ID_2020 <- -9999
sev.control.data$fire_count_2020 <- -9999
#Add Control treatment column
sev.control.data$treatment <- 'Control' #Try making this 1-km versus, 2-km
#Combine the data together
sev.pixel.data <- rbind(sev.data, sev.control.data)
# pixel.data <- rbind(combine.data, control.data.2km)
# summary(sev.pixel.data)
`%notin%` <- Negate(`%in%`)
# summary(sev.pixel.data)
#Convert fire data -9999 to NAs
# sev.pixel.data$fire_sev_2010
# sev.pixel.data[sev.pixel.data$fire_sev_2010 == -9999,]$fire_sev_2010 <- NA
# sev.pixel.data[sev.pixel.data$fire_year_2010 == -9999,]$fire_year_2010 <- NA
# sev.pixel.data[sev.pixel.data$fire_ID_2010 == -9999,]$fire_ID_2010 <- NA
sev.pixel.data[sev.pixel.data$fire_count_2010 == -9999,]$fire_count_2010 <- NA
sev.pixel.data[sev.pixel.data$fire_sev_2019 == -9999,]$fire_sev_2019 <- NA
sev.pixel.data[sev.pixel.data$fire_year_2019 == -9999,]$fire_year_2019 <- NA
sev.pixel.data[sev.pixel.data$fire_ID_2019 == -9999,]$fire_ID_2019 <- NA
sev.pixel.data[sev.pixel.data$fire_count_2019 == -9999,]$fire_count_2019 <- NA
sev.pixel.data[sev.pixel.data$fire_sev_2020 == -9999,]$fire_sev_2020 <- NA
sev.pixel.data[sev.pixel.data$fire_year_2020 == -9999,]$fire_year_2020 <- NA
sev.pixel.data[sev.pixel.data$fire_ID_2020 == -9999,]$fire_ID_2020 <- NA
sev.pixel.data[sev.pixel.data$fire_count_2020 == -9999,]$fire_count_2020 <- NA
#Use the FRAP fire perimeter year
sev.pixel.data$fire.year <- sev.pixel.data$fire_year_2010
#Do categorical treatments
sev.pixel.data <- sev.pixel.data %>% mutate(treat = case_when(treatment == 'Disturb' ~ 1, treatment == 'Control' ~ 0))
#Fire Severity Bins
#With re-export type needs to be converted to sev
sev.pixel.data <- sev.pixel.data %>% mutate(sev.bin = case_when(
fire_sev_2010 == '0' ~ 'No Fire',
fire_sev_2010 == '1' ~ 'Unchanged',
fire_sev_2010 == '2' ~ 'Low',
fire_sev_2010 == '3' ~ 'Mid',
fire_sev_2010 == '4' ~ 'High',
fire_sev_2010 == '255' ~ 'Masked')) # end function
# sev.pixel.data %>% summary()
#Make the years bin lables in the correct order
sev.pixel.data$sev.bin = with(sev.pixel.data, factor(sev.bin, levels = c('No Fire','Unchanged', 'Low','Mid', 'High')))#c('No Fire','Masked', 'Unchanged or Low','Mid or High')))
#Recode the veg type data
# sev.pixel.data$veg_name <- recode(.x=sev.pixel.data$lf_evt_2001, .default = NA_character_, '2015' = 'Redwood', '2019' = 'Pinyon Juniper', '2020' = 'Bristlecone Pine', '2027' = 'Mixed Conifer', '2028' = 'White Fir', '2031' = 'Jeffrey Pine',
#                               '2032' = 'Red Fir', '2033' = 'Subalpine', '2034' = 'Knobcone Pine', '2043' = 'Mixed Conifer', '2044' = 'Subalpine', '2045' = 'Mixed Conifer',
#                               '2053' = 'Ponderosa Pine', '2058' = 'Lodgepole Pine', '2061' = 'Mixed Conifer', '2112' = 'Blue Oak Woodland', '2172' = 'White Fir', '2173' = 'Lodgepole Pine', '2201' = 'Oregon White Oak', '2230' = 'Blue Oak - Digger Pine')
# sev.pixel.data %>% summary()
#Select strat categories for fire treatments
un.disturb <- sev.pixel.data %>% filter(sev.bin == 'Unchanged' & treatment == 'Disturb') %>% group_by(stratlayer) %>% summarize(n = n())
lo.disturb <- sev.pixel.data %>% filter(sev.bin == 'Low' & treatment == 'Disturb') %>% group_by(stratlayer) %>% summarize(n = n())
mid.disturb <- sev.pixel.data %>% filter(sev.bin == 'Mid' & treatment == 'Disturb') %>% group_by(stratlayer) %>% summarize(n = n())
hi.disturb <- sev.pixel.data %>% filter(sev.bin == 'High' & treatment == 'Disturb') %>% group_by(stratlayer) %>% summarize(n = n())
un.control <- sev.pixel.data %>% filter(sev.bin == 'Unchanged' & treatment == 'Control') %>% group_by(stratlayer) %>% summarize(n = n())
un.test <- un.control <- sev.pixel.data %>% filter(sev.bin == 'Unchanged' & treatment == 'Control') %>% group_by(stratlayer) %>% summarize(n = n())
lo.control <- sev.pixel.data %>% filter(sev.bin == 'Low' & treatment == 'Control') %>% group_by(stratlayer) %>% summarize(n = n())
mid.control <- sev.pixel.data %>% filter(sev.bin == 'Mid' & treatment == 'Control') %>% group_by(stratlayer) %>% summarize(n = n())
hi.control <- sev.pixel.data %>% filter(sev.bin == 'High' & treatment == 'Control') %>% group_by(stratlayer) %>% summarize(n = n())
un.strat <- inner_join(un.disturb, un.control, by = 'stratlayer') %>%
group_by(stratlayer) %>% summarize(n = min(n.x,n.y))
lo.strat <- inner_join(lo.disturb, lo.control, by = 'stratlayer') %>%
group_by(stratlayer) %>% summarize(n = min(n.x,n.y))
mid.strat <- inner_join(mid.disturb, mid.control, by = 'stratlayer') %>%
group_by(stratlayer) %>% summarize(n = min(n.x,n.y))
hi.strat <- inner_join(hi.disturb, hi.control, by = 'stratlayer') %>%
group_by(stratlayer) %>% summarize(n = min(n.x,n.y))
#Set the random number seed
set.seed(4561)
#Sample the unchanged control pixels
un.sample <- sev.pixel.data %>%
filter(treatment == 'Control' & sev.bin == 'Unchanged' & stratlayer %in% (un.strat %>% pull(stratlayer))) %>% #Get just the unchanged control stratification layers
group_by(stratlayer) %>% #Group by Stratification layer
nest() %>% #Nest the data
ungroup() %>% #Un group the data
mutate(n = (un.strat %>% pull(n))) %>% #Add the sample sizes for the stratlayers in the disturbed data
mutate(samp = map2(data, n, sample_n)) %>% #Do the random sample, sample_n is depricated for slice_sample, but slice sample doesn't work.
dplyr::select(-data) %>% #Get rid of the data column
unnest(samp) #unnest the data
#Sample the low severity control pixels
lo.sample <- sev.pixel.data %>%
filter(treatment == 'Control' & sev.bin == 'Low' & stratlayer %in% (lo.strat %>% pull(stratlayer))) %>% #Get just the unchanged control stratification layers
group_by(stratlayer) %>% #Group by Stratification layer
nest() %>% #Nest the data
ungroup() %>% #Un group the data
mutate(n = (lo.strat %>% pull(n))) %>% #Add the sample sizes for the stratlayers in the disturbed data
mutate(samp = map2(data, n, sample_n)) %>% #Do the random sample, sample_n is depricated for slice_sample
dplyr::select(-data) %>% #Get rid of the data column
unnest(samp) #unnest the data
#Sample the moderate severity control pixels
mid.sample <- sev.pixel.data %>%
filter(treatment == 'Control' & sev.bin == 'Mid' & stratlayer %in% (mid.strat %>% pull(stratlayer))) %>% #Get just the unchanged control stratification layers
group_by(stratlayer) %>% #Group by Stratification layer
nest() %>% #Nest the data
ungroup() %>% #Un group the data
mutate(n = (mid.strat %>% pull(n))) %>% #Add the sample sizes for the stratlayers in the disturbed data
mutate(samp = map2(data, n, sample_n)) %>% #Do the random sample, sample_n is depricated for slice_sample
dplyr::select(-data) %>% #Get rid of the data column
unnest(samp) #unnest the data
#High Severity Samples
hi.sample <- sev.pixel.data %>%
filter(treatment == 'Control' & sev.bin == 'High' & stratlayer %in% (hi.strat %>% pull(stratlayer))) %>% #Get just the unchanged control stratification layers
group_by(stratlayer) %>% #Group by Stratification layer
nest() %>% #Nest the data
ungroup() %>% #Un group the data
mutate(n = (hi.strat %>% pull(n))) %>% #Add the sample sizes for the stratlayers in the disturbed data
mutate(samp = map2(data, n, sample_n)) %>% #Do the random sample, sample_n is depricated for slice_sample
dplyr::select(-data) %>% #Get rid of the data column
unnest(samp) #unnest the data
#Make sure the stratlayer bins match with the sampled control bins
#Sample the unchanged control pixels
un.disturb <- sev.pixel.data %>%
filter(treatment == 'Disturb' & sev.bin == 'Unchanged' & stratlayer %in% (un.strat %>% pull(stratlayer))) %>% #Get just the unchanged control stratification layers
group_by(stratlayer) %>% #Group by Stratification layer
nest() %>% #Nest the data
ungroup() %>% #Un group the data
mutate(n = (un.strat %>% pull(n))) %>% #Add the sample sizes for the stratlayers in the disturbed data
mutate(samp = map2(data, n, sample_n)) %>% #Do the random sample, sample_n is depricated for slice_sample, but slice sample doesn't work.
dplyr::select(-data) %>% #Get rid of the data column
unnest(samp) #unnest the data
#Sample the low severity control pixels
lo.disturb <- sev.pixel.data %>%
filter(treatment == 'Disturb' & sev.bin == 'Low' & stratlayer %in% (lo.strat %>% pull(stratlayer))) %>% #Get just the unchanged control stratification layers
group_by(stratlayer) %>% #Group by Stratification layer
nest() %>% #Nest the data
ungroup() %>% #Un group the data
mutate(n = (lo.strat %>% pull(n))) %>% #Add the sample sizes for the stratlayers in the disturbed data
mutate(samp = map2(data, n, sample_n)) %>% #Do the random sample, sample_n is depricated for slice_sample
dplyr::select(-data) %>% #Get rid of the data column
unnest(samp) #unnest the data
#Sample the moderate severity control pixels
mid.disturb <- sev.pixel.data %>%
filter(treatment == 'Disturb' & sev.bin == 'Mid' & stratlayer %in% (mid.strat %>% pull(stratlayer))) %>% #Get just the unchanged control stratification layers
group_by(stratlayer) %>% #Group by Stratification layer
nest() %>% #Nest the data
ungroup() %>% #Un group the data
mutate(n = (mid.strat %>% pull(n))) %>% #Add the sample sizes for the stratlayers in the disturbed data
mutate(samp = map2(data, n, sample_n)) %>% #Do the random sample, sample_n is depricated for slice_sample
dplyr::select(-data) %>% #Get rid of the data column
unnest(samp) #unnest the data
#High Severity Samples
hi.disturb <- sev.pixel.data %>%
filter(treatment == 'Disturb' & sev.bin == 'High' & stratlayer %in% (hi.strat %>% pull(stratlayer))) %>% #Get just the unchanged control stratification layers
group_by(stratlayer) %>% #Group by Stratification layer
nest() %>% #Nest the data
ungroup() %>% #Un group the data
mutate(n = (hi.strat %>% pull(n))) %>% #Add the sample sizes for the stratlayers in the disturbed data
mutate(samp = map2(data, n, sample_n)) %>% #Do the random sample, sample_n is depricated for slice_sample
dplyr::select(-data) %>% #Get rid of the data column
unnest(samp) #unnest the data
#Combine the sampled data back together
sev.pixel.sample <- rbind(un.disturb, lo.disturb, mid.disturb, hi.disturb, un.sample, lo.sample, mid.sample, hi.sample)
sev.pixel.sample <- sev.pixel.sample %>%
pivot_longer(cols = X10_AET:X9_tpa_max, names_to = c('year', '.value'), names_pattern = "X(\\d{1}|\\d{2})_(.*)", names_repair = "unique")
#Convert the year outputs to actual years
sev.pixel.sample$year <- as.numeric(sev.pixel.sample$year) + 1984
#Convert missing TPA data to NAs
sev.pixel.sample[sev.pixel.sample$tpa_max < 0,]$tpa_max <- NA
#Convert to trees per hectare
sev.pixel.sample$tpa_max <- sev.pixel.sample$tpa_max * 2.47105
#Make the dates into date time format for R
sev.pixel.sample$date <- as.Date(as.character(sev.pixel.sample$year), format = '%Y')
#Add VI Year
sev.pixel.sample$vi.year <- sev.pixel.sample$year
#Caluclate Stand AGe
sev.pixel.sample$stand.age <- as.numeric(sev.pixel.sample$year) - as.numeric(sev.pixel.sample$fire.year)
#Update Cover data to 100% scale
sev.pixel.sample$Tree_Cover.2 <- sev.pixel.sample$Tree_Cover / 100
sev.pixel.sample$Shrub_Cover.2 <- sev.pixel.sample$Shrub_Cover / 100
sev.pixel.sample$Herb_Cover.2 <- sev.pixel.sample$Herb_Cover / 100
sev.pixel.sample$Bare_Cover.2 <- sev.pixel.sample$Bare_Cover / 100
#Add Montana Veg Cover
sev.pixel.sample$Tree_Cover <- sev.pixel.sample$TRE
sev.pixel.sample$Shrub_Cover <- sev.pixel.sample$SHR
sev.pixel.sample$Herb_Cover <- sev.pixel.sample$AFG + sev.pixel.sample$PFG
sev.pixel.sample$Bare_Cover <- sev.pixel.sample$BGR
#Convert the SPI48 scale back to decimal
sev.pixel.sample$SPI48 <- sev.pixel.sample$SPI48 / 100
#Try to fix soil moisture by dividing by 10
sev.pixel.sample$Soil_Moisture <- sev.pixel.sample$Soil_Moisture / 10
#Rename ppt and Water Stress
sev.pixel.sample$Water_Stress <- sev.pixel.sample$Water_Stress
sev.pixel.sample$ppt <- sev.pixel.sample$ppt
sev.pixel.sample$AET <- sev.pixel.sample$AET
sev.pixel.sample$GPP <- sev.pixel.sample$GPP
sev.pixel.sample$elevation <- sev.pixel.sample$elevation
sev.pixel.sample$PrET <- sev.pixel.sample$ppt - sev.pixel.sample$AET
#Create Fire Year Bins
#Separate the data
sev.pixel.sample <- sev.pixel.sample %>% mutate(fire.year.bin = case_when(
# fire.year < 1980 ~ '< 1980',
fire.year >= 1985 & fire.year <= 1990 ~ '1985-1990',
fire.year >= 1991 & fire.year <= 1995 ~ '1991-1995',
fire.year >= 1996 & fire.year <= 2000 ~ '1996-2000',
fire.year >= 2001 & fire.year <= 2005 ~ '2001-2005',
fire.year >= 2006 & fire.year <= 2010 ~ '2006-2010'))
#Fire year bins for Fire Severity Data
sev.pixel.sample$fire.year.bin = with(sev.pixel.sample, factor(fire.year.bin, levels = c('2006-2010', '2001-2005','1996-2000', '1991-1995','1985-1990')))
#Subtract the pre-fire values for AET, tree and shrub cover
sev.pixel.sample <- sev.pixel.sample %>%
group_by(system.index, sev.bin) %>%
mutate(dAET = AET - mean(AET[stand.age %in% c(-1, -2)]),
dTree_Cover = Tree_Cover - mean(Tree_Cover[stand.age %in% c(-1, -2)]),
dShrub_Cover = Shrub_Cover - mean(Shrub_Cover[stand.age %in% c(-1, -2)])) %>%
ungroup()
sev.pixel.summary <- sev.pixel.sample %>%
filter(stand.age >= -2 & stand.age <= 20 & vi.year <= 2012 & fire.year > 1986 & fire.year <= 2010 & (fire_year_2019 <= 2010 | is.na(fire_year_2019))) %>%
group_by(stand.age, sev.bin) %>%
reframe(Tree_Cover.mean = mean(dTree_Cover[treatment == 'Disturb']) - mean(dTree_Cover[treatment == 'Control']),
Tree_Cover.sd = sd(dTree_Cover[treatment == 'Disturb'])^2 + sd(dTree_Cover[treatment == 'Control'])^2,
Tree_Cover.n = n(),
Shrub_Cover.mean = mean(dShrub_Cover[treatment == 'Disturb']) - mean(dShrub_Cover[treatment == 'Control']),
Shrub_Cover.sd = sd(dShrub_Cover[treatment == 'Disturb'])^2 + sd(dShrub_Cover[treatment == 'Control'])^2,
Shrub_Cover.n = n(),
AET.mean = mean(dAET[treatment == 'Disturb']) - mean(dAET[treatment == 'Control']),
AET.sd = sd(dAET[treatment == 'Disturb'])^2 + sd(dAET[treatment == 'Control'])^2,
AET.n = n()) %>%
#Add the upper and lower 95% confidence intervals
mutate(tree.ci.95.lower = Tree_Cover.mean - 1.96*(sqrt(Tree_Cover.sd / Tree_Cover.n)),
tree.ci.95.upper = Tree_Cover.mean + 1.96*(sqrt(Tree_Cover.sd / Tree_Cover.n)),
shrub.ci.95.lower = Shrub_Cover.mean - 1.96*(sqrt(Shrub_Cover.sd / Shrub_Cover.n)),
shrub.ci.95.upper = Shrub_Cover.mean + 1.96*(sqrt(Shrub_Cover.sd / Shrub_Cover.n)),
et.ci.95.lower = AET.mean - 1.96*(sqrt(AET.sd / AET.n)),
et.ci.95.upper = AET.mean + 1.96*(sqrt(AET.sd / AET.n)))
#Select the columns I want for the data
sev.results.data <- sev.pixel.summary %>% dplyr::select(sev.bin, stand.age, tree.ci.95.lower, tree.ci.95.upper, shrub.ci.95.lower, shrub.ci.95.upper, et.ci.95.lower, et.ci.95.upper)
#Create Figure 3
#Create a unique palette
mypalette <- brewer_pal('seq', "YlOrRd")(5)[2:5]
sev.pixel.filter <- sev.pixel.sample %>% filter(fire.year <= 2010 & fire.year > 1986 & (fire_year_2019 <= 2010 | is.na(fire_year_2019))) %>%
dplyr::group_by(system.index, treatment, sev.bin) %>%
reframe(dTree = mean(Tree_Cover[vi.year %in% c(2017, 2018)]) - mean(Tree_Cover[vi.year %in% c(2010, 2011)]),
RdTree = (mean(Tree_Cover[vi.year %in% c(2017, 2018)]) - mean(Tree_Cover[vi.year %in% c(2012,2013)])) / mean(Tree_Cover[vi.year %in% c(2010, 2011)]),
Tree_Cover = mean(Tree_Cover[vi.year %in% c(2010, 2011)]),
ET = mean(AET[vi.year %in% c(2010, 2011)]),
ADS = sum(tpa_max[vi.year %in% c(2015, 2016, 2017, 2018)]),
# Water_Stress = Water_Stress[vi.year == 2015],
PrET_4yr = sum(PrET[vi.year %in% c(2012,2013,2014,2015)]),
sev.bin = sev.bin[vi.year == 2010],
treatment = treatment[vi.year == 2010])
p1 <- ggplot(data = sev.pixel.filter) + # %>% filter(sev.bin != 'Unchanged')) +
geom_bin2d(binwidth = c(200, 2), mapping = aes(x = AET, y = dTree, group = ..count.., alpha = ..count..)) +
scale_fill_gradient2(limits = c(0,340), breaks = c(5,100,200,300), midpoint = 170, low = "cornflowerblue", mid = "yellow", high = "red", na.value = 'transparent') +
scale_alpha(range = c(1, 1), limits = c(5, 340), na.value = 0.4) +labs(fill = "Grid Cells") +
#Create the density layer
new_scale_fill() +
#Piecewise linear regression fit line
stat_cor(mapping = aes(x = AET, y = dTree, color = treatment, label = paste(..rr.label..)), show.legend = FALSE) +
geom_smooth(method = 'lm', mapping = aes(x = AET, y = dTree, color = treatment, linetype = treatment, fill = treatment), se = TRUE, show.legend = FALSE, size = 2) +
# geom_line(mapping = aes(x=PrET_4yr, y=ADS.fit, color = treatment, linetype = treatment), size=2) +
# #Piecewise fit uncertainty
# geom_ribbon(mapping = aes(x = PrET_4yr, y = ADS.fit, ymax = ADS.fit + 1.96*ADS.se.fit, ymin = ADS.fit - 1.96*ADS.se.fit, fill = treatment), alpha = 0.4) +
#Do the Formating
scale_linetype(name = 'Treatment') +
scale_fill_brewer(type = 'div', palette = 'Set1', name = 'Treatment') +
scale_color_brewer(type = 'div', palette = 'Set1', name = 'Treatment') +
guides(color = guide_legend(), linetype = guide_legend(), fill = guide_legend(), alpha = 'none') +
facet_grid(sev.bin ~ .) +
scale_y_reverse() +
#Add the R^2 values
# geom_text(data = r2.text, mapping = aes(x = x, y = y, label = label, color = treatment), size = 3.5, parse = TRUE) +
#Add the R^2 text
# geom_text(data = letter.text, mapping = aes(x = x, y = y, label = label), size = 5, fontface = "bold") +
theme_bw() +
xlab(expression('Four-year Pr-ET (mm 4yr'^-1*')')) + ylab('Die-off (% Tree Cover)')
# install.packages(p,repo='https://cran.r-project.org/')
# library(segmented)
library(ggnewscale)
p3 <- ggplot(data = sev.pixel.filter) + # %>% filter(sev.bin != 'Unchanged')) +
geom_bin2d(binwidth = c(2, 3), mapping = aes(x = Tree_Cover, y = dTree, group = ..count.., alpha = ..count..)) +
scale_fill_gradient2(limits = c(0,340), breaks = c(5,100, 200, 300), midpoint = 170, low = "cornflowerblue", mid = "yellow", high = "red", na.value = 'transparent', guide = 'none') +
scale_alpha(range = c(1, 1), limits = c(5, 340), na.value = 0.4) +labs(fill = "Grid Cells") +
labs(fill = "Grid Cells") +
#Create the density layer
new_scale_fill() +
#Piecewise linear regression fit line
# geom_line(mapping = aes(x=Water_Stress, y=dTree, color = treatment, linetype = treatment), size=2) +
#Piecewise fit uncertainty
# geom_ribbon(mapping = aes(x = Water_Stress, y = dTree.fit, ymax = dTree.fit + 1.96*dTree.se.fit, ymin = dTree.fit - 1.96*dTree.se.fit, fill = treatment), alpha = 0.4) +
stat_cor(mapping = aes(x = Tree_Cover, y = dTree, color = treatment, label = paste(..rr.label..)), show.legend = FALSE) +
geom_smooth(method = 'lm', mapping = aes(x = Tree_Cover, y = dTree, color = treatment, linetype = treatment, fill = treatment),show.legend = TRUE, size = 2) +
#Do the Formating
scale_linetype(name = 'Treatment') +
scale_fill_brewer(type = 'div', palette = 'Set1', name = 'Treatment') +
scale_color_brewer(type = 'div', palette = 'Set1', name = 'Treatment') +
guides(color = guide_legend(), linetype = guide_legend(), fill = guide_legend(), alpha = 'none') +
facet_grid(sev.bin ~ .) +
#Add the R^2 values
# geom_text(data = r2.text, mapping = aes(x = x, y = y, label = label, color = treatment), size = 3.5, parse = TRUE) +
#Add the R^2 text
# geom_text(data = letter.text, mapping = aes(x = x, y = y, label = label), size = 5, fontface = "bold") +
theme_bw() +
theme(axis.title.y = element_blank(), axis.text.y = element_blank()) +
scale_y_reverse() +
xlab(expression('Tree Cover (%)')) + ylab(expression('Die-off (trees ha'^-1*')'))
p3
p4 <- p3 + theme(
legend.background = element_rect(colour = NA, fill = NA), # This removes the white square behind the legend
legend.justification = c(1, 0),
legend.position = c(0.7, 0.9),
legend.text = element_text(size = 10),
legend.title = element_text(size = 10),
legend.direction = "vertical")
p4
p1 <- ggplot(data = sev.pixel.filter) + # %>% filter(sev.bin != 'Unchanged')) +
geom_bin2d(binwidth = c(200, 2), mapping = aes(x = AET, y = dTree, group = ..count.., alpha = ..count..)) +
scale_fill_gradient2(limits = c(0,340), breaks = c(5,100,200,300), midpoint = 170, low = "cornflowerblue", mid = "yellow", high = "red", na.value = 'transparent') +
scale_alpha(range = c(1, 1), limits = c(5, 340), na.value = 0.4) +labs(fill = "Grid Cells") +
#Create the density layer
new_scale_fill() +
#Piecewise linear regression fit line
stat_cor(mapping = aes(x = AET, y = dTree, color = treatment, label = paste(..rr.label..)), show.legend = FALSE) +
geom_smooth(method = 'lm', mapping = aes(x = AET, y = dTree, color = treatment, linetype = treatment, fill = treatment), se = TRUE, show.legend = FALSE, size = 2) +
# geom_line(mapping = aes(x=PrET_4yr, y=ADS.fit, color = treatment, linetype = treatment), size=2) +
# #Piecewise fit uncertainty
# geom_ribbon(mapping = aes(x = PrET_4yr, y = ADS.fit, ymax = ADS.fit + 1.96*ADS.se.fit, ymin = ADS.fit - 1.96*ADS.se.fit, fill = treatment), alpha = 0.4) +
#Do the Formating
scale_linetype(name = 'Treatment') +
scale_fill_brewer(type = 'div', palette = 'Set1', name = 'Treatment') +
scale_color_brewer(type = 'div', palette = 'Set1', name = 'Treatment') +
guides(color = guide_legend(), linetype = guide_legend(), fill = guide_legend(), alpha = 'none') +
facet_grid(sev.bin ~ .) +
scale_y_reverse() +
#Add the R^2 values
# geom_text(data = r2.text, mapping = aes(x = x, y = y, label = label, color = treatment), size = 3.5, parse = TRUE) +
#Add the R^2 text
# geom_text(data = letter.text, mapping = aes(x = x, y = y, label = label), size = 5, fontface = "bold") +
theme_bw() +
xlab(expression('Four-year Pr-ET (mm 4yr'^-1*')')) + ylab('Die-off (% Tree Cover)')
p1
p1 <- ggplot(data = sev.pixel.filter) + # %>% filter(sev.bin != 'Unchanged')) +
geom_bin2d(binwidth = c(200, 2), mapping = aes(x = ET, y = dTree, group = ..count.., alpha = ..count..)) +
scale_fill_gradient2(limits = c(0,340), breaks = c(5,100,200,300), midpoint = 170, low = "cornflowerblue", mid = "yellow", high = "red", na.value = 'transparent') +
scale_alpha(range = c(1, 1), limits = c(5, 340), na.value = 0.4) +labs(fill = "Grid Cells") +
#Create the density layer
new_scale_fill() +
#Piecewise linear regression fit line
stat_cor(mapping = aes(x = ET, y = dTree, color = treatment, label = paste(..rr.label..)), show.legend = FALSE) +
geom_smooth(method = 'lm', mapping = aes(x = ET, y = dTree, color = treatment, linetype = treatment, fill = treatment), se = TRUE, show.legend = FALSE, size = 2) +
# geom_line(mapping = aes(x=PrET_4yr, y=ADS.fit, color = treatment, linetype = treatment), size=2) +
# #Piecewise fit uncertainty
# geom_ribbon(mapping = aes(x = PrET_4yr, y = ADS.fit, ymax = ADS.fit + 1.96*ADS.se.fit, ymin = ADS.fit - 1.96*ADS.se.fit, fill = treatment), alpha = 0.4) +
#Do the Formating
scale_linetype(name = 'Treatment') +
scale_fill_brewer(type = 'div', palette = 'Set1', name = 'Treatment') +
scale_color_brewer(type = 'div', palette = 'Set1', name = 'Treatment') +
guides(color = guide_legend(), linetype = guide_legend(), fill = guide_legend(), alpha = 'none') +
facet_grid(sev.bin ~ .) +
scale_y_reverse() +
#Add the R^2 values
# geom_text(data = r2.text, mapping = aes(x = x, y = y, label = label, color = treatment), size = 3.5, parse = TRUE) +
#Add the R^2 text
# geom_text(data = letter.text, mapping = aes(x = x, y = y, label = label), size = 5, fontface = "bold") +
theme_bw() +
xlab(expression('Four-year Pr-ET (mm 4yr'^-1*')')) + ylab('Die-off (% Tree Cover)')
p1
p1 <- ggplot(data = sev.pixel.filter) + # %>% filter(sev.bin != 'Unchanged')) +
geom_bin2d(binwidth = c(200, 2), mapping = aes(x = ET, y = ADS, group = ..count.., alpha = ..count..)) +
scale_fill_gradient2(limits = c(0,340), breaks = c(5,100,200,300), midpoint = 170, low = "cornflowerblue", mid = "yellow", high = "red", na.value = 'transparent') +
scale_alpha(range = c(1, 1), limits = c(5, 340), na.value = 0.4) +labs(fill = "Grid Cells") +
#Create the density layer
new_scale_fill() +
#Piecewise linear regression fit line
stat_cor(mapping = aes(x = ET, y = ADS, color = treatment, label = paste(..rr.label..)), show.legend = FALSE) +
geom_smooth(method = 'lm', mapping = aes(x = ET, y = ADS, color = treatment, linetype = treatment, fill = treatment), se = TRUE, show.legend = FALSE, size = 2) +
# geom_line(mapping = aes(x=PrET_4yr, y=ADS.fit, color = treatment, linetype = treatment), size=2) +
# #Piecewise fit uncertainty
# geom_ribbon(mapping = aes(x = PrET_4yr, y = ADS.fit, ymax = ADS.fit + 1.96*ADS.se.fit, ymin = ADS.fit - 1.96*ADS.se.fit, fill = treatment), alpha = 0.4) +
#Do the Formating
scale_linetype(name = 'Treatment') +
scale_fill_brewer(type = 'div', palette = 'Set1', name = 'Treatment') +
scale_color_brewer(type = 'div', palette = 'Set1', name = 'Treatment') +
guides(color = guide_legend(), linetype = guide_legend(), fill = guide_legend(), alpha = 'none') +
facet_grid(sev.bin ~ .) +
scale_y_reverse() +
#Add the R^2 values
# geom_text(data = r2.text, mapping = aes(x = x, y = y, label = label, color = treatment), size = 3.5, parse = TRUE) +
#Add the R^2 text
# geom_text(data = letter.text, mapping = aes(x = x, y = y, label = label), size = 5, fontface = "bold") +
theme_bw() +
xlab(expression('Four-year Pr-ET (mm 4yr'^-1*')')) + ylab('Die-off (% Tree Cover)')
p1
p1 <- ggplot(data = sev.pixel.filter) + # %>% filter(sev.bin != 'Unchanged')) +
geom_bin2d(binwidth = c(10, 2), mapping = aes(x = ET, y = dTree, group = ..count.., alpha = ..count..)) +
scale_fill_gradient2(limits = c(0,340), breaks = c(5,100,200,300), midpoint = 170, low = "cornflowerblue", mid = "yellow", high = "red", na.value = 'transparent') +
scale_alpha(range = c(1, 1), limits = c(5, 340), na.value = 0.4) +labs(fill = "Grid Cells") +
#Create the density layer
new_scale_fill() +
#Piecewise linear regression fit line
stat_cor(mapping = aes(x = ET, y = dTree, color = treatment, label = paste(..rr.label..)), show.legend = FALSE) +
geom_smooth(method = 'lm', mapping = aes(x = ET, y = dTree, color = treatment, linetype = treatment, fill = treatment), se = TRUE, show.legend = FALSE, size = 2) +
# geom_line(mapping = aes(x=PrET_4yr, y=ADS.fit, color = treatment, linetype = treatment), size=2) +
# #Piecewise fit uncertainty
# geom_ribbon(mapping = aes(x = PrET_4yr, y = ADS.fit, ymax = ADS.fit + 1.96*ADS.se.fit, ymin = ADS.fit - 1.96*ADS.se.fit, fill = treatment), alpha = 0.4) +
#Do the Formating
scale_linetype(name = 'Treatment') +
scale_fill_brewer(type = 'div', palette = 'Set1', name = 'Treatment') +
scale_color_brewer(type = 'div', palette = 'Set1', name = 'Treatment') +
guides(color = guide_legend(), linetype = guide_legend(), fill = guide_legend(), alpha = 'none') +
facet_grid(sev.bin ~ .) +
scale_y_reverse() +
#Add the R^2 values
# geom_text(data = r2.text, mapping = aes(x = x, y = y, label = label, color = treatment), size = 3.5, parse = TRUE) +
#Add the R^2 text
# geom_text(data = letter.text, mapping = aes(x = x, y = y, label = label), size = 5, fontface = "bold") +
theme_bw() +
xlab(expression('Four-year Pr-ET (mm 4yr'^-1*')')) + ylab('Die-off (% Tree Cover)')
p1
p2 <- p1 + theme(
legend.background = element_rect(colour = NA, fill = NA), # This removes the white square behind the legend
legend.justification = c(1, 0),
legend.position = c(0.9, 0.83),
legend.text = element_text(size = 10),
legend.title = element_text(size = 10),
legend.direction = "vertical") +
guides(fill = guide_colorbar(barwidth = 1, barheight = 3,
title.position = "top",
title.hjust = 0.5,
ticks.colour = "black"))
p2
