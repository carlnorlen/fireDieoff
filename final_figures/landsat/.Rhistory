# sev.n <- sev.data %>% colnames()
# con.n <- control.data %>% colnames()
# sev.n
# con.n
# sev.n[!(sev.n %in% con.n)]
#Combine the data together
sev.pixel.data <- rbind(sev.data, sev.control.data)
# pixel.data <- rbind(combine.data, control.data.2km)
summary(sev.pixel.data)
`%notin%` <- Negate(`%in%`)
#Convert data to long format
sev.pixel.data <- sev.pixel.data %>% #dplyr::select(-c('latitude', 'longitude')) %>%
pivot_longer(cols = X10_AET:X9_tpa_max, names_to = c('year', '.value'), names_pattern = "X(\\d{1}|\\d{2})_(.*)", names_repair = "unique")
sev.pixel.data$year <- as.numeric(sev.pixel.data$year) + 1984
#Convert missing TPA data to NAs
sev.pixel.data[sev.pixel.data$tpa_max < 0,]$tpa_max <- NA
#Convert fire data -9999 to NAs
sev.pixel.data[sev.pixel.data$fire_sev_2010 == -9999,]$fire_sev_2010 <- NA
sev.pixel.data[sev.pixel.data$fire_year_2010 == -9999,]$fire_year_2010 <- NA
sev.pixel.data[sev.pixel.data$fire_ID_2010 == -9999,]$fire_ID_2010 <- NA
sev.pixel.data[sev.pixel.data$fire_count_2010 == -9999,]$fire_count_2010 <- NA
sev.pixel.data[sev.pixel.data$fire_sev_2019 == -9999,]$fire_sev_2019 <- NA
sev.pixel.data[sev.pixel.data$fire_year_2019 == -9999,]$fire_year_2019 <- NA
sev.pixel.data[sev.pixel.data$fire_ID_2019 == -9999,]$fire_ID_2019 <- NA
sev.pixel.data[sev.pixel.data$fire_count_2019 == -9999,]$fire_count_2019 <- NA
sev.pixel.data[sev.pixel.data$fire_sev_2020 == -9999,]$fire_sev_2020 <- NA
sev.pixel.data[sev.pixel.data$fire_year_2020 == -9999,]$fire_year_2020 <- NA
sev.pixel.data[sev.pixel.data$fire_ID_2020 == -9999,]$fire_ID_2020 <- NA
sev.pixel.data[sev.pixel.data$fire_count_2020 == -9999,]$fire_count_2020 <- NA
#Convert to trees per hectare
sev.pixel.data$tpa_max <- sev.pixel.data$tpa_max * 2.47105
#Make the dates into date time format for R
sev.pixel.data$date <- as.Date(as.character(sev.pixel.data$year), format = '%Y')
# sev.pixel.data$vi.year <- format(sev.pixel.data$date , '%Y')
sev.pixel.data$vi.year <- sev.pixel.data$year
#Use the FRAP fire perimeter year
sev.pixel.data$fire.year <- sev.pixel.data$fire_year_2010
sev.pixel.data$stand.age <- as.numeric(sev.pixel.data$year) - as.numeric(sev.pixel.data$fire.year)
#Update Cover data to 100% scale
sev.pixel.data$Tree_Cover <- sev.pixel.data$Tree_Cover / 100
sev.pixel.data$Shrub_Cover <- sev.pixel.data$Shrub_Cover / 100
sev.pixel.data$Herb_Cover <- sev.pixel.data$Herb_Cover / 100
sev.pixel.data$Bare_Cover <- sev.pixel.data$Bare_Cover / 100
#Convert the SPI48 scale back to decimal
sev.pixel.data$SPI48 <- sev.pixel.data$SPI48 / 100
#Try to fix soil moisture by dividing by 10
sev.pixel.data$Soil_Moisture <- sev.pixel.data$Soil_Moisture / 10
#Rename ppt and Water Stress
sev.pixel.data$Water_Stress <- sev.pixel.data$Water_Stress
sev.pixel.data$ppt <- sev.pixel.data$ppt
sev.pixel.data$AET <- sev.pixel.data$AET
sev.pixel.data$GPP <- sev.pixel.data$GPP
sev.pixel.data$elevation <- sev.pixel.data$elevation
sev.pixel.data$PrET <- sev.pixel.data$ppt - sev.pixel.data$AET
#
summary(sev.pixel.data %>% filter(fire_sev_2010 != 243))
sev.pixel.data <- sev.pixel.data %>% mutate(treat = case_when(treatment == 'Disturb' ~ 1, treatment == 'Control' ~ 0))
# match0 <- matchit(data = sev.pixel.data %>% filter(fire_sev_2010 != 243), formula = treat ~ Tree_Cover + clm_precip_sum, method = NULL, distance = "glm")
# summary(match0)
#
# match1 <- matchit(data = sev.pixel.data %>% filter(fire_sev_2010 != 243), formula = treat ~ clm_precip_sum,
#                   method = "nearest", distance = "glm")
# summary(match1)
sev.pixel.data <- sev.pixel.data %>% mutate(fire.year.bin = case_when(
# bin >= 1 ~ '1900',
# bin == 2 ~ '1909-1910',
# bin >= 1911 & bin <= 1920 ~ '95-104', #Calculated relative to 2015
# treatment == 'Control' ~ 'No Fire',
# fire.year >= 1910 & fire.year <=  1970 ~ '1910-1970',#'81-95',
# fire.year >= 1936 & fire.year <= 1950 ~ '65-79',
# fire.year >= 1951 & fire.year <= 1965 ~ '50-64',
# fire.year >= 1951 & fire.year <= 1960 ~ '55-64',
# fire.year >= 1971 & fire.year <= 1980 ~ '1971-1980',#'56-80',
# fire.year >= 1985 & fire.year <= 1990 ~ '1985-1990',
# fire.year >= 1991 & fire.year <= 2000 ~ '1991-2000',#'31-55',
# fire.year >= 1991 & fire.year <= 2000 ~ '15-24',
fire.year >= 1985 & fire.year <= 2010 ~ '1985-2010',
# fire.year >= 2001 & fire.year <= 2010 ~ '2001-2010',
fire.year >= 2011 & fire.year <= 2018 ~ '2011-2017')) #,
# fire.year >= 2019 ~ '2019-2020'))#'0-4'))
#Fire Severity Bins
#With re-export type needs to be converted to sev
sev.pixel.data <- sev.pixel.data %>% mutate(sev.bin = case_when(
fire_sev_2010 == '0' ~ 'No Fire',
fire_sev_2010 == '1' ~ 'Unchanged',
fire_sev_2010 == '2' ~ 'Low',
fire_sev_2010 == '3' ~ 'Mid',
fire_sev_2010 == '4' ~ 'High',
fire_sev_2010 == '255' ~ 'Masked')) # end function
sev.pixel.data %>% summary()
#Fire year bins for Fire Severity Data
sev.pixel.data$fire.year.bin = with(sev.pixel.data, factor(fire.year.bin, levels = c('2011-2017', '1985-2010')))#c('0-4','5-30','31-55','56-80',
#Make the years bin lables in the correct order
sev.pixel.data$sev.bin = with(sev.pixel.data, factor(sev.bin, levels = c('No Fire','Unchanged', 'Low','Mid', 'High')))#c('No Fire','Masked', 'Unchanged or Low','Mid or High')))
#Recode the veg type data
sev.pixel.data$veg_name <- recode(.x=sev.pixel.data$lf_evt_2001, .default = NA_character_, '2015' = 'Redwood', '2019' = 'Pinyon Juniper', '2020' = 'Bristlecone Pine', '2027' = 'Mixed Conifer', '2028' = 'White Fir', '2031' = 'Jeffrey Pine',
'2032' = 'Red Fir', '2033' = 'Subalpine', '2034' = 'Knobcone Pine', '2043' = 'Mixed Conifer', '2044' = 'Subalpine', '2045' = 'Mixed Conifer',
'2053' = 'Ponderosa Pine', '2058' = 'Lodgepole Pine', '2061' = 'Mixed Conifer', '2112' = 'Blue Oak Woodland', '2172' = 'White Fir', '2173' = 'Lodgepole Pine', '2201' = 'Oregon White Oak', '2230' = 'Blue Oak - Digger Pine')
sev.pixel.data %>% summary()
#Select strat categories for fire treatments
un.strat <- sev.pixel.data %>% filter(sev.bin == 'Unchanged' & treatment == 'Disturb') %>% group_by(stratlayer) %>% summarize(n = n() /35) %>% filter(n >= 5) %>% pull(stratlayer)
lo.strat <- sev.pixel.data %>% filter(sev.bin == 'Low' & treatment == 'Disturb') %>% group_by(stratlayer) %>% summarize(n = n() /35) %>% filter(n >= 5) %>% pull(stratlayer)
mid.strat <- sev.pixel.data %>% filter(sev.bin == 'Mid' & treatment == 'Disturb') %>% group_by(stratlayer) %>% summarize(n = n() /35) %>% filter(n >= 5) %>% pull(stratlayer)
hi.strat <- sev.pixel.data %>% filter(sev.bin == 'High' & treatment == 'Disturb') %>% group_by(stratlayer) %>% summarize(n = n() /35) %>% filter(n >= 5) %>% pull(stratlayer)
sev.pixel.data %>%
filter(!is.na(Tree_Cover) & fire.year <= 2010 & fire.year > 1986 & !is.na(sev.bin) & (fire_year_2019 <=2010 | is.na(fire_year_2019))) %>% # &
#Match the controls to the disturbed based on the stratified sampling bins
filter(case_when(sev.bin == 'Unchanged' ~ stratlayer %in% un.strat,
sev.bin == 'Low' ~ stratlayer %in% lo.strat,
sev.bin == 'Mid' ~ stratlayer %in% mid.strat,
sev.bin == 'High' ~ stratlayer %in% hi.strat)) %>%
dplyr::group_by(system.index, sev.bin, treatment) %>%
summarize(tpa_max = max(tpa_max[vi.year %in% c(2015, 2016, 2017)], na.rm = TRUE),
sev.bin = sev.bin[vi.year == 2010],
clm_precip_sum = clm_precip_sum[vi.year == 2010],
clm_temp_mean = clm_temp_mean[vi.year == 2010],
Water_Stress = sum(PrET[vi.year %in% c(2012,2013,2014,2015)]),
Tree_Cover = mean(Tree_Cover[vi.year %in% c(2013,2014)]),
pre.tree = Tree_Cover[vi.year == (fire.year - 2)],
pre.shrub = Shrub_Cover[vi.year == (fire.year - 2)]) %>%
summary()
pa <- ggplot(data = sev.pixel.data %>%
filter(Tree_Cover > 0 & fire.year <= 2010 & fire.year > 1986 & !is.na(sev.bin) & sev.bin != 'Unchanged' & (fire_year_2019 <=2010 | is.na(fire_year_2019))) %>% # &
#Match the controls to the disturbed based on the stratified sampling bins
filter(case_when(sev.bin == 'Unchanged' ~ stratlayer %in% un.strat,
sev.bin == 'Low' ~ stratlayer %in% lo.strat,
sev.bin == 'Mid' ~ stratlayer %in% mid.strat,
sev.bin == 'High' ~ stratlayer %in% hi.strat)) %>%
dplyr::group_by(system.index, sev.bin, treatment) %>%
summarize(tpa_max = max(tpa_max[vi.year %in% c(2015, 2016, 2017)], na.rm = TRUE),
sev.bin = sev.bin[vi.year == 2010],
clm_precip_sum = clm_precip_sum[vi.year == 2010],
clm_temp_mean = clm_temp_mean[vi.year == 2010],
Water_Stress = sum(PrET[vi.year %in% c(2012,2013,2014,2015)]),
Tree_Cover = mean(Tree_Cover[vi.year %in% c(2013,2014)]),
pre.tree = Tree_Cover[vi.year == fire.year - 2])) +
geom_density(mapping = aes(x = clm_temp_mean, color = treatment)) +
facet_wrap(. ~ sev.bin)
pa
pb <- ggplot(data = sev.pixel.data %>%
filter(Tree_Cover > 0 & fire.year <= 2010 & fire.year > 1986 & !is.na(sev.bin) & sev.bin != 'Unchanged' & (fire_year_2019 <=2010 | is.na(fire_year_2019))) %>% # &
#Match the controls to the disturbed based on the stratified sampling bins
filter(case_when(sev.bin == 'Unchanged' ~ stratlayer %in% un.strat,
sev.bin == 'Low' ~ stratlayer %in% lo.strat,
sev.bin == 'Mid' ~ stratlayer %in% mid.strat,
sev.bin == 'High' ~ stratlayer %in% hi.strat)) %>%
dplyr::group_by(system.index, sev.bin, treatment) %>%
summarize(tpa_max = max(tpa_max[vi.year %in% c(2015, 2016, 2017)], na.rm = TRUE),
sev.bin = sev.bin[vi.year == 2010],
clm_precip_sum = clm_precip_sum[vi.year == 2010],
clm_temp_mean = clm_temp_mean[vi.year == 2010],
Water_Stress = sum(PrET[vi.year %in% c(2012,2013,2014,2015)]),
Tree_Cover = mean(Tree_Cover[vi.year %in% c(2013,2014)]),
pre.tree = Tree_Cover[vi.year == fire.year - 2])) +
geom_density(mapping = aes(x = clm_precip_sum, color = treatment)) +
facet_wrap(. ~ sev.bin)
pb
#Select strat categories for fire treatments
un.strat <- sev.pixel.data %>% filter(sev.bin == 'Unchanged' & treatment == 'Disturb') %>% group_by(stratlayer) %>% summarize(n = n() /35) %>% filter(n >= 5) %>% pull(stratlayer)
lo.strat <- sev.pixel.data %>% filter(sev.bin == 'Low' & treatment == 'Disturb') %>% group_by(stratlayer) %>% summarize(n = n() /35) %>% filter(n >= 5) %>% pull(stratlayer)
mid.strat <- sev.pixel.data %>% filter(sev.bin == 'Mid' & treatment == 'Disturb') %>% group_by(stratlayer) %>% summarize(n = n() /35) %>% filter(n >= 5) %>% pull(stratlayer)
hi.strat <- sev.pixel.data %>% filter(sev.bin == 'High' & treatment == 'Disturb') %>% group_by(stratlayer) %>% summarize(n = n() /35) %>% filter(n >= 5) %>% pull(stratlayer)
sev.pixel.data %>%
filter(!is.na(Tree_Cover) & fire.year <= 2010 & fire.year > 1986 & !is.na(sev.bin) & (fire_year_2019 <=2010 | is.na(fire_year_2019))) %>% # &
#Match the controls to the disturbed based on the stratified sampling bins
filter(case_when(sev.bin == 'Unchanged' ~ stratlayer %in% un.strat,
sev.bin == 'Low' ~ stratlayer %in% lo.strat,
sev.bin == 'Mid' ~ stratlayer %in% mid.strat,
sev.bin == 'High' ~ stratlayer %in% hi.strat)) %>%
dplyr::group_by(system.index, sev.bin, treatment) %>%
summarize(tpa_max = max(tpa_max[vi.year %in% c(2015, 2016, 2017)], na.rm = TRUE),
sev.bin = sev.bin[vi.year == 2010],
clm_precip_sum = clm_precip_sum[vi.year == 2010],
clm_temp_mean = clm_temp_mean[vi.year == 2010],
Water_Stress = sum(PrET[vi.year %in% c(2012,2013,2014,2015)]),
Tree_Cover = mean(Tree_Cover[vi.year %in% c(2013,2014)]),
pre.tree = Tree_Cover[vi.year == (fire.year - 2)],
pre.shrub = Shrub_Cover[vi.year == (fire.year - 2)]) %>%
summary()
pc <- ggplot(data = sev.pixel.data %>%
filter(Tree_Cover > 0 & fire.year <= 2010 & fire.year > 1986 & !is.na(sev.bin) & sev.bin != 'Unchanged' & (fire_year_2019 <=2010 | is.na(fire_year_2019))) %>% # &
#Match the controls to the disturbed based on the stratified sampling bins
filter(case_when(sev.bin == 'Unchanged' ~ stratlayer %in% un.strat,
sev.bin == 'Low' ~ stratlayer %in% lo.strat,
sev.bin == 'Mid' ~ stratlayer %in% mid.strat,
sev.bin == 'High' ~ stratlayer %in% hi.strat)) %>%
dplyr::group_by(system.index, sev.bin, treatment) %>%
summarize(tpa_max = max(tpa_max[vi.year %in% c(2015, 2016, 2017)], na.rm = TRUE),
sev.bin = sev.bin[vi.year == 2010],
clm_precip_sum = clm_precip_sum[vi.year == 2010],
clm_temp_mean = clm_temp_mean[vi.year == 2010],
Water_Stress = sum(PrET[vi.year %in% c(2012,2013,2014,2015)]),
Tree_Cover = mean(Tree_Cover[vi.year %in% c(2013,2014)]),
pre.tree = Tree_Cover[vi.year == fire.year - 2])
%>% filter(!is.na(pre.tree))) +
geom_density(mapping = aes(x = pre.tree, color = treatment)) +
facet_wrap(. ~ sev.bin)
pc
p5 <- ggplot() +
geom_hline(yintercept = 0) +
geom_line(data = sev.pixel.data %>%
filter(!is.na(tpa_max) & fire.year <= 2010 & fire.year > 1986 & !is.na(sev.bin) & sev.bin != 'Unchanged' & (fire_year_2019 <=2010 | treatment == 'Control')) %>% # &
#Match the controls to the disturbed based on the stratified sampling bins
filter(case_when(sev.bin == 'Unchanged' ~ stratlayer %in% un.strat,
sev.bin == 'Low' ~ stratlayer %in% lo.strat,
sev.bin == 'Mid' ~ stratlayer %in% mid.strat,
sev.bin == 'High' ~ stratlayer %in% hi.strat)) %>%
filter(vi.year >= 2010) %>%
# elevation <= elev.upper & clm_precip_sum_mean >= ppt.lower &
# if_else(treatment == 'Wildfire', fire.year == fire_year_2019_mode, is.na(fire_year_2019_mode))) %>%
group_by(date, sev.bin, treatment) %>%
summarize(tpa_max.mean = mean(tpa_max), tpa_max.n = n()), # %>%
# filter(if_else(sev.bin == '1985-2010', tpa_max.n >= 6000, tpa_max.n >= 0)),
mapping = aes(x = date, y = tpa_max.mean, color = treatment, linetype = treatment),
size = 1
) +
#Dead Trees 95% CI
geom_ribbon(data = sev.pixel.data %>%
filter(!is.na(tpa_max) & fire.year <= 2010 & fire.year > 1986 & !is.na(sev.bin) & sev.bin != 'Unchanged' & (fire_year_2019 <=2010 | treatment == 'Control')) %>% # &
#Match the controls to the disturbed based on the stratified sampling bins
filter(case_when(sev.bin == 'Unchanged' ~ stratlayer %in% un.strat,
sev.bin == 'Low' ~ stratlayer %in% lo.strat,
sev.bin == 'Mid' ~ stratlayer %in% mid.strat,
sev.bin == 'High' ~ stratlayer %in% hi.strat)) %>%
filter(vi.year >= 2010) %>%
# elevation <= elev.upper & clm_precip_sum_mean >= ppt.lower &
# if_else(treatment == 'Wildfire', fire.year == fire_year_2019_mode, is.na(fire_year_2019_mode))) %>%
group_by(date, sev.bin, treatment) %>%
summarize(tpa_max.mean = mean(tpa_max),
tpa_max.sd = sd(tpa_max), tpa_max.n = n()), #%>%
# filter(if_else(sev.bin == '1985-2010', tpa_max.n >= 6000, tpa_max.n >= 0)),
mapping = aes(ymin=tpa_max.mean - 1.96*(tpa_max.sd / sqrt(tpa_max.n)),
ymax=tpa_max.mean + 1.96*(tpa_max.sd / sqrt(tpa_max.n)),
x = date, fill = treatment), alpha = 0.3) +
#Do the Formating
scale_color_brewer(type = 'div', palette = 'Spectral', name = 'Treatment') +
scale_linetype(name = 'Treatment') +
scale_fill_brewer(type = 'div', palette = 'Spectral', name = 'Treatment') +
guides(color = guide_legend(), linetype = guide_legend(), fill = 'none') +
theme_dark() +
theme(axis.text.y = element_text(size = 8), axis.title.y = element_text(size = 10),
axis.title.x = element_blank(), legend.position = c(0.1, 0.6), legend.background = element_rect(colour = NA, fill = NA),
legend.key = element_rect(fill = NA), axis.text.x = element_blank(),
legend.title = element_text(size = 8), legend.text = element_text(size = 6)) +
geom_rect(data = data.frame(xmin = as.Date('2011-10-01'), xmax = as.Date('2015-09-30'), ymin = -Inf, ymax = Inf),
fill = "red", alpha = 0.3, mapping = aes(xmin = xmin, xmax = xmax, ymin = ymin, ymax = ymax)) +
xlim(as.Date('2010-08-01'),as.Date('2020-01-01')) + facet_grid(. ~ sev.bin) +
ylab(expression(atop('Die-off Severity', '(trees ha'^-1*')'))) + xlab('Year') #+ facet_wrap(. ~ fire_type_last, labeller = as_labeller(c('1' = 'Wild', '2' = 'Prescribed')))
p5
p6 <- ggplot() +
# geom_line(mapping = aes(group = .geo), color = 'dark gray', size = 0.2, alpha = 0.2) +
geom_hline(yintercept = 0) + #geom_vline(xintercept = 0, linetype = 'dashed') +
geom_line(data = sev.pixel.data %>%
filter(Tree_Cover > 0 & fire.year <= 2010 & fire.year > 1986 & !is.na(sev.bin) & sev.bin != 'Unchanged' & (fire_year_2019 <=2010 | treatment == 'Control')) %>% # &
#Match the controls to the disturbed based on the stratified sampling bins
filter(case_when(sev.bin == 'Unchanged' ~ stratlayer %in% un.strat,
sev.bin == 'Low' ~ stratlayer %in% lo.strat,
sev.bin == 'Mid' ~ stratlayer %in% mid.strat,
sev.bin == 'High' ~ stratlayer %in% hi.strat)) %>%
filter(vi.year >= 2010) %>%
# elevation <= elev.upper & clm_precip_sum_mean >= ppt.lower &
# if_else(treatment == 'Wildfire', fire.year == fire_year_2019_mode, is.na(fire_year_2019_mode))) %>%
group_by(date, sev.bin, treatment) %>%
summarize(Tree_Cover.mean = mean(Tree_Cover), count = n()), #%>%
# filter(case_when(sev.bin == 'Unchanged or Low' ~ count >= 2500, sev.bin == 'Mid or High' ~ count >= 2700, sev.bin == 'No Fire' ~ count >= 0)),
mapping = aes(x = date, y = Tree_Cover.mean, color = treatment, linetype = treatment),
size = 1) +
#Tree Cover 95% CI
geom_ribbon(data = sev.pixel.data %>%
filter(Tree_Cover > 0 & fire.year <= 2010 & fire.year > 1986 & !is.na(sev.bin) & sev.bin != 'Unchanged' & (fire_year_2019 <=2010 | treatment == 'Control')) %>% # &
#Match the controls to the disturbed based on the stratified sampling bins
filter(case_when(sev.bin == 'Unchanged' ~ stratlayer %in% un.strat,
sev.bin == 'Low' ~ stratlayer %in% lo.strat,
sev.bin == 'Mid' ~ stratlayer %in% mid.strat,
sev.bin == 'High' ~ stratlayer %in% hi.strat)) %>%
filter(vi.year >= 2010) %>%
# elevation <= elev.upper & clm_precip_sum_mean >= ppt.lower &
# if_else(treatment == 'Wildfire', fire.year == fire_year_2019_mode, is.na(fire_year_2019_mode))) %>%
group_by(date, sev.bin, treatment) %>%
summarize(Tree_Cover.mean = mean(Tree_Cover),
Tree_Cover.sd = sd(Tree_Cover), count = n()), # %>%
# filter(case_when(sev.bin == 'Unchanged or Low' ~ count >= 2500, sev.bin == 'Mid or High' ~ count >= 2700, sev.bin == 'No Fire' ~ count >= 0)),
mapping = aes(ymin=Tree_Cover.mean - 1.96*(Tree_Cover.sd / sqrt(count)),
ymax=Tree_Cover.mean + 1.96*(Tree_Cover.sd / sqrt(count)),
x = date, fill = treatment), alpha = 0.3) +
#Do the Formating
scale_color_brewer(type = 'div', palette = 'Spectral', name = 'Treatment') +
scale_linetype(name = 'Treatment') +
scale_fill_brewer(type = 'div', palette = 'Spectral', name = 'Treatment') +
guides(color = guide_legend(), linetype = guide_legend(), fill = 'none') +
theme_dark() +
theme(axis.text.y = element_text(size = 8), axis.title.y = element_text(size = 10),
axis.title.x = element_text(size = 10), legend.position = "none", legend.background = element_rect(colour = NA, fill = NA),
legend.key = element_rect(fill = NA), axis.text.x = element_text(size = 8),
legend.title = element_text(size = 8), legend.text = element_text(size = 6)) +
geom_rect(data = data.frame(xmin = as.Date('2011-10-01'), xmax = as.Date('2015-09-30'), ymin = -Inf, ymax = Inf),
fill = "red", alpha = 0.3, mapping = aes(xmin = xmin, xmax = xmax, ymin = ymin, ymax = ymax)) + facet_grid(. ~ sev.bin) +
xlim(as.Date('2010-08-01'),as.Date('2020-01-01')) + #ylim(20, 45) + #facet_grid(. ~ sev.bin) + #ylim(20, 50) +
ylab(expression('Tree Cover (%)')) + xlab('Year') #+ facet_wrap(. ~ fire_type_last, labeller = as_labeller(c('1' = 'Wild', '2' = 'Prescribed')))
p6
sev.data <- read.csv(file.path(dir_in, "fire_south_sierra_USFS_sevfire_500pt_20shrub_20tree_ts8_300m_20230221.csv"), header = TRUE, na.strings = "NaN")
# fire.data$fire.year <- fire.data$perimeter_year
sev.data$treatment <- 'Disturb'
summary(sev.data)
# list.files(fire_in)
# list.files(fire_in)
unchanged.control.data <- read.csv(file.path(dir_in, "control_south_sierra_unchanged_sev_2km_buffer_200pt_20shrub_20tree_ts16_300m_20230221.csv"), header = TRUE, na.strings = "NaN")
low.control.data <- read.csv(file.path(dir_in, "control_south_sierra_low_sev_2km_buffer_200pt_20shrub_20tree_ts16_300m_20230221.csv"), header = TRUE, na.strings = "NaN")
med.control.data <- read.csv(file.path(dir_in, "control_south_sierra_med_sev_2km_buffer_200pt_20shrub_20tree_ts16_300m_20230221.csv"), header = TRUE, na.strings = "NaN")
high.control.data <- read.csv(file.path(dir_in, "control_south_sierra_high_sev_2km_buffer_200pt_20shrub_20tree_ts16_300m_20230221.csv"), header = TRUE, na.strings = "NaN")
sev.control.data <- rbind(unchanged.control.data, low.control.data, med.control.data, high.control.data)
#Add Fire Columns
# control.data$fire_sev_2010 <- -9999
# control.data$fire_year_2010 <- -9999
# control.data$fire_ID_2010 <- -9999
sev.control.data$fire_count_2010 <- -9999
sev.control.data$fire_sev_2019 <- -9999
sev.control.data$fire_year_2019 <- -9999
sev.control.data$fire_ID_2019 <- -9999
sev.control.data$fire_count_2019 <- -9999
sev.control.data$fire_sev_2020 <- -9999
sev.control.data$fire_year_2020 <- -9999
sev.control.data$fire_ID_2020 <- -9999
sev.control.data$fire_count_2020 <- -9999
#Add buffer dummy columns for fire.data
# sev.data$buffer_type_2010 <- -9999
# sev.data$buffer_type_2019 <- -9999
# sev.data$buffer_year_2010 <- -9999
# sev.data$buffer_year_2019 <- -9999
# summary(control.data)
#Get a  of the data
# summary(pixel.data)
# pixel.data <- pixel.data %>% filter(fire.year >= 1919 & !is.na(stand.age) & !is.na(NDMI))
# control.data$fire.year <- control.data$perimeter_year
sev.control.data$treatment <- 'Control' #Try making this 1-km versus, 2-km
#Figure out why the two dataframes don't match
# sev.n <- sev.data %>% colnames()
# con.n <- control.data %>% colnames()
# sev.n
# con.n
# sev.n[!(sev.n %in% con.n)]
#Combine the data together
sev.pixel.data <- rbind(sev.data, sev.control.data)
# pixel.data <- rbind(combine.data, control.data.2km)
summary(sev.pixel.data)
`%notin%` <- Negate(`%in%`)
#Convert data to long format
sev.pixel.data <- sev.pixel.data %>% #dplyr::select(-c('latitude', 'longitude')) %>%
pivot_longer(cols = X10_AET:X9_tpa_max, names_to = c('year', '.value'), names_pattern = "X(\\d{1}|\\d{2})_(.*)", names_repair = "unique")
sev.pixel.data$year <- as.numeric(sev.pixel.data$year) + 1984
#Convert missing TPA data to NAs
sev.pixel.data[sev.pixel.data$tpa_max < 0,]$tpa_max <- NA
#Convert fire data -9999 to NAs
sev.pixel.data[sev.pixel.data$fire_sev_2010 == -9999,]$fire_sev_2010 <- NA
sev.pixel.data[sev.pixel.data$fire_year_2010 == -9999,]$fire_year_2010 <- NA
sev.pixel.data[sev.pixel.data$fire_ID_2010 == -9999,]$fire_ID_2010 <- NA
sev.pixel.data[sev.pixel.data$fire_count_2010 == -9999,]$fire_count_2010 <- NA
sev.pixel.data[sev.pixel.data$fire_sev_2019 == -9999,]$fire_sev_2019 <- NA
sev.pixel.data[sev.pixel.data$fire_year_2019 == -9999,]$fire_year_2019 <- NA
sev.pixel.data[sev.pixel.data$fire_ID_2019 == -9999,]$fire_ID_2019 <- NA
sev.pixel.data[sev.pixel.data$fire_count_2019 == -9999,]$fire_count_2019 <- NA
sev.pixel.data[sev.pixel.data$fire_sev_2020 == -9999,]$fire_sev_2020 <- NA
sev.pixel.data[sev.pixel.data$fire_year_2020 == -9999,]$fire_year_2020 <- NA
sev.pixel.data[sev.pixel.data$fire_ID_2020 == -9999,]$fire_ID_2020 <- NA
sev.pixel.data[sev.pixel.data$fire_count_2020 == -9999,]$fire_count_2020 <- NA
#Convert to trees per hectare
sev.pixel.data$tpa_max <- sev.pixel.data$tpa_max * 2.47105
#Make the dates into date time format for R
sev.pixel.data$date <- as.Date(as.character(sev.pixel.data$year), format = '%Y')
# sev.pixel.data$vi.year <- format(sev.pixel.data$date , '%Y')
sev.pixel.data$vi.year <- sev.pixel.data$year
#Use the FRAP fire perimeter year
sev.pixel.data$fire.year <- sev.pixel.data$fire_year_2010
sev.pixel.data$stand.age <- as.numeric(sev.pixel.data$year) - as.numeric(sev.pixel.data$fire.year)
#Update Cover data to 100% scale
sev.pixel.data$Tree_Cover <- sev.pixel.data$Tree_Cover / 100
sev.pixel.data$Shrub_Cover <- sev.pixel.data$Shrub_Cover / 100
sev.pixel.data$Herb_Cover <- sev.pixel.data$Herb_Cover / 100
sev.pixel.data$Bare_Cover <- sev.pixel.data$Bare_Cover / 100
#Convert the SPI48 scale back to decimal
sev.pixel.data$SPI48 <- sev.pixel.data$SPI48 / 100
#Try to fix soil moisture by dividing by 10
sev.pixel.data$Soil_Moisture <- sev.pixel.data$Soil_Moisture / 10
#Rename ppt and Water Stress
sev.pixel.data$Water_Stress <- sev.pixel.data$Water_Stress
sev.pixel.data$ppt <- sev.pixel.data$ppt
sev.pixel.data$AET <- sev.pixel.data$AET
sev.pixel.data$GPP <- sev.pixel.data$GPP
sev.pixel.data$elevation <- sev.pixel.data$elevation
sev.pixel.data$PrET <- sev.pixel.data$ppt - sev.pixel.data$AET
#
summary(sev.pixel.data %>% filter(fire_sev_2010 != 243))
sev.pixel.data <- sev.pixel.data %>% mutate(treat = case_when(treatment == 'Disturb' ~ 1, treatment == 'Control' ~ 0))
# match0 <- matchit(data = sev.pixel.data %>% filter(fire_sev_2010 != 243), formula = treat ~ Tree_Cover + clm_precip_sum, method = NULL, distance = "glm")
# summary(match0)
#
# match1 <- matchit(data = sev.pixel.data %>% filter(fire_sev_2010 != 243), formula = treat ~ clm_precip_sum,
#                   method = "nearest", distance = "glm")
# summary(match1)
sev.pixel.data <- sev.pixel.data %>% mutate(fire.year.bin = case_when(
# bin >= 1 ~ '1900',
# bin == 2 ~ '1909-1910',
# bin >= 1911 & bin <= 1920 ~ '95-104', #Calculated relative to 2015
# treatment == 'Control' ~ 'No Fire',
# fire.year >= 1910 & fire.year <=  1970 ~ '1910-1970',#'81-95',
# fire.year >= 1936 & fire.year <= 1950 ~ '65-79',
# fire.year >= 1951 & fire.year <= 1965 ~ '50-64',
# fire.year >= 1951 & fire.year <= 1960 ~ '55-64',
# fire.year >= 1971 & fire.year <= 1980 ~ '1971-1980',#'56-80',
# fire.year >= 1985 & fire.year <= 1990 ~ '1985-1990',
# fire.year >= 1991 & fire.year <= 2000 ~ '1991-2000',#'31-55',
# fire.year >= 1991 & fire.year <= 2000 ~ '15-24',
fire.year >= 1985 & fire.year <= 2010 ~ '1985-2010',
# fire.year >= 2001 & fire.year <= 2010 ~ '2001-2010',
fire.year >= 2011 & fire.year <= 2018 ~ '2011-2017')) #,
# fire.year >= 2019 ~ '2019-2020'))#'0-4'))
#Fire Severity Bins
#With re-export type needs to be converted to sev
sev.pixel.data <- sev.pixel.data %>% mutate(sev.bin = case_when(
fire_sev_2010 == '0' ~ 'No Fire',
fire_sev_2010 == '1' ~ 'Unchanged',
fire_sev_2010 == '2' ~ 'Low',
fire_sev_2010 == '3' ~ 'Mid',
fire_sev_2010 == '4' ~ 'High',
fire_sev_2010 == '255' ~ 'Masked')) # end function
sev.pixel.data %>% summary()
#Fire year bins for Fire Severity Data
sev.pixel.data$fire.year.bin = with(sev.pixel.data, factor(fire.year.bin, levels = c('2011-2017', '1985-2010')))#c('0-4','5-30','31-55','56-80',
#Make the years bin lables in the correct order
sev.pixel.data$sev.bin = with(sev.pixel.data, factor(sev.bin, levels = c('No Fire','Unchanged', 'Low','Mid', 'High')))#c('No Fire','Masked', 'Unchanged or Low','Mid or High')))
#Recode the veg type data
sev.pixel.data$veg_name <- recode(.x=sev.pixel.data$lf_evt_2001, .default = NA_character_, '2015' = 'Redwood', '2019' = 'Pinyon Juniper', '2020' = 'Bristlecone Pine', '2027' = 'Mixed Conifer', '2028' = 'White Fir', '2031' = 'Jeffrey Pine',
'2032' = 'Red Fir', '2033' = 'Subalpine', '2034' = 'Knobcone Pine', '2043' = 'Mixed Conifer', '2044' = 'Subalpine', '2045' = 'Mixed Conifer',
'2053' = 'Ponderosa Pine', '2058' = 'Lodgepole Pine', '2061' = 'Mixed Conifer', '2112' = 'Blue Oak Woodland', '2172' = 'White Fir', '2173' = 'Lodgepole Pine', '2201' = 'Oregon White Oak', '2230' = 'Blue Oak - Digger Pine')
sev.pixel.data %>% summary()
#Select strat categories for fire treatments
un.strat <- sev.pixel.data %>% filter(sev.bin == 'Unchanged' & treatment == 'Disturb') %>% group_by(stratlayer) %>% summarize(n = n() /35) %>% filter(n >= 5) %>% pull(stratlayer)
lo.strat <- sev.pixel.data %>% filter(sev.bin == 'Low' & treatment == 'Disturb') %>% group_by(stratlayer) %>% summarize(n = n() /35) %>% filter(n >= 5) %>% pull(stratlayer)
mid.strat <- sev.pixel.data %>% filter(sev.bin == 'Mid' & treatment == 'Disturb') %>% group_by(stratlayer) %>% summarize(n = n() /35) %>% filter(n >= 5) %>% pull(stratlayer)
hi.strat <- sev.pixel.data %>% filter(sev.bin == 'High' & treatment == 'Disturb') %>% group_by(stratlayer) %>% summarize(n = n() /35) %>% filter(n >= 5) %>% pull(stratlayer)
sev.pixel.data %>%
filter(!is.na(Tree_Cover) & fire.year <= 2010 & fire.year > 1986 & !is.na(sev.bin) & (fire_year_2019 <=2010 | is.na(fire_year_2019))) %>% # &
#Match the controls to the disturbed based on the stratified sampling bins
filter(case_when(sev.bin == 'Unchanged' ~ stratlayer %in% un.strat,
sev.bin == 'Low' ~ stratlayer %in% lo.strat,
sev.bin == 'Mid' ~ stratlayer %in% mid.strat,
sev.bin == 'High' ~ stratlayer %in% hi.strat)) %>%
dplyr::group_by(system.index, sev.bin, treatment) %>%
summarize(tpa_max = max(tpa_max[vi.year %in% c(2015, 2016, 2017)], na.rm = TRUE),
sev.bin = sev.bin[vi.year == 2010],
clm_precip_sum = clm_precip_sum[vi.year == 2010],
clm_temp_mean = clm_temp_mean[vi.year == 2010],
Water_Stress = sum(PrET[vi.year %in% c(2012,2013,2014,2015)]),
Tree_Cover = mean(Tree_Cover[vi.year %in% c(2013,2014)]),
pre.tree = Tree_Cover[vi.year == (fire.year - 2)],
pre.shrub = Shrub_Cover[vi.year == (fire.year - 2)]) %>%
summary()
pa <- ggplot(data = sev.pixel.data %>%
filter(Tree_Cover > 0 & fire.year <= 2010 & fire.year > 1986 & !is.na(sev.bin) & sev.bin != 'Unchanged' & (fire_year_2019 <=2010 | is.na(fire_year_2019))) %>% # &
#Match the controls to the disturbed based on the stratified sampling bins
filter(case_when(sev.bin == 'Unchanged' ~ stratlayer %in% un.strat,
sev.bin == 'Low' ~ stratlayer %in% lo.strat,
sev.bin == 'Mid' ~ stratlayer %in% mid.strat,
sev.bin == 'High' ~ stratlayer %in% hi.strat)) %>%
dplyr::group_by(system.index, sev.bin, treatment) %>%
summarize(tpa_max = max(tpa_max[vi.year %in% c(2015, 2016, 2017)], na.rm = TRUE),
sev.bin = sev.bin[vi.year == 2010],
clm_precip_sum = clm_precip_sum[vi.year == 2010],
clm_temp_mean = clm_temp_mean[vi.year == 2010],
Water_Stress = sum(PrET[vi.year %in% c(2012,2013,2014,2015)]),
Tree_Cover = mean(Tree_Cover[vi.year %in% c(2013,2014)]),
pre.tree = Tree_Cover[vi.year == fire.year - 2])) +
geom_density(mapping = aes(x = clm_temp_mean, color = treatment)) +
facet_wrap(. ~ sev.bin)
pa
pb <- ggplot(data = sev.pixel.data %>%
filter(Tree_Cover > 0 & fire.year <= 2010 & fire.year > 1986 & !is.na(sev.bin) & sev.bin != 'Unchanged' & (fire_year_2019 <=2010 | is.na(fire_year_2019))) %>% # &
#Match the controls to the disturbed based on the stratified sampling bins
filter(case_when(sev.bin == 'Unchanged' ~ stratlayer %in% un.strat,
sev.bin == 'Low' ~ stratlayer %in% lo.strat,
sev.bin == 'Mid' ~ stratlayer %in% mid.strat,
sev.bin == 'High' ~ stratlayer %in% hi.strat)) %>%
dplyr::group_by(system.index, sev.bin, treatment) %>%
summarize(tpa_max = max(tpa_max[vi.year %in% c(2015, 2016, 2017)], na.rm = TRUE),
sev.bin = sev.bin[vi.year == 2010],
clm_precip_sum = clm_precip_sum[vi.year == 2010],
clm_temp_mean = clm_temp_mean[vi.year == 2010],
Water_Stress = sum(PrET[vi.year %in% c(2012,2013,2014,2015)]),
Tree_Cover = mean(Tree_Cover[vi.year %in% c(2013,2014)]),
pre.tree = Tree_Cover[vi.year == fire.year - 2])) +
geom_density(mapping = aes(x = clm_precip_sum, color = treatment)) +
facet_wrap(. ~ sev.bin)
pb
pc <- ggplot(data = sev.pixel.data %>%
filter(Tree_Cover > 0 & fire.year <= 2010 & fire.year > 1986 & !is.na(sev.bin) & sev.bin != 'Unchanged' & (fire_year_2019 <=2010 | is.na(fire_year_2019))) %>% # &
#Match the controls to the disturbed based on the stratified sampling bins
filter(case_when(sev.bin == 'Unchanged' ~ stratlayer %in% un.strat,
sev.bin == 'Low' ~ stratlayer %in% lo.strat,
sev.bin == 'Mid' ~ stratlayer %in% mid.strat,
sev.bin == 'High' ~ stratlayer %in% hi.strat)) %>%
dplyr::group_by(system.index, sev.bin, treatment) %>%
summarize(tpa_max = max(tpa_max[vi.year %in% c(2015, 2016, 2017)], na.rm = TRUE),
sev.bin = sev.bin[vi.year == 2010],
clm_precip_sum = clm_precip_sum[vi.year == 2010],
clm_temp_mean = clm_temp_mean[vi.year == 2010],
Water_Stress = sum(PrET[vi.year %in% c(2012,2013,2014,2015)]),
Tree_Cover = mean(Tree_Cover[vi.year %in% c(2013,2014)]),
pre.tree = Tree_Cover[vi.year == fire.year - 2])
%>% filter(!is.na(pre.tree))) +
geom_density(mapping = aes(x = pre.tree, color = treatment)) +
facet_wrap(. ~ sev.bin)
pc
