guides(color = guide_legend(), linetype = guide_legend(), fill = guide_legend(), alpha = 'none') +
facet_grid(sev.bin ~ .) +
scale_y_reverse() +
#Add the R^2 values
# geom_text(data = r2.text, mapping = aes(x = x, y = y, label = label, color = treatment), size = 3.5, parse = TRUE) +
#Add the R^2 text
# geom_text(data = letter.text, mapping = aes(x = x, y = y, label = label), size = 5, fontface = "bold") +
theme_bw() +
xlab(expression('Four-year Pr-ET (mm 4yr'^-1*')')) + ylab('Die-off (% Tree Cover)')
library(ggnewscale)
p1 <- ggplot(data = sev.pixel.filter %>% filter(sev.bin != 'Unchanged')) +
geom_bin2d(binwidth = c(200, 2), mapping = aes(x = PrET_4yr, y = dTree, group = ..count.., alpha = ..count..)) +
scale_fill_gradient2(limits = c(0,340), breaks = c(5,100,200,300), midpoint = 170, low = "cornflowerblue", mid = "yellow", high = "red", na.value = 'transparent') +
scale_alpha(range = c(1, 1), limits = c(5, 340), na.value = 0.4) +labs(fill = "Grid Cells") +
#Create the density layer
new_scale_fill() +
#Piecewise linear regression fit line
stat_cor(mapping = aes(x = PrET_4yr, y = dTree, color = treatment, label = paste(..rr.label..)), show.legend = FALSE) +
geom_smooth(method = 'lm', mapping = aes(x = PrET_4yr, y = dTree, color = treatment, linetype = treatment, fill = treatment), se = TRUE, show.legend = FALSE, size = 2) +
# geom_line(mapping = aes(x=PrET_4yr, y=ADS.fit, color = treatment, linetype = treatment), size=2) +
# #Piecewise fit uncertainty
# geom_ribbon(mapping = aes(x = PrET_4yr, y = ADS.fit, ymax = ADS.fit + 1.96*ADS.se.fit, ymin = ADS.fit - 1.96*ADS.se.fit, fill = treatment), alpha = 0.4) +
#Do the Formating
scale_linetype(name = 'Treatment') +
scale_fill_brewer(type = 'div', palette = 'Set1', name = 'Treatment') +
scale_color_brewer(type = 'div', palette = 'Set1', name = 'Treatment') +
guides(color = guide_legend(), linetype = guide_legend(), fill = guide_legend(), alpha = 'none') +
facet_grid(sev.bin ~ .) +
scale_y_reverse() +
#Add the R^2 values
# geom_text(data = r2.text, mapping = aes(x = x, y = y, label = label, color = treatment), size = 3.5, parse = TRUE) +
#Add the R^2 text
# geom_text(data = letter.text, mapping = aes(x = x, y = y, label = label), size = 5, fontface = "bold") +
theme_bw() +
xlab(expression('Four-year Pr-ET (mm 4yr'^-1*')')) + ylab('Die-off (% Tree Cover)')
p1
p2 <- p1 + theme(
legend.background = element_rect(colour = NA, fill = NA), # This removes the white square behind the legend
legend.justification = c(1, 0),
legend.position = c(0.9, 0.83),
legend.text = element_text(size = 10),
legend.title = element_text(size = 10),
legend.direction = "vertical") +
guides(fill = guide_colorbar(barwidth = 1, barheight = 3,
title.position = "top",
title.hjust = 0.5,
ticks.colour = "black"))
p2
p3 <- ggplot(data = sev.pixel.filter %>% filter(sev.bin != 'Unchanged')) +
geom_bin2d(binwidth = c(2, 3), mapping = aes(x = Tree_Cover, y = dTree, group = ..count.., alpha = ..count..)) +
scale_fill_gradient2(limits = c(0,340), breaks = c(5,100, 200, 300), midpoint = 170, low = "cornflowerblue", mid = "yellow", high = "red", na.value = 'transparent', guide = 'none') +
scale_alpha(range = c(1, 1), limits = c(5, 340), na.value = 0.4) +labs(fill = "Grid Cells") +
labs(fill = "Grid Cells") +
#Create the density layer
new_scale_fill() +
#Piecewise linear regression fit line
# geom_line(mapping = aes(x=Water_Stress, y=dTree, color = treatment, linetype = treatment), size=2) +
#Piecewise fit uncertainty
# geom_ribbon(mapping = aes(x = Water_Stress, y = dTree.fit, ymax = dTree.fit + 1.96*dTree.se.fit, ymin = dTree.fit - 1.96*dTree.se.fit, fill = treatment), alpha = 0.4) +
stat_cor(mapping = aes(x = Tree_Cover, y = dTree, color = treatment, label = paste(..rr.label..)), show.legend = FALSE) +
geom_smooth(method = 'lm', mapping = aes(x = Tree_Cover, y = dTree, color = treatment, linetype = treatment, fill = treatment),show.legend = TRUE, size = 2) +
#Do the Formating
scale_linetype(name = 'Treatment') +
scale_fill_brewer(type = 'div', palette = 'Set1', name = 'Treatment') +
scale_color_brewer(type = 'div', palette = 'Set1', name = 'Treatment') +
guides(color = guide_legend(), linetype = guide_legend(), fill = guide_legend(), alpha = 'none') +
facet_grid(sev.bin ~ .) +
#Add the R^2 values
# geom_text(data = r2.text, mapping = aes(x = x, y = y, label = label, color = treatment), size = 3.5, parse = TRUE) +
#Add the R^2 text
# geom_text(data = letter.text, mapping = aes(x = x, y = y, label = label), size = 5, fontface = "bold") +
theme_bw() +
theme(axis.title.y = element_blank(), axis.text.y = element_blank()) +
scale_y_reverse() +
xlab(expression('Tree Cover (%)')) + ylab(expression('Die-off (trees ha'^-1*')'))
p3
p4 <- p3 + theme(
legend.background = element_rect(colour = NA, fill = NA), # This removes the white square behind the legend
legend.justification = c(1, 0),
legend.position = c(0.7, 0.9),
legend.text = element_text(size = 10),
legend.title = element_text(size = 10),
legend.direction = "vertical")
p4
f1 <- ggarrange(p2, p4, ncol = 2, nrow = 1, common.legend = FALSE, widths = c(1, 0.9), align = "h")
f1
p2
p1 <- ggplot(data = sev.pixel.filter) + # %>% filter(sev.bin != 'Unchanged')) +
geom_bin2d(binwidth = c(200, 2), mapping = aes(x = PrET_4yr, y = dTree, group = ..count.., alpha = ..count..)) +
scale_fill_gradient2(limits = c(0,340), breaks = c(5,100,200,300), midpoint = 170, low = "cornflowerblue", mid = "yellow", high = "red", na.value = 'transparent') +
scale_alpha(range = c(1, 1), limits = c(5, 340), na.value = 0.4) +labs(fill = "Grid Cells") +
#Create the density layer
new_scale_fill() +
#Piecewise linear regression fit line
stat_cor(mapping = aes(x = PrET_4yr, y = dTree, color = treatment, label = paste(..rr.label..)), show.legend = FALSE) +
geom_smooth(method = 'lm', mapping = aes(x = PrET_4yr, y = dTree, color = treatment, linetype = treatment, fill = treatment), se = TRUE, show.legend = FALSE, size = 2) +
# geom_line(mapping = aes(x=PrET_4yr, y=ADS.fit, color = treatment, linetype = treatment), size=2) +
# #Piecewise fit uncertainty
# geom_ribbon(mapping = aes(x = PrET_4yr, y = ADS.fit, ymax = ADS.fit + 1.96*ADS.se.fit, ymin = ADS.fit - 1.96*ADS.se.fit, fill = treatment), alpha = 0.4) +
#Do the Formating
scale_linetype(name = 'Treatment') +
scale_fill_brewer(type = 'div', palette = 'Set1', name = 'Treatment') +
scale_color_brewer(type = 'div', palette = 'Set1', name = 'Treatment') +
guides(color = guide_legend(), linetype = guide_legend(), fill = guide_legend(), alpha = 'none') +
facet_grid(sev.bin ~ .) +
scale_y_reverse() +
#Add the R^2 values
# geom_text(data = r2.text, mapping = aes(x = x, y = y, label = label, color = treatment), size = 3.5, parse = TRUE) +
#Add the R^2 text
# geom_text(data = letter.text, mapping = aes(x = x, y = y, label = label), size = 5, fontface = "bold") +
theme_bw() +
xlab(expression('Four-year Pr-ET (mm 4yr'^-1*')')) + ylab('Die-off (% Tree Cover)')
p1
p2 <- p1 + theme(
legend.background = element_rect(colour = NA, fill = NA), # This removes the white square behind the legend
legend.justification = c(1, 0),
legend.position = c(0.9, 0.83),
legend.text = element_text(size = 10),
legend.title = element_text(size = 10),
legend.direction = "vertical") +
guides(fill = guide_colorbar(barwidth = 1, barheight = 3,
title.position = "top",
title.hjust = 0.5,
ticks.colour = "black"))
p2
p3 <- ggplot(data = sev.pixel.filter) + # %>% filter(sev.bin != 'Unchanged')) +
geom_bin2d(binwidth = c(2, 3), mapping = aes(x = Tree_Cover, y = dTree, group = ..count.., alpha = ..count..)) +
scale_fill_gradient2(limits = c(0,340), breaks = c(5,100, 200, 300), midpoint = 170, low = "cornflowerblue", mid = "yellow", high = "red", na.value = 'transparent', guide = 'none') +
scale_alpha(range = c(1, 1), limits = c(5, 340), na.value = 0.4) +labs(fill = "Grid Cells") +
labs(fill = "Grid Cells") +
#Create the density layer
new_scale_fill() +
#Piecewise linear regression fit line
# geom_line(mapping = aes(x=Water_Stress, y=dTree, color = treatment, linetype = treatment), size=2) +
#Piecewise fit uncertainty
# geom_ribbon(mapping = aes(x = Water_Stress, y = dTree.fit, ymax = dTree.fit + 1.96*dTree.se.fit, ymin = dTree.fit - 1.96*dTree.se.fit, fill = treatment), alpha = 0.4) +
stat_cor(mapping = aes(x = Tree_Cover, y = dTree, color = treatment, label = paste(..rr.label..)), show.legend = FALSE) +
geom_smooth(method = 'lm', mapping = aes(x = Tree_Cover, y = dTree, color = treatment, linetype = treatment, fill = treatment),show.legend = TRUE, size = 2) +
#Do the Formating
scale_linetype(name = 'Treatment') +
scale_fill_brewer(type = 'div', palette = 'Set1', name = 'Treatment') +
scale_color_brewer(type = 'div', palette = 'Set1', name = 'Treatment') +
guides(color = guide_legend(), linetype = guide_legend(), fill = guide_legend(), alpha = 'none') +
facet_grid(sev.bin ~ .) +
#Add the R^2 values
# geom_text(data = r2.text, mapping = aes(x = x, y = y, label = label, color = treatment), size = 3.5, parse = TRUE) +
#Add the R^2 text
# geom_text(data = letter.text, mapping = aes(x = x, y = y, label = label), size = 5, fontface = "bold") +
theme_bw() +
theme(axis.title.y = element_blank(), axis.text.y = element_blank()) +
scale_y_reverse() +
xlab(expression('Tree Cover (%)')) + ylab(expression('Die-off (trees ha'^-1*')'))
p3
p4 <- p3 + theme(
legend.background = element_rect(colour = NA, fill = NA), # This removes the white square behind the legend
legend.justification = c(1, 0),
legend.position = c(0.7, 0.9),
legend.text = element_text(size = 10),
legend.title = element_text(size = 10),
legend.direction = "vertical")
p4
f1 <- ggarrange(p2, p4, ncol = 2, nrow = 1, common.legend = FALSE, widths = c(1, 0.9), align = "h")
f1
ggsave(filename = 'FigS9_fire_sev_dieoff_predictors.png', height=32, width= 20, units = 'cm', dpi=900)
frap.fire.data <- read.csv(file.path(dir_in, "fire_south_sierra_FRAP_wildfire_500pt_fire_year_5tree_ts8_300m_20230327.csv"), header = TRUE, na.strings = "NaN")
#Add the treatment column
frap.fire.data$treatment <- 'Disturb'
#Add the Wildfire buffer data
frap.control.data <- read.csv(file.path(dir_in, "control_south_sierra_FRAP_2km_buffer_500pt_fire_year_5tree_ts16_300m_20230327.csv"), header = TRUE, na.strings = "NaN")
#Add Fire Columns
frap.control.data$fire_count_2010 <- -9999
frap.control.data$fire_type_2019 <- -9999
frap.control.data$fire_year_2019 <- -9999
frap.control.data$fire_year_2019 <- -9999
frap.control.data$fire_count_2019 <- -9999
frap.control.data$fire_type_2020 <- -9999
frap.control.data$fire_year_2020 <- -9999
frap.control.data$fire_count_2020 <- -9999
#Add the treatment Column
frap.control.data$treatment <- 'Control'
#Combine the data together
frap.pixel.data <- rbind(frap.fire.data, frap.control.data)
#Add the Rx fire data
rx.data <- read.csv(file.path(dir_in, "fire_south_sierra_FRAP_rxfire_500pt_fire_year_5tree_ts8_300m_20230327.csv"), header = TRUE, na.strings = "NaN")
#Add the treatment column
rx.data$treatment <- 'Disturb'
#Add teh Rx fire buffer data
rx.control.data <- read.csv(file.path(dir_in, "control_south_sierra_Rx_2km_buffer_500pt_fire_year_5tree_ts16_300m_20230327.csv"), header = TRUE, na.strings = "NaN")
#Add Fire Columns
rx.control.data$fire_count_2010 <- -9999
rx.control.data$fire_type_2019 <- -9999
rx.control.data$fire_year_2019 <- -9999
rx.control.data$fire_year_2019 <- -9999
rx.control.data$fire_count_2019 <- -9999
rx.control.data$fire_type_2020 <- -9999
rx.control.data$fire_year_2020 <- -9999
rx.control.data$fire_count_2020 <- -9999
#Add the treatment column
rx.control.data$treatment <- 'Control' #Try making this 1-km versus, 2-km
#Combine the data together
rx.pixel.data <- rbind(rx.data, rx.control.data)
#Combine all the data together
pixel.data <- rbind(frap.pixel.data, rx.pixel.data)
`%notin%` <- Negate(`%in%`)
# summary(pixel.data)
#Convert fire data -9999 to NAs
# pixel.data[pixel.data$fire_type_2010 == -9999,]$fire_type_2010 <- NA
# pixel.data[pixel.data$fire_year_2010 == -9999,]$fire_year_2010 <- NA
pixel.data[pixel.data$fire_type_2019 == -9999,]$fire_type_2019 <- NA
pixel.data[pixel.data$fire_year_2019 == -9999,]$fire_year_2019 <- NA
pixel.data[pixel.data$fire_type_2020 == -9999,]$fire_type_2020 <- NA
pixel.data[pixel.data$fire_year_2020 == -9999,]$fire_year_2020 <- NA
#Use the FRAP fire perimeter year (use fire year 2010)
pixel.data$fire.year <- pixel.data$fire_year_2010
#Add the Fire types
pixel.data <- pixel.data %>% mutate(fire.type.bin = case_when(
fire_type_2010 == 1 ~ 'Wildfire',
fire_type_2010 == 2 ~ 'Rxfire'
))
#
# summary(pixel.data)
#Make treatment a factor
pixel.data$treatment = with(pixel.data, factor(treatment, levels = c('Control', 'Disturb')))#
#Recode the veg type data
# pixel.data$veg_name <- recode(.x=pixel.data$lf_evt_2001, .default = NA_character_, '2015' = 'Redwood', '2019' = 'Pinyon Juniper', '2020' = 'Bristlecone Pine', '2027' = 'Mixed Conifer', '2028' = 'White Fir', '2031' = 'Jeffrey Pine',
#                               '2032' = 'Red Fir', '2033' = 'Subalpine', '2034' = 'Knobcone Pine', '2043' = 'Mixed Conifer', '2044' = 'Subalpine', '2045' = 'Mixed Conifer',
#                               '2053' = 'Ponderosa Pine', '2058' = 'Lodgepole Pine', '2061' = 'Mixed Conifer', '2112' = 'Blue Oak Woodland', '2172' = 'White Fir', '2173' = 'Lodgepole Pine', '2201' = 'Oregon White Oak', '2230' = 'Blue Oak - Digger Pine')
#Select strat categories for fire treatments
#Select strat categories for fire treatments
frap.disturb <- pixel.data %>% filter(fire.type.bin == 'Wildfire' & treatment == 'Disturb') %>% group_by(stratlayer) %>% summarize(n = n())
rx.disturb <- pixel.data %>% filter(fire.type.bin == 'Rxfire' & treatment == 'Disturb') %>% group_by(stratlayer) %>% summarize(n = n())
# print(frap.strat)
frap.control <- pixel.data %>% filter(fire.type.bin == 'Wildfire' & treatment == 'Control') %>% group_by(stratlayer) %>% summarize(n = n())
rx.control <- pixel.data %>% filter(fire.type.bin == 'Rxfire' & treatment == 'Control') %>% group_by(stratlayer) %>% summarize(n = n())
#Get final stratlayers and numbers to sample from each
frap.strat <- inner_join(frap.disturb, frap.control, by = 'stratlayer') %>%
group_by(stratlayer) %>% summarize(n = min(n.x,n.y))
rx.strat <- inner_join(rx.disturb, rx.control, by = 'stratlayer') %>% #Inner Join the disturb and control data sets
group_by(stratlayer) %>% summarize(n = min(n.x,n.y)) #Take the minimum of the number of pixels as the sample number
# rx.strat %>% pull(n)
#Set the random number seed
set.seed(4561)
# colnames(pixel.data %>% dplyr::select(-'AET':'tpa_max'))
#Sample the prescribed fire control pixels
rx.sample <- pixel.data %>%
filter(treatment == 'Control' & fire.type.bin == 'Rxfire' & stratlayer %in% (rx.strat %>% pull(stratlayer))) %>% #Get just the unchanged control stratification layers
group_by(stratlayer) %>% #Group by Stratification layer
nest() %>% #Nest the data
ungroup() %>% #Un group the data
mutate(n = (rx.strat %>% pull(n))) %>% #Add the sample sizes for the stratlayers in the disturbed data
mutate(samp = map2(data, n, sample_n)) %>% #Do the random sample, sample_n is depricated for slice_sample, but slice sample doesn't work, .y = n
dplyr::select(-c(data, n)) %>% #Get rid of the data column
unnest(samp) #unnest the data
#Sample the Wildfire Control control pixels
frap.sample <- pixel.data %>%
filter(treatment == 'Control' & fire.type.bin == 'Wildfire' & stratlayer %in% (frap.strat %>% pull(stratlayer))) %>% #Get just the unchanged control stratification layers
group_by(stratlayer) %>% #Group by Stratification layer
nest() %>% #Nest the data
ungroup() %>% #Un group the data
mutate(n = (frap.strat %>% pull(n))) %>% #Add the sample sizes for the stratlayers in the disturbed data
mutate(samp = map2(data, n, sample_n)) %>% #Do the random sample, sample_n is depricated for slice_sample
dplyr::select(-c(data, n)) %>% #Get rid of the data column
unnest(samp) #unnest the data
#Sample the moderate severity control pixels
#Make sure the stratlayer bins match with the sampled control bins
#Make sure the stratlayer bins match with the sampled control bins
#Make sure the stratlayer disturb bins match with the sampled control bins
rx.disturb <- pixel.data %>%
filter(treatment == 'Disturb' & fire.type.bin == 'Rxfire' & stratlayer %in% (rx.strat %>% pull(stratlayer))) %>% #Get just the unchanged control stratification layers
group_by(stratlayer) %>% #Group by Stratification layer
nest() %>% #Nest the data
ungroup() %>% #Un group the data
mutate(n = (rx.strat %>% pull(n))) %>% #Add the sample sizes for the stratlayers in the disturbed data
mutate(samp = map2(data, n, sample_n)) %>% #Do the random sample, sample_n is depricated for slice_sample, but slice sample doesn't work, .y = n
dplyr::select(-c(data, n)) %>% #Get rid of the data column
unnest(samp) #unnest the data
#Sample the Wildfire Disturb pixels
frap.disturb <- pixel.data %>%
filter(treatment == 'Disturb' & fire.type.bin == 'Wildfire' & stratlayer %in% (frap.strat %>% pull(stratlayer))) %>% #Get just the unchanged control stratification layers
group_by(stratlayer) %>% #Group by Stratification layer
nest() %>% #Nest the data
ungroup() %>% #Un group the data
mutate(n = (frap.strat %>% pull(n))) %>% #Add the sample sizes for the stratlayers in the disturbed data
mutate(samp = map2(data, n, sample_n)) %>% #Do the random sample, sample_n is depricated for slice_sample
dplyr::select(-c(data, n)) %>% #Get rid of the data column
unnest(samp) #unnest the data                                                                                                                 fire.type.bin == 'Wildfire' ~ stratlayer %in% (frap.strat %>% pull(stratlayer))))
#Combine the sampled data back together
pixel.sample <- rbind(frap.disturb, rx.disturb, rx.sample, frap.sample)
#Convert data to long format
#This should be moved later
pixel.sample <- pixel.sample %>%
pivot_longer(cols = X10_AET:X9_tpa_max, names_to = c('year', '.value'), names_pattern = "X(\\d{1}|\\d{2})_(.*)", names_repair = "unique")
#Convert the year outputs to actual years
pixel.sample$year <- as.numeric(pixel.sample$year) + 1984
#Convert missing TPA data to NAs
pixel.sample[pixel.sample$tpa_max < 0,]$tpa_max <- NA
#Convert to trees per hectare
pixel.sample$tpa_max <- pixel.sample$tpa_max * 2.47105
#Make the dates into date time format for R
pixel.sample$date <- as.Date(as.character(pixel.sample$year), format = '%Y')
pixel.sample$vi.year <- pixel.sample$year
pixel.sample$stand.age <- as.numeric(pixel.sample$year) - as.numeric(pixel.sample$fire.year)
#Update Cover data to 100% scale
pixel.sample$Tree_Cover.2 <- pixel.sample$Tree_Cover / 100
pixel.sample$Shrub_Cover.2 <- pixel.sample$Shrub_Cover / 100
pixel.sample$Herb_Cover.2 <- pixel.sample$Herb_Cover / 100
pixel.sample$Bare_Cover.2 <- pixel.sample$Bare_Cover / 100
# pixel.sample$Tree_Cover.2 <- pixel.sample$Tree_Cover
#Rename Montana Tree Cover
pixel.sample$Tree_Cover <- pixel.sample$TRE
pixel.sample$Shrub_Cover <- pixel.sample$SHR
pixel.sample$Herb_Cover <- pixel.sample$AFG + pixel.sample$PFG
pixel.sample$Bare_Cover <- pixel.sample$BGR
#Convert the SPI48 scale back to decimal
pixel.sample$SPI48 <- pixel.sample$SPI48 / 100
#Try to fix soil moisture by dividing by 10
pixel.sample$Soil_Moisture <- pixel.sample$Soil_Moisture / 10
#Calculate Pr-ET
pixel.sample$PrET <- pixel.sample$ppt - pixel.sample$AET
#Separate the data
pixel.sample <- pixel.sample %>% mutate(std.year.bin = case_when(
# fire.year < 1980 ~ '< 1980',
fire.year >= 1984 & fire.year <= 1990 ~ '1984-1990',
fire.year >= 1991 & fire.year <= 1995 ~ '1991-1995',
fire.year >= 1996 & fire.year <= 2000 ~ '1996-2000',
fire.year >= 2001 & fire.year <= 2005 ~ '2001-2005',
fire.year >= 2006 & fire.year <= 2010 ~ '2006-2010'))
pixel.sample$std.year.bin = with(pixel.sample, factor(std.year.bin, levels = c('2006-2010', '2001-2005','1996-2000', '1991-1995','1984-1990')))#
# summary(pixel.sample)
#Tree Cover versus Elevation versus Latitude
#Tree Cover versus Elevation versus Latitude
#Subtract the pre-fire values for AET, tree and shrub cover
pixel.sample <- pixel.sample %>%
group_by(system.index, fire.type.bin) %>%
mutate(dAET = AET - mean(AET[stand.age %in% c(-1, -2)]),
dTree_Cover = Tree_Cover - mean(Tree_Cover[stand.age %in% c(-1, -2)]),
dShrub_Cover = Shrub_Cover - mean(Shrub_Cover[stand.age %in% c(-1, -2)])) %>%
ungroup()
# group_by(stand.age, fire.type.bin) %>%
# summarize(Tree_Cover.mean = mean(Tree_Cover[treatment == 'Disturb']) - mean(Tree_Cover[treatment == 'Control']))
summary(pixel.sample)
#Do some calculations for the results section of the manuscript
pixel.summary <- pixel.sample %>%
filter(stand.age >= -2 & stand.age <= 20 & vi.year <= 2012 & fire.year > 1986 & fire.year <= 2010 & (fire_year_2019 <= 2010 | is.na(fire_year_2019))) %>%
group_by(stand.age, fire.type.bin) %>%
reframe(Tree_Cover.mean = mean(dTree_Cover[treatment == 'Disturb']) - mean(dTree_Cover[treatment == 'Control']),
Tree_Cover.sd = sd(dTree_Cover[treatment == 'Disturb'])^2 + sd(dTree_Cover[treatment == 'Control'])^2,
Tree_Cover.n = n(),
Shrub_Cover.mean = mean(dShrub_Cover[treatment == 'Disturb']) - mean(dShrub_Cover[treatment == 'Control']),
Shrub_Cover.sd = sd(dShrub_Cover[treatment == 'Disturb'])^2 + sd(dShrub_Cover[treatment == 'Control'])^2,
Shrub_Cover.n = n(),
AET.mean = mean(dAET[treatment == 'Disturb']) - mean(dAET[treatment == 'Control']),
AET.sd = sd(dAET[treatment == 'Disturb'])^2 + sd(dAET[treatment == 'Control'])^2,
AET.n = n()) %>%
#Add the upper and lower 95% confidence intervals
mutate(tree.ci.95.lower = Tree_Cover.mean - 1.96*(sqrt(Tree_Cover.sd / Tree_Cover.n)),
tree.ci.95.upper = Tree_Cover.mean + 1.96*(sqrt(Tree_Cover.sd / Tree_Cover.n)),
shrub.ci.95.lower = Shrub_Cover.mean - 1.96*(sqrt(Shrub_Cover.sd / Shrub_Cover.n)),
shrub.ci.95.upper = Shrub_Cover.mean + 1.96*(sqrt(Shrub_Cover.sd / Shrub_Cover.n)),
et.ci.95.lower = AET.mean - 1.96*(sqrt(AET.sd / AET.n)),
et.ci.95.upper = AET.mean + 1.96*(sqrt(AET.sd / AET.n)))
#Select the columns I want for the data
results.data <- pixel.summary %>% dplyr::select(fire.type.bin, stand.age, tree.ci.95.lower, tree.ci.95.upper, shrub.ci.95.lower, shrub.ci.95.upper, et.ci.95.lower, et.ci.95.upper)
pixel.filter <- pixel.sample %>% filter(fire.year <= 2010 & fire.year > 1986 & (fire_year_2019 <= 2010 | is.na(fire_year_2019))) %>%
#Group into grid cell bins for each treatment and fire type
dplyr::group_by(system.index, treatment, fire.type.bin) %>%
#Calculate summaries for each grid cell
reframe(dTree = mean(Tree_Cover[vi.year %in% c(2017, 2018)]) - mean(Tree_Cover[vi.year %in% c(2010, 2011)]),
RdTree = (mean(Tree_Cover[vi.year %in% c(2017, 2018)]) - mean(Tree_Cover[vi.year %in% c(2010, 2011)])) / mean(Tree_Cover[vi.year %in% c(2010, 2011)]),
Tree_Cover = mean(Tree_Cover[vi.year %in% c(2010, 2011)]),
ET = mean(AET[vi.year %in% c(2010, 2011)]),
PrET_4yr = sum(PrET[vi.year %in% c(2012,2013,2014,2015)]),
# Water_Stress = Water_Stress[vi.year == 2015],
ADS = sum(tpa_max[vi.year %in% c(2015, 2016, 2017, 2018)]),
dNDMI = mean(NDMI[vi.year %in% c(2016, 2017)]) - mean(NDMI[vi.year %in% c(2009, 2010, 2011)])
)
wild.control <- pixel.filter %>% filter(treatment == 'Control' & fire.type.bin == "Wildfire" & !is.na(ADS))
wild.disturb <- pixel.filter %>% filter(treatment == 'Disturb' & fire.type.bin == "Wildfire" & !is.na(ADS))
rx.control <- pixel.filter %>% filter(treatment == 'Control' & fire.type.bin == "Rxfire" & !is.na(ADS))
rx.disturb <- pixel.filter %>% filter(treatment == 'Disturb' & fire.type.bin == "Rxfire" & !is.na(ADS))
#Models for Wild Fire
wild.control.lm <- lm(data = wild.control, ADS ~ PrET_4yr)
wild.disturb.lm <- lm(data = wild.disturb, ADS ~ PrET_4yr)
#Models for Rx Fire
rx.control.lm <- lm(data = rx.control, ADS ~ PrET_4yr)
rx.disturb.lm <- lm(data = rx.disturb, ADS ~ PrET_4yr)
#Calculate the sgemented models
wild.control.seg <- segmented(wild.control.lm)
wild.disturb.seg <- segmented(wild.disturb.lm)
rx.control.seg <- segmented(rx.control.lm)
rx.disturb.seg <- segmented(rx.disturb.lm)
#Add predicted dNDMI values
wild.control$ADS.predict = predict(wild.control.seg)
wild.disturb$ADS.predict = predict(wild.disturb.seg)
rx.control$ADS.predict = predict(rx.control.seg)
rx.disturb$ADS.predict = predict(rx.disturb.seg)
#Add the segmented fits and Standard Errors
#Fits
wild.control$ADS.fit = broken.line(wild.control.seg)$fit
wild.disturb$ADS.fit = broken.line(wild.disturb.seg )$fit
rx.control$ADS.fit = broken.line(rx.control.seg)$fit
rx.disturb$ADS.fit = broken.line(rx.disturb.seg)$fit
#SE fit
wild.control$ADS.se.fit = broken.line(wild.control.seg)$se.fit
wild.disturb$ADS.se.fit = broken.line(wild.disturb.seg)$se.fit
rx.control$ADS.se.fit = broken.line(rx.control.seg)$se.fit
rx.disturb$ADS.se.fit = broken.line(rx.disturb.seg)$se.fit
#Recombine the data frames with the model fitted dNDMI as a column
all.models <- rbind(wild.control, wild.disturb, rx.control, rx.disturb)
#R-Squared values for the four models
r2.a  <- format(summary(wild.control.seg)$r.squared, digits = 2) #I could switch this back to segmented
r2.b <- format(summary(wild.disturb.seg)$r.squared, digits = 2)
r2.c <- format(summary(rx.control.seg)$r.squared, digits = 2)
r2.d <- format(summary(rx.disturb.seg)$r.squared, digits = 2) #I could switch this back to segmented
#Create a data.frame of R.squared values
r2.text <- data.frame(
label = c(as.character(as.expression(substitute(italic(R)^2~"="~r2, list(r2 =r2.a)))),
as.character(as.expression(substitute(italic(R)^2~"="~r2, list(r2 = r2.b)))),
as.character(as.expression(substitute(italic(R)^2~"="~r2, list(r2 = r2.c)))),
as.character(as.expression(substitute(italic(R)^2~"="~r2, list(r2 = r2.d))))
),
treatment = c('Control', 'Disturb', 'Control', 'Disturb'),
fire.type.bin = c('Wildfire', 'Wildfire', 'Rxfire', 'Rxfire'),
x = c(-2500, -2500, -2500, -2500),
y = c(140, 130, 140, 130)
)
# letter.text <- data.frame(label = c("a)", "b)", "c)", "d)"),
#                           sequence   = c('Both Droughts', 'Both Droughts', '2nd Drought Only', '2nd Drought Only'),
#                           drought = c('1999-2002', '2012-2015', '1999-2002',  '2012-2015'),
#                           y     = c(-0.3, -0.3, -0.3, -0.3),
#                           x     = c(-2400, -2400, -2400, -2400)
# )
#Create the figure
p1 <- ggplot(data = pixel.filter) +
geom_bin2d(binwidth = c(200, 2), mapping = aes(x = PrET_4yr, y = dTree, group = ..count.., alpha = ..count..)) +
scale_fill_gradient2(limits = c(0,800), breaks = c(5,200, 400, 600), midpoint = 400, low = "cornflowerblue", mid = "yellow", high = "red", na.value = 'transparent') +
scale_alpha(range = c(1, 1), limits = c(5, 800), na.value = 0.4) +labs(fill = "Grid Cells") +
#Create the density layer
new_scale_fill() +
#Piecewise linear regression fit line
stat_cor(mapping = aes(x = PrET_4yr, y = dTree, color = treatment, label = paste(..rr.label..)), show.legend = FALSE) +
geom_smooth(method = 'lm', mapping = aes(x = PrET_4yr, y = dTree, color = treatment, linetype = treatment, fill = treatment), se = TRUE, show.legend = FALSE, size = 2) +
# geom_line(mapping = aes(x=PrET_4yr, y=ADS.fit, color = treatment, linetype = treatment), size=2) +
# #Piecewise fit uncertainty
# geom_ribbon(mapping = aes(x = PrET_4yr, y = ADS.fit, ymax = ADS.fit + 1.96*ADS.se.fit, ymin = ADS.fit - 1.96*ADS.se.fit, fill = treatment), alpha = 0.4) +
#Do the Formating
scale_linetype(name = 'Treatment') +
scale_fill_brewer(type = 'div', palette = 'Set1', name = 'Treatment') +
scale_color_brewer(type = 'div', palette = 'Set1', name = 'Treatment') +
guides(color = guide_legend(), linetype = guide_legend(), fill = guide_legend(), alpha = 'none') +
facet_grid(fire.type.bin ~ .) +
scale_y_reverse() +
#Add the R^2 values
# geom_text(data = r2.text, mapping = aes(x = x, y = y, label = label, color = treatment), size = 3.5, parse = TRUE) +
#Add the R^2 text
# geom_text(data = letter.text, mapping = aes(x = x, y = y, label = label), size = 5, fontface = "bold") +
theme_bw() +
xlab(expression('Four-year Pr-ET (mm 4yr'^-1*')')) + ylab('Die-off (% Tree Cover)')
p1
p2 <- p1 + theme(
legend.background = element_rect(colour = NA, fill = NA), # This removes the white square behind the legend
legend.justification = c(1, 0),
legend.position = c(0.9, 0.7),
legend.text = element_text(size = 10),
legend.title = element_text(size = 10),
legend.direction = "vertical") +
guides(fill = guide_colorbar(barwidth = 1, barheight = 3,
title.position = "top",
title.hjust = 0.5,
ticks.colour = "black"))
p2
# ggsave(filename = 'Fig4_frap_rx_water_stress_dTree_300m.png', height=16, width= 8, units = 'cm', dpi=900)
#Create the figure
p3 <- ggplot(data = pixel.filter) +
geom_bin2d(binwidth = c(2, 3), mapping = aes(x = Tree_Cover, y = dTree, group = ..count.., alpha = ..count..)) +
scale_fill_gradient2(limits = c(0,800), breaks = c(5,200, 400, 600), midpoint = 400, low = "cornflowerblue", mid = "yellow", high = "red", na.value = 'transparent', guide = 'none') +
scale_alpha(range = c(1, 1), limits = c(5, 800), na.value = 0.4) +labs(fill = "Grid Cells") +
labs(fill = "Grid Cells") +
#Create the density layer
new_scale_fill() +
#Piecewise linear regression fit line
# geom_line(mapping = aes(x=Water_Stress, y=dTree, color = treatment, linetype = treatment), size=2) +
#Piecewise fit uncertainty
# geom_ribbon(mapping = aes(x = Water_Stress, y = dTree.fit, ymax = dTree.fit + 1.96*dTree.se.fit, ymin = dTree.fit - 1.96*dTree.se.fit, fill = treatment), alpha = 0.4) +
stat_cor(mapping = aes(x = Tree_Cover, y = dTree, color = treatment, label = paste(..rr.label..)), show.legend = FALSE) +
geom_smooth(method = 'lm', mapping = aes(x = Tree_Cover, y = dTree, color = treatment, linetype = treatment, fill = treatment),show.legend = TRUE, size = 2) +
#Do the Formating
scale_linetype(name = 'Treatment') +
scale_fill_brewer(type = 'div', palette = 'Set1', name = 'Treatment') +
scale_color_brewer(type = 'div', palette = 'Set1', name = 'Treatment') +
guides(color = guide_legend(), linetype = guide_legend(), fill = guide_legend(), alpha = 'none') +
facet_grid(fire.type.bin ~ .) +
#Add the R^2 values
# geom_text(data = r2.text, mapping = aes(x = x, y = y, label = label, color = treatment), size = 3.5, parse = TRUE) +
#Add the R^2 text
# geom_text(data = letter.text, mapping = aes(x = x, y = y, label = label), size = 5, fontface = "bold") +
theme_bw() +
theme(axis.title.y = element_blank(), axis.text.y = element_blank()) +
scale_y_reverse() +
xlab(expression('Tree Cover (%)')) + ylab(expression('Die-off (trees ha'^-1*')'))
p3
p4 <- p3 + theme(
legend.background = element_rect(colour = NA, fill = NA), # This removes the white square behind the legend
legend.justification = c(1, 0),
legend.position = c(0.95, 0.8),
legend.text = element_text(size = 10),
legend.title = element_text(size = 10),
legend.direction = "vertical")
p4
f1 <- ggarrange(p2, p4, ncol = 2, nrow = 1, common.legend = FALSE, widths = c(1, 0.9), align = "h")
f1
ggsave(filename = 'FigS8_frap_rx_dieoff_predictors.png', height=16, width= 16, units = 'cm', dpi=900)
