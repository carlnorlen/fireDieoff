q()
remove.packages('terra')
.libPaths
.libPaths()
remove.packages('terra', "C:/Users/can02/AppData/Local/Programs/R-4.0.2/library")
#Set up a python environment
# ee_install(py_env = "rgee")
library('rgee')
#Initialize Google Earth Engine
ee_Initialize(user = 'cnorlen@uci.edu', drive = TRUE)
p <- c('rgee', 'terra', 'sf')
# install.packages(p,repo='https://cran.r-project.org/')
# install.packages(c('ggmap'),repo='https://cran.r-project.org/')
lapply(p,require,character.only=TRUE)
#Intialize RGEE
ee_Initialize(user = 'cnorlen@uci.edu', drive = 'TRUE')
srtm <- ee$Image("USGS/SRTMGL1_003")
#Intialize RGEE
ee_Initialize(user = 'cnorlen@uci.edu')
srtm <- ee$Image("USGS/SRTMGL1_003")
viz <- list(
max = 4000,
min = 0,
palette = c("#000000","#5AAD5A","#A9AD84","#FFFFFF")
)
Map$addLayer(
eeObject = srtm,
visParams =  viz,
name = 'SRTM',
legend = TRUE
)
Map$addLayer(
eeObject = srtm,
visParams =  viz,
name = 'SRTM'
)
ee_check()
ee_check_python()
ee_check_credentials()
ee_Initialize(user='cnorlen@uci.edu', drive = TRUE)
email <- "cnorlen@uci.edu"
oauth_func_path <- system.file("python/ee_utils.py", package = "rgee")
utils_py <- rgee:::ee_source_python(oauth_func_path)
ee_path <- ee_utils_py_to_r(utils_py$ee_path())
email_clean <- gsub("@gmail.com", "", email)
ee_path_user <- sprintf("%s/%s", ee_path, email_clean)
print(ee_path_user)
# Is there some Google Drive Token in this Folder?
full_credentials <- list.files(path = ee_path_user, full.names = TRUE)
drive_condition <- grepl(".*_.*@.*", basename(full_credentials))
googledrive::drive_auth(
email = NULL,
cache = ee_path_user
)
full_credentials
drive_condition
email <- "cnorlen@uci.edu"
oauth_func_path <- system.file("python/ee_utils.py", package = "rgee")
utils_py <- rgee:::ee_source_python(oauth_func_path)
ee_path <- ee_utils_py_to_r(utils_py$ee_path())
email_clean <- gsub("@gmail.com", "", email)
ee_path_user <- sprintf("%s/%s", ee_path, email_clean)
# Is there some Google Drive Token in this Folder?
full_credentials <- list.files(path = ee_path_user, full.names = TRUE)
drive_condition <- grepl(".*_.*@.*", basename(full_credentials))
drive_credentials <- full_credentials[drive_condition]
email <- sub("^[^_]*_", "", basename(drive_credentials))
print(ee_path_user)
print(email)
ee_clean_credentials("cnorlen@uci.edu")
ee_Initialize("cnorlen")
ee_Initialize("cnorlen", drive = TRUE)
googledrive::drive_auth(email="cnorlen@uci.edu")
gargle_oauth_email = "cnorlen@uci.edu"
googledrive::drive_auth(email= gargle::gargle_oath_email(),
path = NULL,
scopes = "https://www.googleapis.com/auth/drive",
cache = gargle::gargle_oauth_cache(),
use_oob = gargle::gargle_oob_default(),
token = NULL)
library(googledrive)
googledrive::drive_auth(email= gargle::gargle_oath_email(),
path = NULL,
scopes = "https://www.googleapis.com/auth/drive",
cache = gargle::gargle_oauth_cache(),
use_oob = gargle::gargle_oob_default(),
token = NULL)
googledrive::drive_auth(email= "cnorlen@uci.edu")
ee_check_credentials()
ee_Initialize(drive = TRUE)
library(Rcpp)
install.packages('Rcpp',repo='https://cran.r-project.org/')
install.packages("Rcpp", repo = "https://cran.r-project.org/")
library(Rcpp)
install.packages('httpuv',repo='https://cran.r-project.org/')
library(httpuv)
ee_Initialize(drive = TRUE)
library(rgee)
ee_Initialize(drive = TRUE)
p <- c('ggpubr', 'viridis', 'tidyr', 'dplyr', 'ggmap', 'ggplot2', 'magrittr', 'raster',
'rgdal', 'sp', 'sf', 'RStoolbox', 'ncdf4', 'gtools', 'tigris', 'patchwork',
'rlist', 'ggspatial', 'svglite', 'mgcv')
# install.packages(p,repo='https://cran.r-project.org/')
# install.packages(c('ggmap'),repo='https://cran.r-project.org/')
lapply(p,require,character.only=TRUE)
#Set the working directory
setwd('C:/Users/can02/mystuff/fireDieoff/pixel_sample')
#The data directory
dir_in <- "D:\\Fire_Dieoff"
fire_in <- "D:\\Large_Files\\Fire_Dieoff"
#Add the data
# pixel.data <- read.csv(file.path(dir_in, "Stratified_sample_stand_age_2012_no_fire_history_mask_20210629_30m_v2.csv"), header = TRUE, na.strings = "NaN") #v2 is for all of Sierra and Socal
# pixel.data <- read.csv(file.path(fire_in, "Stratified_sample_stand_age_no_fire_history_mask_01242022_30m.csv"), header = TRUE, na.strings = "NaN")
# pixel.data <- read.csv(file.path(dir_in, "frapsev_ecoregion_stratified_sample_100pts_30m_ts8_20220713.csv"), header = TRUE, na.strings = "NaN")
sev.data <- read.csv(file.path(dir_in, "fire_south_sierra_USFS_sevfire_100pts_100elev_200precip_5temp_ts8_300m_20221027.csv"), header = TRUE, na.strings = "NaN")
# fire.data$fire.year <- fire.data$perimeter_year
sev.data$treatment <- 'Disturb'
summary(sev.data)
# list.files(fire_in)
# list.files(fire_in)
control.data <- read.csv(file.path(dir_in, "control_south_sierra_no_FRAP_undist_100pts_100elev_200precip_5temp_ts8_300m_20221025.csv"), header = TRUE, na.strings = "NaN")
#Add Fire Columns
control.data$fire_type_2010 <- -9999
control.data$fire_year_2010 <- -9999
control.data$fire_ID_2010 <- -9999
control.data$fire_count_2010 <- -9999
control.data$fire_type_2019 <- -9999
control.data$fire_year_2019 <- -9999
control.data$fire_ID_2019 <- -9999
control.data$fire_count_2019 <- -9999
control.data$fire_type_2020 <- -9999
control.data$fire_year_2020 <- -9999
control.data$fire_ID_2020 <- -9999
control.data$fire_count_2020 <- -9999
# summary(control.data)
#Get a  of the data
# summary(pixel.data)
# pixel.data <- pixel.data %>% filter(fire.year >= 1919 & !is.na(stand.age) & !is.na(NDMI))
# control.data$fire.year <- control.data$perimeter_year
control.data$treatment <- 'Control' #Try making this 1-km versus, 2-km
# control.data
# fire.data
#Data on 2-km buffers
# control.data.2km <- read.csv(file.path(dir_in, "frapsev_ecoregion_simple_sample_by_2km_wildfire_buffers_10pt_300m_ts8_20220926.csv"), header = TRUE, na.strings = "NaN")
# summary(control.data)
#Get a  of the data
# summary(pixel.data)
# pixel.data <- pixel.data %>% filter(fire.year >= 1919 & !is.na(stand.age) & !is.na(NDMI))
# control.data.2km$fire.year <- control.data.2km$perimeter_year
# control.data.2km$treatment <- '2-km Buffer' #Try making this 1-km versus, 2-km
# summary(fire.data)
# summary(control.data)
#Combine the data together
sev.pixel.data <- rbind(sev.data, control.data)
# pixel.data <- rbind(combine.data, control.data.2km)
summary(sev.pixel.data)
`%notin%` <- Negate(`%in%`)
#Convert data to long format
sev.pixel.data <- sev.pixel.data %>% #dplyr::select(-c('latitude', 'longitude')) %>%
pivot_longer(cols = X10_AET:X9_tpa_max, names_to = c('year', '.value'), names_pattern = "X(\\d{1}|\\d{2})_(.*)", names_repair = "unique")
sev.pixel.data$year <- as.numeric(sev.pixel.data$year) + 1984
#Convert missing TPA data to NAs
sev.pixel.data[sev.pixel.data$tpa_max < 0,]$tpa_max <- NA
#Convert fire data -9999 to NAs
sev.pixel.data[sev.pixel.data$fire_type_2010 == -9999,]$fire_type_2010 <- NA
sev.pixel.data[sev.pixel.data$fire_year_2010 == -9999,]$fire_year_2010 <- NA
sev.pixel.data[sev.pixel.data$fire_ID_2010 == -9999,]$fire_ID_2010 <- NA
sev.pixel.data[sev.pixel.data$fire_count_2010 == -9999,]$fire_count_2010 <- NA
sev.pixel.data[sev.pixel.data$fire_type_2019 == -9999,]$fire_type_2019 <- NA
sev.pixel.data[sev.pixel.data$fire_year_2019 == -9999,]$fire_year_2019 <- NA
sev.pixel.data[sev.pixel.data$fire_ID_2019 == -9999,]$fire_ID_2019 <- NA
sev.pixel.data[sev.pixel.data$fire_count_2019 == -9999,]$fire_count_2019 <- NA
sev.pixel.data[sev.pixel.data$fire_type_2020 == -9999,]$fire_type_2020 <- NA
sev.pixel.data[sev.pixel.data$fire_year_2020 == -9999,]$fire_year_2020 <- NA
sev.pixel.data[sev.pixel.data$fire_ID_2020 == -9999,]$fire_ID_2020 <- NA
sev.pixel.data[sev.pixel.data$fire_count_2020 == -9999,]$fire_count_2020 <- NA
#Convert to trees per hectare
sev.pixel.data$tpa_max <- sev.pixel.data$tpa_max * 2.47105
#Make the dates into date time format for R
sev.pixel.data$date <- as.Date(as.character(sev.pixel.data$year), format = '%Y')
# sev.pixel.data$vi.year <- format(sev.pixel.data$date , '%Y')
sev.pixel.data$vi.year <- sev.pixel.data$year
#Use the FRAP fire perimeter year
sev.pixel.data$fire.year <- sev.pixel.data$fire_year_2019
sev.pixel.data$stand.age <- as.numeric(sev.pixel.data$year) - as.numeric(sev.pixel.data$fire.year)
#Update Cover data to 100% scale
sev.pixel.data$Tree_Cover <- sev.pixel.data$Tree_Cover / 100
sev.pixel.data$Shrub_Cover <- sev.pixel.data$Shrub_Cover / 100
sev.pixel.data$Herb_Cover <- sev.pixel.data$Herb_Cover / 100
sev.pixel.data$Bare_Cover <- sev.pixel.data$Bare_Cover / 100
#Convert the SPI48 scale back to decimal
sev.pixel.data$SPI48 <- sev.pixel.data$SPI48 / 100
#Try to fix soil moisture by dividing by 10
sev.pixel.data$Soil_Moisture <- sev.pixel.data$Soil_Moisture / 10
#Rename ppt and Water Stress
sev.pixel.data$Water_Stress <- sev.pixel.data$Water_Stress
sev.pixel.data$ppt <- sev.pixel.data$ppt
sev.pixel.data$AET <- sev.pixel.data$AET
sev.pixel.data$GPP <- sev.pixel.data$GPP
sev.pixel.data$elevation <- sev.pixel.data$elevation
sev.pixel.data$PrET <- sev.pixel.data$ppt - sev.pixel.data$AET
#
sev.pixel.data <- sev.pixel.data %>% mutate(fire.year.bin = case_when(
# bin >= 1 ~ '1900',
# bin == 2 ~ '1909-1910',
# bin >= 1911 & bin <= 1920 ~ '95-104', #Calculated relative to 2015
is.na(fire.year) ~ 'No Fire',
# fire.year >= 1910 & fire.year <=  1970 ~ '1910-1970',#'81-95',
# fire.year >= 1936 & fire.year <= 1950 ~ '65-79',
# fire.year >= 1951 & fire.year <= 1965 ~ '50-64',
# fire.year >= 1951 & fire.year <= 1960 ~ '55-64',
# fire.year >= 1971 & fire.year <= 1980 ~ '1971-1980',#'56-80',
# fire.year >= 1985 & fire.year <= 1990 ~ '1985-1990',
# fire.year >= 1991 & fire.year <= 2000 ~ '1991-2000',#'31-55',
# fire.year >= 1991 & fire.year <= 2000 ~ '15-24',
fire.year >= 1985 & fire.year <= 2010 ~ '1985-2010',
# fire.year >= 2001 & fire.year <= 2010 ~ '2001-2010',
fire.year >= 2011 & fire.year <= 2018 ~ '2011-2017')) #,
# fire.year >= 2019 ~ '2019-2020'))#'0-4'))
#Fire Severity Bins
#With re-export type needs to be converted to sev
sev.pixel.data <- sev.pixel.data %>% mutate(sev.bin = case_when(
fire_type_2019 == '0' | is.na(fire_type_2019) ~ 'No Fire',
fire_type_2019 == '1' | fire_type_2019 == '2' ~ 'Unchanged or Low',
fire_type_2019 == '3' | fire_type_2019 == '4' ~ 'Mid or High',
fire_type_2019 == '255' ~ 'Masked')) # end function
#Fire year bins for Fire Severity Data
sev.pixel.data$fire.year.bin = with(sev.pixel.data, factor(fire.year.bin, levels = c('2011-2017', '1985-2010', 'No Fire')))#c('0-4','5-30','31-55','56-80',
#Make the years bin lables in the correct order
sev.pixel.data$sev.bin = with(sev.pixel.data, factor(sev.bin, levels = c('No Fire','Masked', 'Unchanged or Low','Mid or High')))
#Recode the veg type data
sev.pixel.data$veg_name <- recode(.x=sev.pixel.data$lf_evt_2001, .default = NA_character_, '2015' = 'Redwood', '2019' = 'Pinyon Juniper', '2020' = 'Bristlecone Pine', '2027' = 'Mixed Conifer', '2028' = 'White Fir', '2031' = 'Jeffrey Pine',
'2032' = 'Red Fir', '2033' = 'Subalpine', '2034' = 'Knobcone Pine', '2043' = 'Mixed Conifer', '2044' = 'Subalpine', '2045' = 'Mixed Conifer',
'2053' = 'Ponderosa Pine', '2058' = 'Lodgepole Pine', '2061' = 'Mixed Conifer', '2112' = 'Blue Oak Woodland', '2172' = 'White Fir', '2173' = 'Lodgepole Pine', '2201' = 'Oregon White Oak', '2230' = 'Blue Oak - Digger Pine')
#Set the working directory
setwd('C:/Users/can02/mystuff/fireDieoff/final_figures')
p1 <- ggplot() +
#Data Summary
geom_bin2d(data = sev.pixel.data %>%
filter((Tree_Cover >= 0 & treatment == 'Disturb' & fire.year <= 2010 & !is.na(sev.bin)) | (Tree_Cover >= 0 & is.na(fire.year) & !is.na(sev.bin))) %>% # &
filter(lf_evt_2001 %in% c(2031, 2173, 2027, 2019, 2032, 2033, 2172, 2053)) %>% #Filter by the tree types
# elevation <= elev.upper & clm_precip_sum_mean >= ppt.lower & #elevation >= elev.lower &
# if_else(treatment == 'Wildfire', fire.year == fire_year_2019_mode, is.na(fire_year_2019_mode))) %>%
dplyr::group_by(system.index, sev.bin) %>%
summarize(dTree = (mean(Tree_Cover[vi.year %in% c(2018, 2019)]) - mean(Tree_Cover[vi.year %in% c(2014,2015)])), RdTree = (mean(Tree_Cover[vi.year %in% c(2018, 2019)]) - mean(Tree_Cover[vi.year %in% c(2014,2015)])) / mean(Tree_Cover[vi.year %in% c(2014, 2015)]),
Water_Stress = Water_Stress[vi.year == 2015], Tree_Cover = (mean(Tree_Cover[vi.year %in% c(2013, 2014)])), elevation = elevation[vi.year == 2015], clm_precip_sum = clm_precip_sum[vi.year == 2015],
latitude = latitude[vi.year == 2015], SPI48 = SPI48[vi.year == 2015]), # filter for drought areas
mapping = aes(y = latitude, x = elevation, fill = Tree_Cover, group = Tree_Cover), binwidth = c(250, 0.1)) +
# geom_errorbar(data = pixel.data %>%
#                 filter((treatment == 'Disturb' & fire.year <= 2010 & fire.year >= 1921 & stand.age > 2 & stratlayer %in% strat.list) | (is.na(fire.year) & stratlayer %in% strat.list)) %>% # &
#                 # elevation <= elev.upper & clm_precip_sum_mean >= ppt.lower & #elevation >= elev.lower &
#                 # if_else(treatment == 'Wildfire', fire.year == fire_year_2019_mode, is.na(fire_year_2019_mode))) %>%
#                 dplyr::group_by(system.index, fire.year.bin) %>%
#                 summarize(dTree = (mean(Tree_Cover[vi.year %in% c(2018, 2019)]) - mean(Tree_Cover[vi.year %in% c(2014,2015)])), RdTree = (mean(Tree_Cover[vi.year %in% c(2018, 2019)]) - mean(Tree_Cover[vi.year %in% c(2014,2015)])) / mean(Tree_Cover[vi.year %in% c(2014, 2015)]),
#                           Water_Stress = Water_Stress[vi.year == 2015]),
#               mapping = aes(x = fire.year.bin, y = dTree), stat = 'summary', position = position_dodge(width = 1)) +
theme_bw() +
scale_fill_gradient(name = "Tree Cover (%)", limits = c(0, 100), low = "brown", high = "forest green", na.value = 'transparent') +
# scale_color_brewer(type = 'div', palette = 'Set1', name = 'Treatment') +
theme(axis.text.y = element_text(size = 8), legend.position = "right", axis.title.y = element_text(size = 10),
axis.title.x = element_blank(), legend.background = element_rect(colour = NA, fill = NA),
legend.key = element_rect(fill = NA), axis.text.x = element_blank(),
legend.title = element_text(size = 8), legend.text = element_text(size = 6)) + facet_grid(.~ sev.bin) +
ylab('Latitude')
p1
# pixel.data %>% summary()
p2<- ggplot() +
#Data Summary
geom_bin2d(data = sev.pixel.data %>%
filter((!is.na(Tree_Cover) & treatment == 'Disturb' & fire.year <= 2010 & fire.year >= 1971 & !is.na(sev.bin)) | (!is.na(Tree_Cover) & is.na(fire.year) & !is.na(sev.bin))) %>% # &
filter(lf_evt_2001 %in% c(2031, 2173, 2027, 2019, 2032, 2033, 2172, 2053)) %>% #Filter by the tree types
# elevation <= elev.upper & clm_precip_sum_mean >= ppt.lower & #elevation >= elev.lower &
# if_else(treatment == 'Wildfire', fire.year == fire_year_2019_mode, is.na(fire_year_2019_mode))) %>%
dplyr::group_by(system.index, sev.bin) %>%
summarize(dTree = (mean(Tree_Cover[vi.year %in% c(2017, 2018)]) - mean(Tree_Cover[vi.year %in% c(2013,2014)])), RdTree = (mean(Tree_Cover[vi.year %in% c(2017, 2018)]) - mean(Tree_Cover[vi.year %in% c(2013,2014)])) / mean(Tree_Cover[vi.year %in% c(2013, 2014)]),
Water_Stress = Water_Stress[vi.year == 2015], Tree_Cover = (mean(Tree_Cover[vi.year %in% c(2017, 2018)])), elevation = elevation[vi.year == 2015], clm_precip_sum = clm_precip_sum[vi.year == 2015],
latitude = latitude[vi.year == 2015], SPI48 = SPI48[vi.year == 2015]), # filter for drought areas
mapping = aes(y = latitude, x = elevation, fill = dTree, group = dTree), binwidth = c(250, 0.1)) +
# geom_errorbar(data = pixel.data %>%
#                 filter((treatment == 'Disturb' & fire.year <= 2010 & fire.year >= 1921 & stand.age > 2 & stratlayer %in% strat.list) | (is.na(fire.year) & stratlayer %in% strat.list)) %>% # &
#                 # elevation <= elev.upper & clm_precip_sum_mean >= ppt.lower & #elevation >= elev.lower &
#                 # if_else(treatment == 'Wildfire', fire.year == fire_year_2019_mode, is.na(fire_year_2019_mode))) %>%
#                 dplyr::group_by(system.index, fire.year.bin) %>%
#                 summarize(dTree = (mean(Tree_Cover[vi.year %in% c(2018, 2019)]) - mean(Tree_Cover[vi.year %in% c(2014,2015)])), RdTree = (mean(Tree_Cover[vi.year %in% c(2018, 2019)]) - mean(Tree_Cover[vi.year %in% c(2014,2015)])) / mean(Tree_Cover[vi.year %in% c(2014, 2015)]),
#                           Water_Stress = Water_Stress[vi.year == 2015]),
#               mapping = aes(x = fire.year.bin, y = dTree), stat = 'summary', position = position_dodge(width = 1)) +
theme_bw() +
# scale_color_brewer(type = 'div', palette = 'Set1', name = 'Treatment') +
scale_fill_gradient2(name = "Die-off \n(% Tree Cover)", low = "firebrick1", mid = "lightgoldenrodyellow", high = "dodgerblue", limits = c(-10, 5), midpoint = 0, na.value = 'transparent') +  #
theme(axis.text.y = element_text(size = 8), legend.position = "right", axis.title.y = element_text(size = 10),
axis.title.x = element_blank(), legend.background = element_rect(colour = NA, fill = NA),
legend.key = element_rect(fill = NA), axis.text.x = element_blank(),
legend.title = element_text(size = 8), legend.text = element_text(size = 6)) + facet_grid(.~ sev.bin) +
ylab('Latitude')
p2
#ADS die-off
p3 <- ggplot() +
geom_bin2d(data = sev.pixel.data %>%
filter((treatment == 'Disturb' & fire.year <= 2010 & fire.year >= 1971 & !is.na(tpa_max) & !is.na(sev.bin)) | (is.na(fire.year) & !is.na(tpa_max) & !is.na(sev.bin))) %>% # &
filter(lf_evt_2001 %in% c(2031, 2173, 2027, 2019, 2032, 2033, 2172, 2053)) %>% #Filter by the tree types
# elevation <= elev.upper & clm_precip_sum_mean >= ppt.lower & #elevation >= elev.lower &
# if_else(treatment == 'Wildfire', fire.year == fire_year_2019_mode, is.na(fire_year_2019_mode))) %>%
dplyr::group_by(system.index, sev.bin) %>%
summarize(tpa_max = max(tpa_max[vi.year %in% c(2012, 2013, 2014, 2015, 2016, 2017, 2017, 2018, 2019)], na.rm = TRUE), SPI48 = SPI48[vi.year == 2015], elevation = elevation[vi.year == 2015],
latitude = latitude[vi.year == 2015], clm_precip_sum = clm_precip_sum[vi.year == 2015], SPI48 = SPI48[vi.year == 2015]), # filter for drought areas
mapping = aes(y = latitude, x = elevation, fill = tpa_max, group = tpa_max), binwidth = c(250, 0.1)) +
# geom_errorbar(data = pixel.data %>%
#                 filter((treatment == 'Disturb' & fire.year <= 2010 & fire.year >= 1921 & stand.age > 2 & !is.na(tpa_max)) | (is.na(fire.year) & !is.na(tpa_max))) %>% # &
#                 # elevation <= elev.upper & clm_precip_sum_mean >= ppt.lower & #elevation >= elev.lower &
#                 # if_else(treatment == 'Wildfire', fire.year == fire_year_2019_mode, is.na(fire_year_2019_mode))) %>%
#                 dplyr::group_by(system.index, fire.year.bin) %>%
#                 summarize(tpa_max = max(tpa_max[vi.year %in% c(2012, 2013, 2014, 2015, 2016, 2017, 2017, 2018, 2019)], na.rm = TRUE), SPI48 = SPI48[vi.year == 2015]),
#               mapping = aes(x = fire.year.bin, y = tpa_max), stat = 'summary', position = position_dodge(width = 1)) + theme_bw() +
# scale_color_brewer(type = 'div', palette = 'Set1', name = 'Treatment') +
scale_fill_gradient(name = "Die-off \n(trees per hectare)", low = "white", high = "red", na.value = 'transparent') +
theme_bw() +
theme(axis.text.y = element_text(size = 8), axis.title.y = element_text(size = 10), legend.position = "right",
axis.title.x = element_blank(), legend.background = element_rect(colour = NA, fill = NA),
legend.key = element_rect(fill = NA), axis.text.x = element_blank(),
legend.title = element_text(size = 8), legend.text = element_text(size = 6)) + facet_grid(. ~ sev.bin) +
ylab('Latitude')
p3
p4<- ggplot() +
#Data Summary
geom_bin2d(data = sev.pixel.data %>%
filter((Tree_Cover >= 0 & treatment == 'Disturb' & fire.year <= 2010 & fire.year >= 1971 & !is.na(sev.bin)) | (Tree_Cover >= 0 & is.na(fire.year) & !is.na(sev.bin))) %>% # &
filter(lf_evt_2001 %in% c(2031, 2173, 2027, 2019, 2032, 2033, 2172, 2053)) %>% #Filter by the tree types
# elevation <= elev.upper & clm_precip_sum_mean >= ppt.lower & #elevation >= elev.lower &
# if_else(treatment == 'Wildfire', fire.year == fire_year_2019_mode, is.na(fire_year_2019_mode))) %>%
dplyr::group_by(system.index, sev.bin) %>%
summarize(dTree = (mean(Tree_Cover[vi.year %in% c(2018, 2019)]) - mean(Tree_Cover[vi.year %in% c(2014,2015)])), RdTree = (mean(Tree_Cover[vi.year %in% c(2018, 2019)]) - mean(Tree_Cover[vi.year %in% c(2014,2015)])) / mean(Tree_Cover[vi.year %in% c(2014, 2015)]),
Water_Stress = Water_Stress[vi.year == 2015], Tree_Cover = (mean(Tree_Cover[vi.year %in% c(2018, 2019)])), elevation = elevation[vi.year == 2015], clm_precip_sum = clm_precip_sum[vi.year == 2015],
latitude = latitude[vi.year == 2015], count = sum(elevation[vi.year == 2015]), n = n(), SPI48 = SPI48[vi.year == 2015]), # filter for drought areas
mapping = aes(y = latitude, x = elevation), binwidth = c(250, 0.1)) +
# geom_errorbar(data = pixel.data %>%
#                 filter((treatment == 'Disturb' & fire.year <= 2010 & fire.year >= 1921 & stand.age > 2 & stratlayer %in% strat.list) | (is.na(fire.year) & stratlayer %in% strat.list)) %>% # &
#                 # elevation <= elev.upper & clm_precip_sum_mean >= ppt.lower & #elevation >= elev.lower &
#                 # if_else(treatment == 'Wildfire', fire.year == fire_year_2019_mode, is.na(fire_year_2019_mode))) %>%
#                 dplyr::group_by(system.index, fire.year.bin) %>%
#                 summarize(dTree = (mean(Tree_Cover[vi.year %in% c(2018, 2019)]) - mean(Tree_Cover[vi.year %in% c(2014,2015)])), RdTree = (mean(Tree_Cover[vi.year %in% c(2018, 2019)]) - mean(Tree_Cover[vi.year %in% c(2014,2015)])) / mean(Tree_Cover[vi.year %in% c(2014, 2015)]),
#                           Water_Stress = Water_Stress[vi.year == 2015]),
#               mapping = aes(x = fire.year.bin, y = dTree), stat = 'summary', position = position_dodge(width = 1)) +
theme_bw() +
# scale_color_brewer(type = 'div', palette = 'Set1', name = 'Treatment') +
# scale_fill_gradient2(name = "Die-off (% Tree Cover)", limits = c(-50, 20), midpoint = 0, low = "red", mid = "white", high = "blue", na.value = 'transparent') +
theme(axis.text.y = element_text(size = 8), legend.position = "right", axis.title.y = element_text(size = 10),
axis.title.x = element_text(size = 10), legend.background = element_rect(colour = NA, fill = NA),
legend.key = element_rect(fill = NA), axis.text.x = element_text(size = 8),
legend.title = element_text(size = 8), legend.text = element_text(size = 6)) + facet_grid(.~ sev.bin) +
ylab('Latitude') + xlab('Elevation (m)')
p4
f1 <- ggarrange(p1, p2, p4, ncol = 1, nrow = 3, common.legend = FALSE, heights = c(0.9, 0.9, 1), align = "v", labels = c('a)', 'b)', 'c)'))
f1
#Save the data
ggsave(filename = 'Fig2c_sev_fire_dieoff_tree_cover_fireyear_geographic_distribution.png', height=24, width= 18, units = 'cm', dpi=900)
