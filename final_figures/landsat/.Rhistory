fire.type.bin == 'Rxfire' ~ stratlayer %in% rx.strat)) %>%
group_by(date, fire.year.bin, fire.type.bin) %>%
summarize(tpa_max.mean = mean(tpa_max),
tpa_max.sd = sd(tpa_max), tpa_max.n = n()), #%>%
# filter(if_else(fire.year.bin == '1985-2010', tpa_max.n >= 6000, tpa_max.n >= 0)),
mapping = aes(ymin=tpa_max.mean - 1.96*(tpa_max.sd / sqrt(tpa_max.n)),
ymax=tpa_max.mean + 1.96*(tpa_max.sd / sqrt(tpa_max.n)),
x = date, fill = fire.year.bin), alpha = 0.3) +
#Do the Formating
scale_color_brewer(type = 'div', palette = 'Spectral', name = 'Treatment') +
scale_linetype(name = 'Treatment') +
scale_fill_brewer(type = 'div', palette = 'Spectral', name = 'Treatment') +
guides(color = guide_legend(), linetype = guide_legend(), fill = 'none') +
theme_dark() + facet_grid(. ~ fire.type.bin) +
theme(axis.text.y = element_text(size = 8), axis.title.y = element_text(size = 10),
axis.title.x = element_blank(), legend.position = c(0.1, 0.6), legend.background = element_rect(colour = NA, fill = NA),
legend.key = element_rect(fill = NA), axis.text.x = element_blank(),
legend.title = element_text(size = 8), legend.text = element_text(size = 6)) +
geom_rect(data = data.frame(xmin = as.Date('2011-10-01'), xmax = as.Date('2015-09-30'), ymin = -Inf, ymax = Inf),
fill = "red", alpha = 0.3, mapping = aes(xmin = xmin, xmax = xmax, ymin = ymin, ymax = ymax)) +
xlim(as.Date('2010-08-01'),as.Date('2020-01-01')) + #facet_grid(. ~ fire.year.bin) +
ylab(expression(atop('Die-off Severity', '(trees ha'^-1*')'))) + xlab('Year') #+ facet_wrap(. ~ fire_type_last, labeller = as_labeller(c('1' = 'Wild', '2' = 'Prescribed')))
p5
#Create the
p6 <- ggplot() +
# geom_line(mapping = aes(group = .geo), color = 'dark gray', size = 0.2, alpha = 0.2) +
geom_hline(yintercept = 0) + #geom_vline(xintercept = 0, linetype = 'dashed') +
geom_line(data = pixel.data %>%
filter(Tree_Cover > 0 & fire.year <= 2010 & fire.year >= 1921 & Tree_Cover > 0 & (fire_year_2019 <= 2010 | is.na(fire_year_2019))) %>% # & stratlayer %in% strat.list & stratlayer %in% strat.list
filter(case_when(fire.type.bin == 'Wildfire' ~ stratlayer %in% frap.strat,
fire.type.bin == 'Rxfire' ~ stratlayer %in% rx.strat)) %>%
group_by(date, fire.year.bin, fire.type.bin) %>%
summarize(Tree_Cover.mean = mean(Tree_Cover), Tree_Cover.n = n()),
# filter(if_else(fire.year.bin == '1980-2010', Tree_Cover.n >= 2500, Tree_Cover.n >= 0)),
mapping = aes(x = date, y = Tree_Cover.mean, color = fire.year.bin, linetype = fire.year.bin),
size = 1) +
#Tree Cover 95% CI
geom_ribbon(data = pixel.data %>%
filter(Tree_Cover > 0 & fire.year <= 2010 & fire.year >= 1921 & Tree_Cover > 0 & (fire_year_2019 <= 2010 | is.na(fire_year_2019))) %>%
filter(case_when(fire.type.bin == 'Wildfire' ~ stratlayer %in% frap.strat,
fire.type.bin == 'Rxfire' ~ stratlayer %in% rx.strat)) %>%
group_by(date, fire.year.bin, fire.type.bin) %>%
summarize(Tree_Cover.mean = mean(Tree_Cover),
Tree_Cover.sd = sd(Tree_Cover), Tree_Cover.n = n()),
# filter(if_else(fire.year.bin == '1980-2010', Tree_Cover.n >= 2500, Tree_Cover.n >= 0)),
mapping = aes(ymin=Tree_Cover.mean - 1.96*(Tree_Cover.sd / sqrt(Tree_Cover.n)),
ymax=Tree_Cover.mean + 1.96*(Tree_Cover.sd / sqrt(Tree_Cover.n)),
x = date, fill = fire.year.bin), alpha = 0.3) +
#Do the Formating
scale_color_brewer(type = 'div', palette = 'Spectral', name = 'Treatment') +
scale_linetype(name = 'Treatment') +
scale_fill_brewer(type = 'div', palette = 'Spectral', name = 'Treatment') +
guides(color = guide_legend(), linetype = guide_legend(), fill = 'none') +
theme_dark() + facet_grid(. ~ fire.type.bin) +
theme(axis.text.y = element_text(size = 8), axis.title.y = element_text(size = 10),
axis.title.x = element_text(size = 10), legend.position = "none", legend.background = element_rect(colour = NA, fill = NA),
legend.key = element_rect(fill = NA), axis.text.x = element_text(size = 8),
legend.title = element_text(size = 8), legend.text = element_text(size = 6)) +
geom_rect(data = data.frame(xmin = as.Date('2011-10-01'), xmax = as.Date('2015-09-30'), ymin = -Inf, ymax = Inf),
fill = "red", alpha = 0.3, mapping = aes(xmin = xmin, xmax = xmax, ymin = ymin, ymax = ymax)) +
xlim(as.Date('2010-08-01'),as.Date('2020-01-01')) + #facet_grid(. ~ fire.year.bin) +
ylim(30, 55) +
ylab(expression('Tree Cover (%)')) + xlab('Year') #+ facet_wrap(. ~ fire_type_last, labeller = as_labeller(c('1' = 'Wild', '2' = 'Prescribed')))
p6
f2 <- ggarrange(p5, p6, ncol = 1, nrow = 2, common.legend = FALSE, heights = c(0.9, 1), align = "v", labels = c('a)', 'b)'))
f2
p6 <- ggplot() +
# geom_line(mapping = aes(group = .geo), color = 'dark gray', size = 0.2, alpha = 0.2) +
geom_hline(yintercept = 0) + #geom_vline(xintercept = 0, linetype = 'dashed') +
geom_line(data = pixel.data %>%
filter(Tree_Cover > 0 & fire.year <= 2010 & fire.year >= 1921 & Tree_Cover > 0 & (fire_year_2019 <= 2010 | is.na(fire_year_2019))) %>% # & stratlayer %in% strat.list & stratlayer %in% strat.list
filter(case_when(fire.type.bin == 'Wildfire' ~ stratlayer %in% frap.strat,
fire.type.bin == 'Rxfire' ~ stratlayer %in% rx.strat)) %>%
group_by(date, fire.year.bin, fire.type.bin) %>%
summarize(Tree_Cover.mean = mean(Tree_Cover), Tree_Cover.n = n()),
# filter(if_else(fire.year.bin == '1980-2010', Tree_Cover.n >= 2500, Tree_Cover.n >= 0)),
mapping = aes(x = date, y = Tree_Cover.mean, color = fire.year.bin, linetype = fire.year.bin),
size = 1) +
#Tree Cover 95% CI
geom_ribbon(data = pixel.data %>%
filter(Tree_Cover > 0 & fire.year <= 2010 & fire.year >= 1921 & Tree_Cover > 0 & (fire_year_2019 <= 2010 | is.na(fire_year_2019))) %>%
filter(case_when(fire.type.bin == 'Wildfire' ~ stratlayer %in% frap.strat,
fire.type.bin == 'Rxfire' ~ stratlayer %in% rx.strat)) %>%
group_by(date, fire.year.bin, fire.type.bin) %>%
summarize(Tree_Cover.mean = mean(Tree_Cover),
Tree_Cover.sd = sd(Tree_Cover), Tree_Cover.n = n()),
# filter(if_else(fire.year.bin == '1980-2010', Tree_Cover.n >= 2500, Tree_Cover.n >= 0)),
mapping = aes(ymin=Tree_Cover.mean - 1.96*(Tree_Cover.sd / sqrt(Tree_Cover.n)),
ymax=Tree_Cover.mean + 1.96*(Tree_Cover.sd / sqrt(Tree_Cover.n)),
x = date, fill = fire.year.bin), alpha = 0.3) +
#Do the Formating
scale_color_brewer(type = 'div', palette = 'Spectral', name = 'Treatment') +
scale_linetype(name = 'Treatment') +
scale_fill_brewer(type = 'div', palette = 'Spectral', name = 'Treatment') +
guides(color = guide_legend(), linetype = guide_legend(), fill = 'none') +
theme_dark() + facet_grid(. ~ fire.type.bin) +
theme(axis.text.y = element_text(size = 8), axis.title.y = element_text(size = 10),
axis.title.x = element_text(size = 10), legend.position = "none", legend.background = element_rect(colour = NA, fill = NA),
legend.key = element_rect(fill = NA), axis.text.x = element_text(size = 8),
legend.title = element_text(size = 8), legend.text = element_text(size = 6)) +
geom_rect(data = data.frame(xmin = as.Date('2011-10-01'), xmax = as.Date('2015-09-30'), ymin = -Inf, ymax = Inf),
fill = "red", alpha = 0.3, mapping = aes(xmin = xmin, xmax = xmax, ymin = ymin, ymax = ymax)) +
xlim(as.Date('2010-08-01'),as.Date('2020-01-01')) + #facet_grid(. ~ fire.year.bin) +
#ylim(30, 55) +
ylab(expression('Tree Cover (%)')) + xlab('Year') #+ facet_wrap(. ~ fire_type_last, labeller = as_labeller(c('1' = 'Wild', '2' = 'Prescribed')))
p6
f2 <- ggarrange(p5, p6, ncol = 1, nrow = 2, common.legend = FALSE, heights = c(0.9, 1), align = "v", labels = c('a)', 'b)'))
f2
#Save the data
ggsave(filename = 'Fig3a_frap_rx_dieoff_tree_cover_stand_age_time_series.png', height=12, width= 18, units = 'cm', dpi=900)
p7 <- ggplot() +
geom_hline(yintercept = 0) +
geom_line(data = pixel.data %>%
filter(fire.year <= 2010 & fire.year >= 1921 & Tree_Cover > 0 & (fire_year_2019 <= 2010 | is.na(fire_year_2019))) %>% # &
filter(case_when(fire.type.bin == 'Wildfire' ~ stratlayer %in% frap.strat,
fire.type.bin == 'Rxfire' ~ stratlayer %in% rx.strat)) %>%
# filter(lf_evt_2001 %in% c(2031, 2173, 2027, 2019, 2032, 2033, 2172, 2053)) %>%
# elevation <= elev.upper & clm_precip_sum_mean >= ppt.lower &
# if_else(treatment == 'Wildfire', fire.year == fire_year_2019_mode, is.na(fire_year_2019_mode))) %>%
group_by(date, fire.year.bin, fire.type.bin) %>%
summarize(ppt.mean = mean(ppt), ppt.n = n(), count = n()),
mapping = aes(x = date, y = ppt.mean, color = fire.year.bin, linetype = fire.year.bin),
size = 1) +
#AET 95% CI
geom_ribbon(data = pixel.data %>%
filter(fire.year <= 2010 & fire.year >= 1921 & Tree_Cover > 0 & (fire_year_2019 <= 2010 | is.na(fire_year_2019))) %>% # &
filter(case_when(fire.type.bin == 'Wildfire' ~ stratlayer %in% frap.strat,
fire.type.bin == 'Rxfire' ~ stratlayer %in% rx.strat)) %>%
# filter(lf_evt_2001 %in% c(2031, 2173, 2027, 2019, 2032, 2033, 2172, 2053)) %>%
# elevation <= elev.upper & clm_precip_sum_mean >= ppt.lower &
# if_else(treatment == 'Wildfire', fire.year == fire_year_2019_mode, is.na(fire_year_2019_mode))) %>%
group_by(date, fire.year.bin, fire.type.bin) %>%
summarize(ppt.mean = mean(ppt),
ppt.sd = sd(ppt), ppt.n = n(), count = n()),
mapping = aes(ymin=ppt.mean - 1.96*(ppt.sd / sqrt(ppt.n)),
ymax=ppt.mean + 1.96*(ppt.sd / sqrt(ppt.n)),
x = date, fill = fire.year.bin), alpha = 0.3) +
#Do the Formatting
scale_color_brewer(type = 'div', palette = 'Spectral', name = 'Treatment') +
scale_linetype(name = 'Treatment') +
scale_fill_brewer(type = 'div', palette = 'Spectral', name = 'Treatment') +
guides(color = guide_legend(), linetype = guide_legend(), fill = 'none') +
theme_dark() + facet_grid(. ~ fire.type.bin) +
theme(axis.text.y = element_text(size = 8), axis.title.y = element_text(size = 10),
axis.title.x = element_blank(), legend.position = "none", legend.background = element_rect(colour = NA, fill = NA),
legend.key = element_rect(fill = NA), axis.text.x = element_blank(),
legend.title = element_text(size = 8), legend.text = element_text(size = 6)) +
geom_rect(data = data.frame(xmin = as.Date('2011-10-01'), xmax = as.Date('2015-09-30'), ymin = -Inf, ymax = Inf),
fill = "red", alpha = 0.3, mapping = aes(xmin = xmin, xmax = xmax, ymin = ymin, ymax = ymax)) +
xlim(as.Date('2010-08-01'),as.Date('2020-01-01')) + #facet_grid(. ~ fire.year.bin) +
ylab(expression('Precip (mm yr'^-1*')')) + xlab('Year')
p7
#Create an AET time series figure
p8 <- ggplot() +
geom_hline(yintercept = 0) +
geom_line(data = pixel.data %>%
filter(fire.year <= 2010 & fire.year >= 1921 & Tree_Cover > 0 & (fire_year_2019 <= 2010 | is.na(fire_year_2019))) %>% # &
filter(case_when(fire.type.bin == 'Wildfire' ~ stratlayer %in% frap.strat,
fire.type.bin == 'Rxfire' ~ stratlayer %in% rx.strat)) %>%
# filter(lf_evt_2001 %in% c(2031, 2173, 2027, 2019, 2032, 2033, 2172, 2053)) %>%
# elevation <= elev.upper & clm_precip_sum_mean >= ppt.lower &
# if_else(treatment == 'Wildfire', fire.year == fire_year_2019_mode, is.na(fire_year_2019_mode))) %>%
group_by(date, fire.year.bin, fire.type.bin) %>%
summarize(AET.mean = mean(AET), AET.n = n(), count = n()),
mapping = aes(x = date, y = AET.mean, color = fire.year.bin, linetype = fire.year.bin),
size = 1) +
#AET 95% CI
geom_ribbon(data = pixel.data %>%
filter(fire.year <= 2010 & fire.year >= 1921 & Tree_Cover > 0 & (fire_year_2019 <= 2010 | is.na(fire_year_2019))) %>% # &
filter(case_when(fire.type.bin == 'Wildfire' ~ stratlayer %in% frap.strat,
fire.type.bin == 'Rxfire' ~ stratlayer %in% rx.strat)) %>%
# filter(lf_evt_2001 %in% c(2031, 2173, 2027, 2019, 2032, 2033, 2172, 2053)) %>%
# elevation <= elev.upper & clm_precip_sum_mean >= ppt.lower &
# if_else(treatment == 'Wildfire', fire.year == fire_year_2019_mode, is.na(fire_year_2019_mode))) %>%
group_by(date, fire.year.bin, fire.type.bin) %>%
summarize(AET.mean = mean(AET),
AET.sd = sd(AET), AET.n = n(), count = n()),
mapping = aes(ymin=AET.mean - 1.96*(AET.sd / sqrt(AET.n)),
ymax=AET.mean + 1.96*(AET.sd / sqrt(AET.n)),
x = date, fill = fire.year.bin), alpha = 0.3) +
#Do the Formatting
scale_color_brewer(type = 'div', palette = 'Spectral', name = 'Treatment') +
scale_linetype(name = 'Treatment') +
scale_fill_brewer(type = 'div', palette = 'Spectral', name = 'Treatment') +
guides(color = guide_legend(), linetype = guide_legend(), fill = 'none') +
theme_dark() + facet_grid(. ~ fire.type.bin) +
theme(axis.text.y = element_text(size = 8), axis.title.y = element_text(size = 10),
axis.title.x = element_blank(), legend.position = "none", legend.background = element_rect(colour = NA, fill = NA),
legend.key = element_rect(fill = NA), axis.text.x = element_blank(),
legend.title = element_text(size = 8), legend.text = element_text(size = 6)) +
geom_rect(data = data.frame(xmin = as.Date('2011-10-01'), xmax = as.Date('2015-09-30'), ymin = -Inf, ymax = Inf),
fill = "red", alpha = 0.3, mapping = aes(xmin = xmin, xmax = xmax, ymin = ymin, ymax = ymax)) +
xlim(as.Date('2010-08-01'),as.Date('2020-01-01')) + ylim(300, 750) +
#facet_grid(. ~ fire.year.bin) +
ylab(expression('AET (mm yr'^-1*')')) + xlab('Year')
p8
#Create the Water Stress Panel
p10 <- ggplot() +
# geom_line(mapping = aes(group = .geo), color = 'dark gray', size = 0.2, alpha = 0.2) +
geom_hline(yintercept = 0) + #geom_vline(xintercept = 0, linetype = 'dashed') +
geom_line(data = pixel.data %>%
filter(fire.year <= 2010 & fire.year >= 1921 & Tree_Cover > 0 & (fire_year_2019 <= 2010 | is.na(fire_year_2019))) %>% # &
filter(case_when(fire.type.bin == 'Wildfire' ~ stratlayer %in% frap.strat,
fire.type.bin == 'Rxfire' ~ stratlayer %in% rx.strat)) %>%
# filter(lf_evt_2001 %in% c(2031, 2173, 2027, 2019, 2032, 2033, 2172, 2053)) %>%
# elevation <= elev.upper & clm_precip_sum_mean >= ppt.lower &
# if_else(treatment == 'Wildfire', fire.year == fire_year_2019_mode, is.na(fire_year_2019_mode))) %>%
group_by(date, fire.year.bin, fire.type.bin) %>%
summarize(PrET.mean = mean(PrET), PrET.n = n(), count = n()),
mapping = aes(x = date, y = PrET.mean, color = fire.year.bin, linetype = fire.year.bin),
size = 1) +
#Water Stress 95% CI
geom_ribbon(data = pixel.data %>%
filter(fire.year <= 2010 & fire.year >= 1921 & Tree_Cover > 0 & (fire_year_2019 <= 2010 | is.na(fire_year_2019))) %>% # &
filter(case_when(fire.type.bin == 'Wildfire' ~ stratlayer %in% frap.strat,
fire.type.bin == 'Rxfire' ~ stratlayer %in% rx.strat)) %>%
# filter(lf_evt_2001 %in% c(2031, 2173, 2027, 2019, 2032, 2033, 2172, 2053)) %>%
# elevation <= elev.upper & clm_precip_sum_mean >= ppt.lower &
# if_else(treatment == 'Wildfire', fire.year == fire_year_2019_mode, is.na(fire_year_2019_mode))) %>%
group_by(date, fire.year.bin, fire.type.bin) %>%
summarize(PrET.mean = mean(PrET),
PrET.sd = sd(PrET), PrET.n = n(), count = n()),
mapping = aes(ymin=PrET.mean - 1.96*(PrET.sd / sqrt(PrET.n)),
ymax=PrET.mean + 1.96*(PrET.sd / sqrt(PrET.n)),
x = date, fill = fire.year.bin), alpha = 0.3) +
#Do the Formatting
scale_color_brewer(type = 'div', palette = 'Spectral', name = 'Treatment') +
scale_linetype(name = 'Treatment') +
scale_fill_brewer(type = 'div', palette = 'Spectral', name = 'Treatment') +
guides(color = guide_legend(), linetype = guide_legend(), fill = 'none') +
theme_dark() + facet_grid(. ~ fire.type.bin) +
theme(axis.text.y = element_text(size = 8), axis.title.y = element_text(size = 10),
axis.title.x = element_text(size = 10), legend.position = c(0.15, 0.35), legend.background = element_rect(colour = NA, fill = NA),
legend.key = element_rect(fill = NA), axis.text.x = element_text(size = 8),
legend.title = element_text(size = 8), legend.text = element_text(size = 6)) +
geom_rect(data = data.frame(xmin = as.Date('2011-10-01'), xmax = as.Date('2015-09-30'), ymin = -Inf, ymax = Inf),
fill = "red", alpha = 0.3, mapping = aes(xmin = xmin, xmax = xmax, ymin = ymin, ymax = ymax)) +
xlim(as.Date('2010-08-01'),as.Date('2020-01-01')) + #facet_grid(. ~ fire.year.bin) +
ylab(expression('Pr-ET (mm yr'^-1*')')) + xlab('Year')
p10
f3 <- ggarrange(p7, p8, p10, ncol = 1, nrow = 3, common.legend = FALSE, heights = c(0.9, 0.9, 1), align = "v", labels = c('a)', 'b)', 'c)'))
f3
# #Save the data
ggsave(filename = 'Fig4a_frap_rx_water_fluxes_time_series.png', height=16, width= 18, units = 'cm', dpi=900)
pixel.filter <- pixel.data %>% filter(fire.year <= 2010 & fire.year >= 1921 & Tree_Cover > 0 & (fire_year_2019 <= 2010 | is.na(fire_year_2019))) %>%
filter(case_when(fire.type.bin == 'Wildfire' ~ stratlayer %in% frap.strat,
fire.type.bin == 'Rxfire' ~ stratlayer %in% rx.strat)) %>%
dplyr::group_by(system.index) %>%
summarize(dTree = mean(Tree_Cover[vi.year %in% c(2017, 2018)]) - mean(Tree_Cover[vi.year %in% c(2013, 2014)]),
RdTree = (mean(Tree_Cover[vi.year %in% c(2017, 2018)]) - mean(Tree_Cover[vi.year %in% c(2013,2014)])) / mean(Tree_Cover[vi.year %in% c(2013, 2014)]),
Water_Stress = sum(PrET[vi.year %in% c(2012,2013,2014,2015)]),
ADS = max(tpa_max[vi.year %in% c(2015, 2016, 2017)]),
dNDMI = mean(NDMI[vi.year %in% c(2016, 2017)]) - mean(NDMI[vi.year %in% c(2009, 2010, 2011)]),
fire.year.bin = fire.year.bin[vi.year == 2010],
treatment = treatment[vi.year == 2010],
fire.type.bin = fire.type.bin[vi.year == 2010])
# pixel.filter %>% summary()
wild.control <- pixel.filter %>% filter(fire.year.bin == 'Control' & fire.type.bin == "Wildfire")
wild.disturb <- pixel.filter %>% filter(fire.year.bin == 'Disturb' & fire.type.bin == "Wildfire")
rx.control <- pixel.filter %>% filter(fire.year.bin == 'Control' & fire.type.bin == "Rxfire")
rx.disturb <- pixel.filter %>% filter(fire.year.bin == 'Disturb' & fire.type.bin == "Rxfire")
#Models for Wild Fire
wild.control.lm <- lm(data = wild.control, dTree ~ Water_Stress)
wild.disturb.lm <- lm(data = wild.disturb, dTree ~ Water_Stress)
#Models for Rx Fire
rx.control.lm <- lm(data = rx.control, dTree~ Water_Stress)
rx.disturb.lm <- lm(data = rx.disturb, dTree ~ Water_Stress)
#Calculate the sgemented models
wild.control.seg <- segmented(wild.control.lm)
wild.disturb.seg <- segmented(wild.disturb.lm)
rx.control.seg <- segmented(rx.control.lm)
rx.disturb.seg <- segmented(rx.disturb.lm)
#Add predicted dNDMI values
wild.control$dTree.predict = predict(wild.control.seg)
wild.disturb$dTree.predict = predict(wild.disturb.seg)
rx.control$dTree.predict = predict(rx.control.seg)
rx.disturb$dTree.predict = predict(rx.disturb.seg)
#Add the segmented fits and Standard Errors
#Fits
wild.control$dTree.fit = broken.line(wild.control.seg)$fit
wild.disturb$dTree.fit = broken.line(wild.disturb.seg )$fit
rx.control$dTree.fit = broken.line(rx.control.seg)$fit
rx.disturb$dTree.fit = broken.line(rx.disturb.seg)$fit
#SE fit
wild.control$dTree.se.fit = broken.line(wild.control.seg)$se.fit
wild.disturb$dTree.se.fit = broken.line(wild.disturb.seg)$se.fit
rx.control$dTree.se.fit = broken.line(rx.control.seg)$se.fit
rx.disturb$dTree.se.fit = broken.line(rx.disturb.seg)$se.fit
#Recombine the data frames with the model fitted dNDMI as a column
all.models <- rbind(wild.control, wild.disturb, rx.control, rx.disturb)
#R-Squared values for the four models
r2.a  <- format(summary(wild.control.seg)$r.squared, digits = 2) #I could switch this back to segmented
r2.b <- format(summary(wild.disturb.seg)$r.squared, digits = 2)
r2.c <- format(summary(rx.control.seg)$r.squared, digits = 2)
r2.d <- format(summary(rx.disturb.seg)$r.squared, digits = 2) #I could switch this back to segmented
#Create a data.frame of R.squared values
r2.text <- data.frame(
label = c(as.character(as.expression(substitute(italic(R)^2~"="~r2, list(r2 =r2.a)))),
as.character(as.expression(substitute(italic(R)^2~"="~r2, list(r2 = r2.b)))),
as.character(as.expression(substitute(italic(R)^2~"="~r2, list(r2 = r2.c)))),
as.character(as.expression(substitute(italic(R)^2~"="~r2, list(r2 = r2.d))))
),
fire.year.bin = c('Control', 'Disturb', 'Control', 'Disturb'),
fire.type.bin = c('Wildfire', 'Wildfire', 'Rxfire', 'Rxfire'),
x = c(3500, 3500, 3500, 3500),
y = c(-20, -20, -20, -20)
)
p <- c('ggpubr', 'viridis', 'tidyr', 'dplyr', 'ggmap', 'ggplot2', 'magrittr', 'raster',
'rgdal', 'sp', 'sf', 'RStoolbox', 'ncdf4', 'gtools', 'tigris', 'patchwork',
'rlist', 'ggspatial', 'svglite', 'mgcv', 'zoo', 'segmented')
# install.packages(p,repo='https://cran.r-project.org/')
# install.packages(c('zoo'),repo='https://cran.r-project.org/')
lapply(p,require,character.only=TRUE)
wild.control <- pixel.filter %>% filter(fire.year.bin == 'Control' & fire.type.bin == "Wildfire")
wild.disturb <- pixel.filter %>% filter(fire.year.bin == 'Disturb' & fire.type.bin == "Wildfire")
rx.control <- pixel.filter %>% filter(fire.year.bin == 'Control' & fire.type.bin == "Rxfire")
rx.disturb <- pixel.filter %>% filter(fire.year.bin == 'Disturb' & fire.type.bin == "Rxfire")
#Models for Wild Fire
wild.control.lm <- lm(data = wild.control, dTree ~ Water_Stress)
wild.disturb.lm <- lm(data = wild.disturb, dTree ~ Water_Stress)
#Models for Rx Fire
rx.control.lm <- lm(data = rx.control, dTree~ Water_Stress)
rx.disturb.lm <- lm(data = rx.disturb, dTree ~ Water_Stress)
#Calculate the sgemented models
wild.control.seg <- segmented(wild.control.lm)
wild.disturb.seg <- segmented(wild.disturb.lm)
rx.control.seg <- segmented(rx.control.lm)
rx.disturb.seg <- segmented(rx.disturb.lm)
#Add predicted dNDMI values
wild.control$dTree.predict = predict(wild.control.seg)
wild.disturb$dTree.predict = predict(wild.disturb.seg)
rx.control$dTree.predict = predict(rx.control.seg)
rx.disturb$dTree.predict = predict(rx.disturb.seg)
#Add the segmented fits and Standard Errors
#Fits
wild.control$dTree.fit = broken.line(wild.control.seg)$fit
wild.disturb$dTree.fit = broken.line(wild.disturb.seg )$fit
rx.control$dTree.fit = broken.line(rx.control.seg)$fit
rx.disturb$dTree.fit = broken.line(rx.disturb.seg)$fit
#SE fit
wild.control$dTree.se.fit = broken.line(wild.control.seg)$se.fit
wild.disturb$dTree.se.fit = broken.line(wild.disturb.seg)$se.fit
rx.control$dTree.se.fit = broken.line(rx.control.seg)$se.fit
rx.disturb$dTree.se.fit = broken.line(rx.disturb.seg)$se.fit
#Recombine the data frames with the model fitted dNDMI as a column
all.models <- rbind(wild.control, wild.disturb, rx.control, rx.disturb)
#R-Squared values for the four models
r2.a  <- format(summary(wild.control.seg)$r.squared, digits = 2) #I could switch this back to segmented
r2.b <- format(summary(wild.disturb.seg)$r.squared, digits = 2)
r2.c <- format(summary(rx.control.seg)$r.squared, digits = 2)
r2.d <- format(summary(rx.disturb.seg)$r.squared, digits = 2) #I could switch this back to segmented
#Create a data.frame of R.squared values
r2.text <- data.frame(
label = c(as.character(as.expression(substitute(italic(R)^2~"="~r2, list(r2 =r2.a)))),
as.character(as.expression(substitute(italic(R)^2~"="~r2, list(r2 = r2.b)))),
as.character(as.expression(substitute(italic(R)^2~"="~r2, list(r2 = r2.c)))),
as.character(as.expression(substitute(italic(R)^2~"="~r2, list(r2 = r2.d))))
),
fire.year.bin = c('Control', 'Disturb', 'Control', 'Disturb'),
fire.type.bin = c('Wildfire', 'Wildfire', 'Rxfire', 'Rxfire'),
x = c(3500, 3500, 3500, 3500),
y = c(-20, -20, -20, -20)
)
# letter.text <- data.frame(label = c("a)", "b)", "c)", "d)"),
#                           sequence   = c('Both Droughts', 'Both Droughts', '2nd Drought Only', '2nd Drought Only'),
#                           drought = c('1999-2002', '2012-2015', '1999-2002',  '2012-2015'),
#                           y     = c(-0.3, -0.3, -0.3, -0.3),
#                           x     = c(-2400, -2400, -2400, -2400)
# )
#Create the figure
p1 <- ggplot(data = all.models) +
#Create the density layer
geom_bin2d(binwidth = c(200, 1), mapping = aes(x = Water_Stress, y = dTree, group = ..count..)) +
#Piecewise linear regression fit line
geom_line(mapping = aes(x=Water_Stress, y=dTree.fit), size=2, color = 'black', linetype = 'dotdash') +
#Piecewise fit uncertainty
geom_ribbon(mapping = aes(x = Water_Stress, y = dTree.fit, ymax = dTree.fit + 1.96*dTree.se.fit, ymin = dTree.fit - 1.96*dTree.se.fit), alpha = 0.4) +
scale_fill_gradient2(limits = c(0,800), breaks = c(0,200, 400, 600), midpoint = 400, low = "cornflowerblue", mid = "yellow", high = "red", na.value = 'transparent') +
facet_grid(fire.type.bin ~ fire.year.bin) +
# scale_alpha(range = c(1, 1), limits = c(50, 1000), na.value = 0.4) +
# stat_cor( mapping = aes(x = Water_Stress, y = dTree), color = 'black') + facet_grid(fire.type.bin ~ treatment) +
labs(fill = "Grid Cells") +
#Add the R^2 values
geom_text(data = r2.text, mapping = aes(x = x, y = y, label = label), size = 3.5, parse = TRUE) +
#Add the R^2 text
# geom_text(data = letter.text, mapping = aes(x = x, y = y, label = label), size = 5, fontface = "bold") +
theme_bw() +
xlab(expression('Four-year Pr-ET (mm 4yr'^-1*')')) + ylab(expression('Die-off (trees ha'^-1*')'))
p1
p2 <- p1 + theme(
legend.background = element_rect(colour = NA, fill = NA), # This removes the white square behind the legend
legend.justification = c(1, 0),
legend.position = c(0.15, 0.55),
legend.text = element_text(size = 10),
legend.title = element_text(size = 10),
legend.direction = "vertical") +
guides(fill = guide_colorbar(barwidth = 1, barheight = 3,
title.position = "top",
title.hjust = 0.5,
ticks.colour = "black"))
p2
ggsave(filename = 'Fig6a_frap_rx_water_stress_dTree_300m.png', height=16, width= 16, units = 'cm', dpi=900)
sev.pixel.filter <- sev.pixel.data %>% filter(fire.year <= 2010 & Tree_Cover > 0 & (fire_year_2019 <= 2010 | is.na(fire_year_2019))) %>%
filter(case_when(sev.bin == 'Unchanged' ~ stratlayer %in% un.strat,
sev.bin == 'Low' ~ stratlayer %in% lo.strat,
sev.bin == 'Mid' ~ stratlayer %in% mid.strat,
sev.bin == 'High' ~ stratlayer %in% hi.strat)) %>%
dplyr::group_by(system.index) %>%
summarize(dTree = mean(Tree_Cover[vi.year %in% c(2017, 2018)]) - mean(Tree_Cover[vi.year %in% c(2013, 2014)]),
RdTree = (mean(Tree_Cover[vi.year %in% c(2017, 2018)]) - mean(Tree_Cover[vi.year %in% c(2013,2014)])) / mean(Tree_Cover[vi.year %in% c(2013, 2014)]),
Water_Stress = sum(PrET[vi.year %in% c(2012,2013,2014,2015)]),
sev.bin = sev.bin[vi.year == 2010],
treatment = treatment[vi.year == 2010])
sev.hi.control <- sev.pixel.filter %>% filter(treatment == 'Control' & sev.bin == "High")
sev.hi.disturb <- sev.pixel.filter %>% filter(treatment == 'Disturb' & sev.bin == "High")
sev.mid.control <- sev.pixel.filter %>% filter(treatment == 'Control' & sev.bin == "Mid")
sev.mid.disturb <- sev.pixel.filter %>% filter(treatment == 'Disturb' & sev.bin == "Mid")
sev.lo.control <- sev.pixel.filter %>% filter(treatment == 'Control' & sev.bin == "Low")
sev.lo.disturb <- sev.pixel.filter %>% filter(treatment == 'Disturb' & sev.bin == "Low")
#Models for Wild Fire
sev.hi.control.lm <- lm(data = sev.hi.control, dTree~ Water_Stress)
sev.hi.disturb.lm <- lm(data = sev.hi.disturb, dTree ~ Water_Stress)
#Models for Mid Severity fire
sev.mid.control.lm <- lm(data = sev.mid.control, dTree~ Water_Stress)
sev.mid.disturb.lm <- lm(data = sev.mid.disturb, dTree ~ Water_Stress)
#Models for Rx Fire
sev.lo.control.lm <- lm(data = sev.lo.control, dTree~ Water_Stress)
sev.lo.disturb.lm <- lm(data = sev.lo.disturb, dTree ~ Water_Stress)
#Calculate the sgemented models
sev.hi.control.seg <- segmented(sev.hi.control.lm)
sev.hi.disturb.seg <- segmented(sev.hi.disturb.lm)
sev.mid.control.seg <- segmented(sev.mid.control.lm)
sev.mid.disturb.seg <- segmented(sev.mid.disturb.lm)
sev.lo.control.seg <- segmented(sev.lo.control.lm)
sev.lo.disturb.seg <- segmented(sev.lo.disturb.lm)
#Add predicted dNDMI values
sev.hi.control$dTree.predict = predict(sev.hi.control.seg)
sev.hi.disturb$dTree.predict = predict(sev.hi.disturb.seg)
sev.mid.control$dTree.predict = predict(sev.mid.control.seg)
sev.mid.disturb$dTree.predict = predict(sev.mid.disturb.seg)
sev.lo.control$dTree.predict = predict(sev.lo.control.seg)
sev.lo.disturb$dTree.predict = predict(sev.lo.disturb.seg)
#Add the segmented fits and Standard Errors
#Fits
sev.hi.control$dTree.fit = broken.line(sev.hi.control.seg)$fit
sev.hi.disturb$dTree.fit = broken.line(sev.hi.disturb.seg )$fit
sev.mid.control$dTree.fit = broken.line(sev.mid.control.seg)$fit
sev.mid.disturb$dTree.fit = broken.line(sev.mid.disturb.seg )$fit
sev.lo.control$dTree.fit = broken.line(sev.lo.control.seg)$fit
sev.lo.disturb$dTree.fit = broken.line(sev.lo.disturb.seg)$fit
#SE fit
sev.hi.control$dTree.se.fit = broken.line(sev.hi.control.seg)$se.fit
sev.hi.disturb$dTree.se.fit = broken.line(sev.hi.disturb.seg)$se.fit
sev.mid.control$dTree.se.fit = broken.line(sev.mid.control.seg)$se.fit
sev.mid.disturb$dTree.se.fit = broken.line(sev.mid.disturb.seg)$se.fit
sev.lo.control$dTree.se.fit = broken.line(sev.lo.control.seg)$se.fit
sev.lo.disturb$dTree.se.fit = broken.line(sev.lo.disturb.seg)$se.fit
#Recombine the data frames with the model fitted dNDMI as a column
sev.all.models <- rbind(sev.hi.control, sev.hi.disturb, sev.mid.control, sev.mid.disturb, sev.lo.control, sev.lo.disturb)
#R-Squared values for the four models
r2.a  <- format(summary(sev.hi.control.seg)$r.squared, digits = 2) #I could switch this back to segmented
r2.b <- format(summary(sev.hi.disturb.seg)$r.squared, digits = 2)
r2.c  <- format(summary(sev.mid.control.seg)$r.squared, digits = 2) #I could switch this back to segmented
r2.d <- format(summary(sev.mid.disturb.seg)$r.squared, digits = 2)
r2.e <- format(summary(sev.lo.control.seg)$r.squared, digits = 2)
r2.f <- format(summary(sev.lo.disturb.seg)$r.squared, digits = 2) #I could switch this back to segmented
#Create a data.frame of R.squared values
r2.text <- data.frame(
label = c(as.character(as.expression(substitute(italic(R)^2~"="~r2, list(r2 =r2.a)))),
as.character(as.expression(substitute(italic(R)^2~"="~r2, list(r2 = r2.b)))),
as.character(as.expression(substitute(italic(R)^2~"="~r2, list(r2 = r2.c)))),
as.character(as.expression(substitute(italic(R)^2~"="~r2, list(r2 = r2.d)))),
as.character(as.expression(substitute(italic(R)^2~"="~r2, list(r2 = r2.e)))),
as.character(as.expression(substitute(italic(R)^2~"="~r2, list(r2 = r2.f))))
),
treatment = c('Control', 'Disturb', 'Control', 'Disturb', 'Control', 'Disturb'),
sev.bin = c('High', 'High', 'Mid', 'Mid', 'Low', 'Low'),
x = c(3500, 3500, 3500, 3500, 3500, 3500),
y = c(-20, -20, -20, -20, -20, -20)
)
p1 <- ggplot(data = sev.all.models) +
#Create the density layer
geom_bin2d(binwidth = c(200, 1), mapping = aes(x = Water_Stress, y = dTree, group = ..count..)) +
#Piecewise linear regression fit line
geom_line(mapping = aes(x=Water_Stress, y=dTree.fit), size=2, color = 'black', linetype = 'dotdash') +
#Piecewise fit uncertainty
geom_ribbon(mapping = aes(x = Water_Stress, y = dTree.fit, ymax = dTree.fit + 1.96*dTree.se.fit, ymin = dTree.fit - 1.96*dTree.se.fit), alpha = 0.4) +
scale_fill_gradient2(limits = c(0,360), breaks = c(0,90,180,270), midpoint = 180, low = "cornflowerblue", mid = "yellow", high = "red", na.value = 'transparent') +
facet_grid(factor(sev.bin, levels = c('Low', 'Mid', 'High')) ~ treatment) +
# scale_alpha(range = c(1, 1), limits = c(50, 1000), na.value = 0.4) +
# stat_cor( mapping = aes(x = Water_Stress, y = dTree), color = 'black') + facet_grid(fire.type.bin ~ treatment) +
labs(fill = "Grid Cells") +
#Add the R^2 values
geom_text(data = r2.text, mapping = aes(x = x, y = y, label = label), size = 3.5, parse = TRUE) +
#Add the R^2 text
# geom_text(data = letter.text, mapping = aes(x = x, y = y, label = label), size = 5, fontface = "bold") +
theme_bw() +
xlab(expression('Four-year Pr-ET (mm 4yr'^-1*')')) + ylab('Die-off (dTree %)')
p1
p2 <- p1 + theme(
legend.background = element_rect(colour = NA, fill = NA), # This removes the white square behind the legend
legend.justification = c(1, 0),
legend.position = c(0.5, 0.4),
legend.text = element_text(size = 10),
legend.title = element_text(size = 10),
legend.direction = "vertical") +
guides(fill = guide_colorbar(barwidth = 1, barheight = 3,
title.position = "top",
title.hjust = 0.5,
ticks.colour = "black"))
p2
ggsave(filename = 'Fig6c_sev_water_stress_dTree_300m.png', height=24, width= 16, units = 'cm', dpi=900)
