p4b <- ggbarplot(join.sp %>% ungroup() %>%
filter(!is.na(disturb.bin) & disturb.bin %in% c('Die-off', 'Fire')& tree_type %in% c('pine', 'fir')),
x = "disturb.bin", y = "basal_area.dead.pct", fill = 'tree_type.f',
color = "tree_type.f",
position = position_dodge(), add = "mean_se" , error.plot = "errorbar", alpha = 0.8,
xlab = 'Disturbance', order = c('Die-off', "Fire")) +
theme_bw() + guides(color = 'none', fill = guide_legend(title = "Tree Type", label.position = "bottom", title.position="top", title.hjust = 0.5)) +
scale_fill_discrete(labels = c("pine" = "Pine", "fir" = "Fir", "oak" = "Oak", "cedar" = "Cedar")) +
geom_text(data = p4b_letters, mapping = aes(x = x, y = y, label = label), size = 5) +
theme(legend.background = element_rect(colour = NA, fill = NA), legend.justification = c(1, 0),
legend.position = c(0.9, 0.65), legend.text = element_text(size = 8, angle = 45, vjust = 0.8), legend.title = element_text(size = 10),
legend.direction = "horizontal", axis.text.x = element_text(size = 8), axis.title.x = element_text(size = 10),
axis.text.y = element_text(size = 8), axis.title.y = element_text(size = 10), strip.background = element_blank(),
strip.text.x = element_blank(), plot.margin = unit(c(2.5,0,0,5), "pt"), panel.spacing = unit(20, "pt"),
plot.tag.position = c(0.2, 0.9),
plot.tag = element_text(face = "bold")) + ylab('Mortality (%)')
p4b
# expression('Mortality (m'^2*' ha'^-1*')')
# p4b <- ggbarplot(join.sp %>% ungroup() %>%
#                   filter(!is.na(disturb.bin) & disturb.bin %in% c('Die-off', 'Ground Fire', 'Crown Fire') & tree_type %in% c('pine', 'fir')),
#                 x = "disturb.bin", y = "basal_area.dead.pct", fill = 'tree_type.f',
#                 color = "tree_type.f",
#                 position = position_dodge(), add = "mean_se" , error.plot = "errorbar", alpha = 0.8,
#                 ylab = 'Mortality (%)',
#                 xlab = 'Disturbance', order = c('Die-off', "Ground Fire", "Crown Fire")) +
#   theme_bw() + guides(color = 'none', fill = guide_legend(title = "Tree Type", label.position = "bottom", title.position="top", title.hjust = 0.5)) +
#   # scale_color_manual(values = c("black", "black"), aesthetics = "color") + labs(tag = 'd)') +
#   scale_fill_discrete(labels = c("pine" = "Pine", "fir" = "Fir", "oak" = "Oak", "cedar" = "Cedar")) +
#   # theme(legend.background = element_rect(colour = NA, fill = NA), legend.justification = c(1, 0),
#   #       legend.position = 'none', legend.text = element_text(size = 8, angle = 45, vjust = 0.8), legend.title = element_text(size = 10),
#   #       legend.direction = "horizontal", axis.text.x = element_text(size = 8, color = 'black'), axis.title.x = element_text(size = 10, color = 'black'),
#   #       axis.text.y = element_text(size = 8), axis.title.y = element_text(size = 10), strip.background = element_blank(),
#   #       strip.text.x = element_blank(), plot.margin = unit(c(2.5,0,0,5), "pt"), panel.spacing = unit(20, "pt"),
#   #       plot.tag.position = c(0.53, 0.96),
#   #       plot.tag = element_text(face = "bold"))
# theme(legend.background = element_rect(colour = NA, fill = NA), legend.justification = c(1, 0),
#       legend.position = 'none', legend.text = element_text(size = 8, angle = 45, vjust = 0.8), legend.title = element_text(size = 10),
#       legend.direction = "horizontal", axis.text.x = element_blank(), axis.title.x = element_blank(),
#       axis.text.y = element_text(size = 8), axis.title.y = element_text(size = 10), strip.background = element_blank(),
#       strip.text.x = element_blank(), plot.margin = unit(c(2.5,0,0,5), "pt"), panel.spacing = unit(20, "pt"),
#       plot.tag.position = c(0.2, 0.9),
#       plot.tag = element_text(face = "bold"))
# p4b
#
# p4c <- ggbarplot(join.sp %>% ungroup() %>%
#                    filter(!is.na(disturb.bin) & disturb.bin %in% c('Die-off', 'Ground Fire', 'Crown Fire')& tree_type %in% c('pine', 'fir')),
#                  x = "disturb.bin", y = "basal_area.all", fill = 'tree_type.f',
#                  color = "tree_type.f",
#                  position = position_dodge(), add = "mean_se" , error.plot = "errorbar", alpha = 0.8,
#                  xlab = 'Disturbance Type', order = c('Die-off', "Ground Fire", "Crown Fire")) +
#   theme_bw() + guides(color = 'none', fill = guide_legend(title = "Tree Type", label.position = "bottom", title.position="top", title.hjust = 0.5)) +
#   scale_fill_discrete(labels = c("pine" = "Pine", "fir" = "Fir", "oak" = "Oak", "cedar" = "Cedar")) +
#
#   theme(legend.background = element_rect(colour = NA, fill = NA), legend.justification = c(1, 0),
#         legend.position = 'none', legend.text = element_text(size = 8, angle = 45, vjust = 0.8), legend.title = element_text(size = 10),
#         legend.direction = "horizontal", axis.text.x = element_text(size = 8, color = 'black'), axis.title.x = element_text(size = 10, color = 'black'),
#         axis.text.y = element_text(size = 8), axis.title.y = element_text(size = 10), strip.background = element_blank(),
#         strip.text.x = element_blank(), plot.margin = unit(c(2.5,0,0,5), "pt"), panel.spacing = unit(20, "pt"),
#         plot.tag.position = c(0.53, 0.96),
#         plot.tag = element_text(face = "bold")) +
#         ylab(expression('Basal Area (m'^2*' ha'^-1*')'))
# p4c
#Combine the two figure panels into one
f4 <- ggarrange(p4a, p4b, ncol = 1, nrow = 2, align = "v", labels = c("a", "b"),  heights = c(0.95, 1), common.legend = FALSE)
f4
ggsave(filename = 'Fig8_fire_mortality_by_tree_type.png', height=16, width=16, units = 'cm', dpi=900)
# p <- c('ggpubr', 'viridis', 'tidyr', 'dplyr', 'ggmap', 'ggplot2', 'magrittr', 'raster',
#        'rgdal', 'sp', 'sf', 'RStoolbox', 'ncdf4', 'gtools', 'tigris', 'patchwork',
#        'rlist', 'ggspatial', 'svglite', 'mgcv', 'zoo', 'purrr', 'mgcViz', 'relaimpo', 'dplyr')
install.packages(c('DALEX', 'DALEXtra'), repo='https://cran.r-project.org/')
p <- c('ggpubr', 'viridis', 'tidyr', 'dplyr', 'ggmap', 'ggplot2', 'magrittr', 'raster',
'rgdal', 'sp', 'sf', 'RStoolbox', 'ncdf4', 'gtools', 'tigris', 'patchwork',
'rlist', 'ggspatial', 'svglite', 'mgcv', 'mgcViz','zoo', 'purrr', 'scales',
'DALEX', 'DALEXtra')
lapply(p,require,character.only=TRUE)
lapply(p,require,character.only=TRUE)
#Home computer
setwd('C:/Users/can02/mystuff/fireDieoff/final_figures/landsat')
dir_in <- "D:\\Fire_Dieoff"
#Lab computer
# setwd('C:/Users/Carl/mystuff/fireDieoff/final_figures/landsat')
# dir_in <- "C:\\Users\\Carl\\mystuff\\Large_Files\\Fire_Dieoff"
#Add the data
sev.data <- read.csv(file.path(dir_in, "fire_south_sierra_USFS_sevfire_500pt_200mm_5tree_ts8_300m_20230322.csv"), header = TRUE, na.strings = "NaN")
# fire.data$fire.year <- fire.data$perimeter_year
sev.data$treatment <- 'Disturb'
# sev.data$treatment.cat <- 0
raw.sev.control.data <- read.csv(file.path(dir_in, "control_south_sierra_sev_2km_buffer_500pt_200mm_5tree_ts16_300m_20230322.csv"), header = TRUE, na.strings = "NaN")
#Duplicate and add the fire severity columns
unchanged.control.data <- raw.sev.control.data
unchanged.control.data$fire_sev_2010 <- 1
low.control.data <- raw.sev.control.data
low.control.data$fire_sev_2010 <- 2
med.control.data <- raw.sev.control.data
med.control.data$fire_sev_2010 <- 3
high.control.data <- raw.sev.control.data
high.control.data$fire_sev_2010 <- 4
# unchanged.control.data
# raw.sev.control.data
# sev.data
sev.control.data <- rbind(unchanged.control.data, low.control.data, med.control.data, high.control.data)
#Add Fire Columns
# control.data$fire_sev_2010 <- -9999
# control.data$fire_year_2010 <- -9999
# control.data$fire_ID_2010 <- -9999
sev.control.data$fire_count_2010 <- -9999
sev.control.data$fire_sev_2019 <- -9999
sev.control.data$fire_year_2019 <- -9999
sev.control.data$fire_ID_2019 <- -9999
sev.control.data$fire_count_2019 <- -9999
sev.control.data$fire_sev_2020 <- -9999
sev.control.data$fire_year_2020 <- -9999
sev.control.data$fire_ID_2020 <- -9999
sev.control.data$fire_count_2020 <- -9999
#Add Control treatment column
sev.control.data$treatment <- 'Control' #Try making this 1-km versus, 2-km
# sev.control.data$treatment.cat <- 0
#Combine the data together
sev.pixel.data <- rbind(sev.data, sev.control.data)
# pixel.data <- rbind(combine.data, control.data.2km)
# summary(sev.pixel.data)
`%notin%` <- Negate(`%in%`)
#Convert fire data -9999 to NAs
# sev.pixel.data[sev.pixel.data$fire_sev_2010 == -9999,]$fire_sev_2010 <- NA
# sev.pixel.data[sev.pixel.data$fire_year_2010 == -9999,]$fire_year_2010 <- NA
# sev.pixel.data[sev.pixel.data$fire_ID_2010 == -9999,]$fire_ID_2010 <- NA
sev.pixel.data[sev.pixel.data$fire_count_2010 == -9999,]$fire_count_2010 <- NA
sev.pixel.data[sev.pixel.data$fire_sev_2019 == -9999,]$fire_sev_2019 <- NA
sev.pixel.data[sev.pixel.data$fire_year_2019 == -9999,]$fire_year_2019 <- NA
sev.pixel.data[sev.pixel.data$fire_ID_2019 == -9999,]$fire_ID_2019 <- NA
sev.pixel.data[sev.pixel.data$fire_count_2019 == -9999,]$fire_count_2019 <- NA
sev.pixel.data[sev.pixel.data$fire_sev_2020 == -9999,]$fire_sev_2020 <- NA
sev.pixel.data[sev.pixel.data$fire_year_2020 == -9999,]$fire_year_2020 <- NA
sev.pixel.data[sev.pixel.data$fire_ID_2020 == -9999,]$fire_ID_2020 <- NA
sev.pixel.data[sev.pixel.data$fire_count_2020 == -9999,]$fire_count_2020 <- NA
#Use the FRAP fire perimeter year
sev.pixel.data$fire.year <- sev.pixel.data$fire_year_2010
#Do categorical treatments
sev.pixel.data <- sev.pixel.data %>% dplyr::mutate(treat = case_when(treatment == 'Disturb' ~ 1, treatment == 'Control' ~ 0))
#Create Fire Year Bins
#Separate the data
#Fire Severity Bins
#With re-export type needs to be converted to sev
sev.pixel.data <- sev.pixel.data %>% mutate(sev.bin = case_when(
fire_sev_2010 == '0' ~ 'No Fire',
fire_sev_2010 == '1' ~ 'Unchanged',
fire_sev_2010 == '2' ~ 'Low',
fire_sev_2010 == '3' ~ 'Mid',
fire_sev_2010 == '4' ~ 'High',
fire_sev_2010 == '255' ~ 'Masked')) # end function
# sev.pixel.data %>% summary()
#Make the years bin lables in the correct order
sev.pixel.data$sev.bin = with(sev.pixel.data, factor(sev.bin, levels = c('No Fire','Unchanged', 'Low','Mid', 'High')))#c('No Fire','Masked', 'Unchanged or Low','Mid or High')))
#Recode the veg type data
# sev.pixel.data$veg_name <- recode(.x=sev.pixel.data$lf_evt_2001, .default = NA_character_, '2015' = 'Redwood', '2019' = 'Pinyon Juniper', '2020' = 'Bristlecone Pine', '2027' = 'Mixed Conifer', '2028' = 'White Fir', '2031' = 'Jeffrey Pine',
#                               '2032' = 'Red Fir', '2033' = 'Subalpine', '2034' = 'Knobcone Pine', '2043' = 'Mixed Conifer', '2044' = 'Subalpine', '2045' = 'Mixed Conifer',
#                               '2053' = 'Ponderosa Pine', '2058' = 'Lodgepole Pine', '2061' = 'Mixed Conifer', '2112' = 'Blue Oak Woodland', '2172' = 'White Fir', '2173' = 'Lodgepole Pine', '2201' = 'Oregon White Oak', '2230' = 'Blue Oak - Digger Pine')
# sev.pixel.data %>% summary()
#Select strat categories for fire treatments
un.disturb <- sev.pixel.data %>% filter(sev.bin == 'Unchanged' & treatment == 'Disturb') %>% group_by(stratlayer) %>% summarize(n = n())
lo.disturb <- sev.pixel.data %>% filter(sev.bin == 'Low' & treatment == 'Disturb') %>% group_by(stratlayer) %>% summarize(n = n())
mid.disturb <- sev.pixel.data %>% filter(sev.bin == 'Mid' & treatment == 'Disturb') %>% group_by(stratlayer) %>% summarize(n = n())
hi.disturb <- sev.pixel.data %>% filter(sev.bin == 'High' & treatment == 'Disturb') %>% group_by(stratlayer) %>% summarize(n = n())
un.control <- sev.pixel.data %>% filter(sev.bin == 'Unchanged' & treatment == 'Control') %>% group_by(stratlayer) %>% summarize(n = n())
un.test <- un.control <- sev.pixel.data %>% filter(sev.bin == 'Unchanged' & treatment == 'Control') %>% group_by(stratlayer) %>% summarize(n = n())
lo.control <- sev.pixel.data %>% filter(sev.bin == 'Low' & treatment == 'Control') %>% group_by(stratlayer) %>% summarize(n = n())
mid.control <- sev.pixel.data %>% filter(sev.bin == 'Mid' & treatment == 'Control') %>% group_by(stratlayer) %>% summarize(n = n())
hi.control <- sev.pixel.data %>% filter(sev.bin == 'High' & treatment == 'Control') %>% group_by(stratlayer) %>% summarize(n = n())
un.strat <- inner_join(un.disturb, un.control, by = 'stratlayer') %>%
group_by(stratlayer) %>% summarize(n = min(n.x,n.y))
lo.strat <- inner_join(lo.disturb, lo.control, by = 'stratlayer') %>%
group_by(stratlayer) %>% summarize(n = min(n.x,n.y))
mid.strat <- inner_join(mid.disturb, mid.control, by = 'stratlayer') %>%
group_by(stratlayer) %>% summarize(n = min(n.x,n.y))
hi.strat <- inner_join(hi.disturb, hi.control, by = 'stratlayer') %>%
group_by(stratlayer) %>% summarize(n = min(n.x,n.y))
#Set the random number seed
set.seed(4561)
# tidyr::unnest()
#Sample the unchanged control pixels
un.sample <- sev.pixel.data %>%
filter(treatment == 'Control' & sev.bin == 'Unchanged' & stratlayer %in% (un.strat %>% pull(stratlayer))) %>% #Get just the unchanged control stratification layers
group_by(stratlayer) %>% #Group by Stratification layer
tidyr::nest() %>% #Nest the data
ungroup() %>% #Un group the data
mutate(n = (un.strat %>% pull(n))) %>% #Add the sample sizes for the stratlayers in the disturbed data
mutate(samp = purrr::map2(data, n, sample_n)) %>% #Do the random sample, sample_n is depricated for slice_sample, but slice sample doesn't work.
dplyr::select(-data) %>% #Get rid of the data column
tidyr::unnest(samp) #unnest the data
#Sample the low severity control pixels
lo.sample <- sev.pixel.data %>%
filter(treatment == 'Control' & sev.bin == 'Low' & stratlayer %in% (lo.strat %>% pull(stratlayer))) %>% #Get just the unchanged control stratification layers
group_by(stratlayer) %>% #Group by Stratification layer
tidyr::nest() %>% #Nest the data
ungroup() %>% #Un group the data
mutate(n = (lo.strat %>% pull(n))) %>% #Add the sample sizes for the stratlayers in the disturbed data
mutate(samp = purrr::map2(data, n, sample_n)) %>% #Do the random sample, sample_n is depricated for slice_sample
dplyr::select(-data) %>% #Get rid of the data column
tidyr::unnest(samp) #unnest the data
#Sample the moderate severity control pixels
mid.sample <- sev.pixel.data %>%
filter(treatment == 'Control' & sev.bin == 'Mid' & stratlayer %in% (mid.strat %>% pull(stratlayer))) %>% #Get just the unchanged control stratification layers
group_by(stratlayer) %>% #Group by Stratification layer
tidyr::nest() %>% #Nest the data
ungroup() %>% #Un group the data
mutate(n = (mid.strat %>% pull(n))) %>% #Add the sample sizes for the stratlayers in the disturbed data
mutate(samp = purrr::map2(data, n, sample_n)) %>% #Do the random sample, sample_n is depricated for slice_sample
dplyr::select(-data) %>% #Get rid of the data column
tidyr::unnest(samp) #unnest the data
#High Severity Samples
hi.sample <- sev.pixel.data %>%
filter(treatment == 'Control' & sev.bin == 'High' & stratlayer %in% (hi.strat %>% pull(stratlayer))) %>% #Get just the unchanged control stratification layers
group_by(stratlayer) %>% #Group by Stratification layer
tidyr::nest() %>% #Nest the data
ungroup() %>% #Un group the data
mutate(n = (hi.strat %>% pull(n))) %>% #Add the sample sizes for the stratlayers in the disturbed data
mutate(samp = purrr::map2(data, n, sample_n)) %>% #Do the random sample, sample_n is depricated for slice_sample
dplyr::select(-data) %>% #Get rid of the data column
tidyr::unnest(samp) #unnest the data
#Make sure the stratlayer bins match with the sampled control bins
#Sample the unchanged control pixels
un.disturb <- sev.pixel.data %>%
filter(treatment == 'Disturb' & sev.bin == 'Unchanged' & stratlayer %in% (un.strat %>% pull(stratlayer))) %>% #Get just the unchanged control stratification layers
group_by(stratlayer) %>% #Group by Stratification layer
tidyr::nest() %>% #Nest the data
ungroup() %>% #Un group the data
mutate(n = (un.strat %>% pull(n))) %>% #Add the sample sizes for the stratlayers in the disturbed data
mutate(samp = purrr::map2(data, n, sample_n)) %>% #Do the random sample, sample_n is depricated for slice_sample, but slice sample doesn't work.
dplyr::select(-data) %>% #Get rid of the data column
tidyr::unnest(samp) #unnest the data
#Sample the low severity control pixels
lo.disturb <- sev.pixel.data %>%
filter(treatment == 'Disturb' & sev.bin == 'Low' & stratlayer %in% (lo.strat %>% pull(stratlayer))) %>% #Get just the unchanged control stratification layers
group_by(stratlayer) %>% #Group by Stratification layer
tidyr::nest() %>% #Nest the data
ungroup() %>% #Un group the data
mutate(n = (lo.strat %>% pull(n))) %>% #Add the sample sizes for the stratlayers in the disturbed data
mutate(samp = purrr::map2(data, n, sample_n)) %>% #Do the random sample, sample_n is depricated for slice_sample
dplyr::select(-data) %>% #Get rid of the data column
tidyr::unnest(samp) #unnest the data
#Sample the moderate severity control pixels
mid.disturb <- sev.pixel.data %>%
filter(treatment == 'Disturb' & sev.bin == 'Mid' & stratlayer %in% (mid.strat %>% pull(stratlayer))) %>% #Get just the unchanged control stratification layers
group_by(stratlayer) %>% #Group by Stratification layer
tidyr::nest() %>% #Nest the data
ungroup() %>% #Un group the data
mutate(n = (mid.strat %>% pull(n))) %>% #Add the sample sizes for the stratlayers in the disturbed data
mutate(samp = purrr::map2(data, n, sample_n)) %>% #Do the random sample, sample_n is depricated for slice_sample
dplyr::select(-data) %>% #Get rid of the data column
tidyr::unnest(samp) #unnest the data
#High Severity Samples
hi.disturb <- sev.pixel.data %>%
filter(treatment == 'Disturb' & sev.bin == 'High' & stratlayer %in% (hi.strat %>% pull(stratlayer))) %>% #Get just the unchanged control stratification layers
group_by(stratlayer) %>% #Group by Stratification layer
tidyr::nest() %>% #Nest the data
ungroup() %>% #Un group the data
mutate(n = (hi.strat %>% pull(n))) %>% #Add the sample sizes for the stratlayers in the disturbed data
mutate(samp = purrr::map2(data, n, sample_n)) %>% #Do the random sample, sample_n is depricated for slice_sample
dplyr::select(-data) %>% #Get rid of the data column
tidyr::unnest(samp) #unnest the data
#Combine the sampled data back together
sev.pixel.sample <- rbind(un.disturb, lo.disturb, mid.disturb, hi.disturb, un.sample, lo.sample, mid.sample, hi.sample)
sev.pixel.sample <- sev.pixel.sample %>%
tidyr::pivot_longer(cols = X10_AET:X9_tpa_max, names_to = c('year', '.value'), names_pattern = "X(\\d{1}|\\d{2})_(.*)", names_repair = "unique")
#Convert the year outputs to actual years
sev.pixel.sample$year <- as.numeric(sev.pixel.sample$year) + 1984
#Convert missing TPA data to NAs
sev.pixel.sample[sev.pixel.sample$tpa_max < 0,]$tpa_max <- NA
#Convert to trees per hectare
sev.pixel.sample$tpa_max <- sev.pixel.sample$tpa_max * 2.47105
#Make the dates into date time format for R
sev.pixel.sample$date <- as.Date(as.character(sev.pixel.sample$year), format = '%Y')
#Add VI Year
sev.pixel.sample$vi.year <- sev.pixel.sample$year
#Caluclate Stand AGe
sev.pixel.sample$stand.age <- as.numeric(sev.pixel.sample$year) - as.numeric(sev.pixel.sample$fire.year)
#Update Cover data to 100% scale
sev.pixel.sample$Tree_Cover.2 <- sev.pixel.sample$Tree_Cover / 100
sev.pixel.sample$Shrub_Cover.2 <- sev.pixel.sample$Shrub_Cover / 100
sev.pixel.sample$Herb_Cover.2 <- sev.pixel.sample$Herb_Cover / 100
sev.pixel.sample$Bare_Cover.2 <- sev.pixel.sample$Bare_Cover / 100
#Add Montana Veg Cover
sev.pixel.sample$Tree_Cover <- sev.pixel.sample$TRE
sev.pixel.sample$Shrub_Cover <- sev.pixel.sample$SHR
sev.pixel.sample$Herb_Cover <- sev.pixel.sample$AFG + sev.pixel.sample$PFG
sev.pixel.sample$Bare_Cover <- sev.pixel.sample$BGR
#Convert the SPI48 scale back to decimal
sev.pixel.sample$SPI48 <- sev.pixel.sample$SPI48 / 100
#Try to fix soil moisture by dividing by 10
sev.pixel.sample$Soil_Moisture <- sev.pixel.sample$Soil_Moisture / 10
#Rename ppt and Water Stress
sev.pixel.sample$Water_Stress <- sev.pixel.sample$Water_Stress
sev.pixel.sample$ppt <- sev.pixel.sample$ppt
sev.pixel.sample$AET <- sev.pixel.sample$AET
sev.pixel.sample$GPP <- sev.pixel.sample$GPP
sev.pixel.sample$elevation <- sev.pixel.sample$elevation
sev.pixel.sample$PrET <- sev.pixel.sample$ppt - sev.pixel.sample$AET
summary(sev.pixel.sample)
#Do Fire year bins
sev.pixel.sample <- sev.pixel.sample %>% mutate(fire.year.bin = case_when(
# fire.year < 1980 ~ '< 1980',
fire.year >= 1985 & fire.year <= 1990 ~ '1985-1990',
fire.year >= 1991 & fire.year <= 1995 ~ '1991-1995',
fire.year >= 1996 & fire.year <= 2000 ~ '1996-2000',
fire.year >= 2001 & fire.year <= 2005 ~ '2001-2005',
fire.year >= 2006 & fire.year <= 2010 ~ '2006-2010'))
#Fire year bins for Fire Severity Data
sev.pixel.sample$fire.year.bin = with(sev.pixel.sample, factor(fire.year.bin, levels = c('2006-2010', '2001-2005','1996-2000', '1991-1995','1985-1990')))
model.data <- sev.pixel.sample %>% filter(fire.year <= 2010 & fire.year >= 1986 & (fire_year_2019 <= 2010 | is.na(fire_year_2019))) %>% # &
dplyr::group_by(system.index, treatment, sev.bin) %>%
reframe(dTree = (mean(Tree_Cover[vi.year %in% c(2017, 2018)]) - mean(Tree_Cover[vi.year %in% c(2011,2012)])),
Tree = mean(Tree_Cover[vi.year %in% c(2011,2012)]),
ET = mean(AET[vi.year %in% c(2011,2012)]),
tpa_max = sum(tpa_max[vi.year %in% c(2015, 2016, 2017, 2018)], na.rm = TRUE),
Water_Stress = PrET[vi.year %in% c(2012,2013,2014,2015)],
stand.age = stand.age[vi.year == 2015],
fire_sev = fire_sev_2010[vi.year == 2015],
treat = treat[vi.year == 2015],
ppt_climate = clm_precip_sum[vi.year == 2015],
temp_climate = clm_temp_mean[vi.year == 2015],
elevation = elevation[vi.year == 2015])
glimpse(model.data)
set.seed(4595)
data_split <- initial_split(model.data, prop = 0.75)
set.seed(4595)
data_split <- initial_split(model.data, prop = 0.75)
# p <- c('ggpubr', 'viridis', 'tidyr', 'dplyr', 'ggmap', 'ggplot2', 'magrittr', 'raster',
#        'rgdal', 'sp', 'sf', 'RStoolbox', 'ncdf4', 'gtools', 'tigris', 'patchwork',
#        'rlist', 'ggspatial', 'svglite', 'mgcv', 'zoo', 'purrr', 'mgcViz', 'relaimpo', 'dplyr')
# install.packages(c('DALEX', 'DALEXtra'), repo='https://cran.r-project.org/')
# library(DALEX)
# library()
# library(zoo)
# library(scales)
# install.packages(c('ggmap'),repo='https://cran.r-project.org/')
lapply(c('tidymodels', 'corrr', 'vip'), require,character.only=TRUE)
data_split <- initial_split(model.data, prop = 0.75)
dieoff_train <- training(data_split)
dieoff_test  <- testing(data_split)
gam_fit <- dieoff_train %>%
gen_additive_model(engine = 'mgcv') %>%
set_mode("regression") %>%
fit(tpa_max ~ s(Tree,bs='cs') +
s(ET,bs='cs') +
s(Water_Stress,bs='cs') +
s(ppt_climate,bs='cs', k = 3) +
stand.age +
fire_sev + treat, method = 'REML')
gam_fit <- dieoff_train %>%
gen_additive_mod(engine = 'mgcv') %>%
set_mode("regression") %>%
fit(tpa_max ~ s(Tree,bs='cs') +
s(ET,bs='cs') +
s(Water_Stress,bs='cs') +
s(ppt_climate,bs='cs', k = 3) +
stand.age +
fire_sev + treat, method = 'REML')
gam_fit <- dieoff_train %>%
gen_additive_mod(engine = 'mgcv') %>%
set_mode("regression") %>%
fit(tpa_max ~ s(Tree,bs='cs') +
s(ET,bs='cs') +
s(Water_Stress,bs='cs') +
s(ppt_climate,bs='cs', k = 3) +
stand.age +
fire_sev + treat)
lm_fit <- dieoff_train %>%
linear_reg(engine = 'lm') %>%
set_mode("regression") %>%
fit(tpa_max ~ ET + Tree + Water_Stress + stand.age + fire_sev + treat)
dieoff_train
last_trace()
rlang::last_trace()
lm_fit <- linear_reg(engine = 'lm') %>%
set_mode("regression") %>%
fit(tpa_max ~ ET + Tree + Water_Stress + stand.age + fire_sev + treat, data = dieoff_train)
lm_fit
gam_fit <- gen_additive_reg(engine = 'mgcv') %>%
set_mode("regression") %>%
fit(tpa_max ~ s(Tree,bs='cs') +
s(ET,bs='cs') +
s(Water_Stress,bs='cs') +
s(ppt_climate,bs='cs', k = 3) +
stand.age +
fire_sev + treat, data = dieoff_train)
gam_fit <- gen_additive_mod(engine = 'mgcv') %>%
set_mode("regression") %>%
fit(tpa_max ~ s(Tree,bs='cs') +
s(ET,bs='cs') +
s(Water_Stress,bs='cs') +
s(ppt_climate,bs='cs', k = 3) +
stand.age +
fire_sev + treat, data = dieoff_train)
vip_features <- c('stand.age', 'fire.sev', 'treat', 'Tree', 'ET', 'ppt_climate', 'Water_Stress')
vip_train <- dieoff_train %>% select(all_of(vip_features))
vip_train <- dieoff_train %>% dplyr::select(all_of(vip_features))
vip_features <- c('stand.age', 'fire_sev', 'treat', 'Tree', 'ET', 'ppt_climate', 'Water_Stress')
vip_train <- dieoff_train %>% dplyr::select(all_of(vip_features))
explainer_gam <-
explain_tidymodels(
gam_fit,
data = vip_train,
y = dieoff_train$tpa_max,
label = "gam",
verbose = FALSE
)
#Do a Global Explanation (local explanation are also possible)
vip_gam <- model_parts(explainer_rf, loss_function = loss_root_mean_square)
#Do a Global Explanation (local explanation are also possible)
vip_gam <- model_parts(explainer_gam, loss_function = loss_root_mean_square)
plot(vip_gam)
explainer_lm <-
explain_tidymodels(
lm_fit,
data = vip_train,
y = dieoff_train$tpa_max,
label = "lm",
verbose = FALSE
)
vip_lm <- model_parts(explainer_lm, loss_function = loss_root_mean_square)
plot(vip_lm)
lm_fit <- linear_reg(engine = 'lm') %>%
set_mode("regression") %>%
fit(tpa_max ~ ET + Tree + Water_Stress + stand.age + fire_sev + treat, data = dieoff_train) %>%
step_ns(Water_Stress, deg_free = 2)
vip_features <- c('stand.age', 'fire_sev', 'treat', 'Tree', 'ET', 'ppt_climate', 'Water_Stress')
vip_train <- dieoff_train %>% dplyr::select(all_of(vip_features))
explainer_lm <-
explain_tidymodels(
lm_fit,
data = vip_train,
y = dieoff_train$tpa_max,
label = "lm",
verbose = FALSE
)
vip_lm <- model_parts(explainer_lm, loss_function = loss_root_mean_square)
plot(vip_lm)
sev.lm <- lm(data = model.data, formula = tpa_max ~ ET + Tree + Water_Stress + stand.age * treat + fire.sev)
sev.lm <- lm(data = model.data, formula = tpa_max ~ ET + Tree + Water_Stress + stand.age * treat + fire_sev)
summary(sev.lm)
dieoff.relimp <- relaimpo::calc.relimp(sev.lm, rela = TRUE, type = "lmg")
dieoff.relimp
vip_features <- c('stand.age', 'fire_sev', 'treat', 'Tree', 'ET', 'Water_Stress')
vip_train <- dieoff_train %>% dplyr::select(all_of(vip_features))
explainer_lm <-
explain_tidymodels(
lm_fit,
data = vip_train,
y = dieoff_train$tpa_max,
label = "lm",
verbose = FALSE
)
vip_lm <- model_parts(explainer_lm, loss_function = loss_root_mean_square)
plot(vip_lm)
sev.lm <- lm(data = model.data, formula = tpa_max ~ ET + Tree )
summary(sev.lm)
sev.lm <- lm(data = model.data, formula = tpa_max ~ Water_Stress + stand.age * treat + fire_sev)
summary(sev.lm)
dieoff.relimp <- relaimpo::calc.relimp(sev.lm, rela = TRUE, type = "lmg")
dieoff.relimp
sev.lm <- lm(data = model.data, formula = tpa_max ~ ET + Tree + stand.age * treat + fire_sev)
summary(sev.lm)
dieoff.relimp <- relaimpo::calc.relimp(sev.lm, rela = TRUE, type = "lmg")
dieoff.relimp
gam_fit <- gen_additive_mod(engine = 'mgcv') %>%
set_mode("regression") %>%
fit(tpa_max ~ s(Tree,bs='cs') +
s(ET,bs='cs') +
s(Water_Stress,bs='cs') +
stand.age +
fire_sev + treat, data = dieoff_train)
explainer_gam <-
explain_tidymodels(
gam_fit,
data = vip_train,
y = dieoff_train$tpa_max,
label = "gam",
verbose = FALSE
)
#Do a Global Explanation (local explanation are also possible)
vip_gam <- model_parts(explainer_gam, loss_function = loss_root_mean_square)
plot(vip_gam)
fit_workflow_lm <- fit(lm_fit, dieoff_test)
lm_workflow <- workflow() %>%
linear_reg(engine = 'lm') %>%
set_mode("regression") %>%
fit(tpa_max ~ ET + Tree + Water_Stress + stand.age + fire_sev + treat, data = dieoff_train) %>%
step_ns(Water_Stress, deg_free = 2)
lm_workflow <- linear_reg(engine = 'lm') %>%
set_mode("regression") %>%
fit(tpa_max ~ ET + Tree + Water_Stress + stand.age + fire_sev + treat, data = dieoff_train) %>%
step_ns(Water_Stress, deg_free = 2)
lm_fit <- linear_reg(engine = 'lm') %>%
set_mode("regression") %>%
fit(tpa_max ~ ET + Tree + Water_Stress + stand.age + fire_sev + treat, data = dieoff_train) %>%
step_ns(Water_Stress, deg_free = 2)
# fit_lm <- fit(lm_fit, dieoff_test)
dieoff_test$tpa_max.predict <- predict(lm_fit, dieoff_test)$.pred
p6a <- ggplot(data = dieoff_test, mapping = aes(x = tpa_max, y = tpa_max.predict)) +
geom_point() +
geom_abline(slope = 1, linewidth = 2, color = 'blue') +
# geom_text(data = rsq.6c, mapping = aes(x = x, y = y, label = label), size = 3.5, parse = TRUE) +
# geom_text(data = rmse.6c, mapping = aes(x = x, y = y, label = label), size = 3.5, parse = TRUE) +
# xlim(0, 32) + ylim(0, 32) +
theme_bw() +
ylab(expression('Predicted Mortality (trees ha'^-1*')')) + xlab(expression('Observed Mortality (trees ha'^-1*')'))
p6a
lm_fit %>% collect_metrics()
lm_fit
summary(lm_fit)
lm_fit %>% metrics()
View(lm_fit)
