filter(if_else(fire.year.bin == '2001-2010' | fire.year.bin == '1986-2000', count >= 3800, count >= 0)),
mapping = aes(x = date, y = AET.mean, color = fire.year.bin, linetype = fire.year.bin),
size = 1) +
#AET 95% CI
geom_ribbon(data = pixel.data %>%
filter(!is.na(AET) & fire.year <= 2010 & fire.year >= 1920 & stand.age >= 2 & !is.na(fire.year.bin)) %>%
# fire.year %notin% c(1985, 1986, 1987, 1988, 1989, 1990, 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003)) %>%
group_by(date, fire.year.bin) %>%
summarize(AET.mean = mean(AET),
AET.sd = sd(AET), AET.n = n(), count = n()) %>%
filter(if_else(fire.year.bin == '2001-2010' | fire.year.bin == '1986-2000', count >= 3800, count >= 0)),
mapping = aes(ymin=AET.mean - 1.96*(AET.sd / sqrt(AET.n)),
ymax=AET.mean + 1.96*(AET.sd / sqrt(AET.n)),
x = date, fill = fire.year.bin), alpha = 0.3) +
#Do the Formatting
scale_color_brewer(type = 'seq', palette = 'Greens', name = 'Fire Years') +
scale_linetype(name = 'Fire Years') +
scale_fill_brewer(palette = 'Greens') +
guides(color = guide_legend(), linetype = guide_legend(), fill = 'none') +
theme_dark() +
theme(axis.text.y = element_text(size = 8), axis.title.y = element_text(size = 10),
axis.title.x = element_blank(), legend.position = "none", legend.background = element_rect(colour = NA, fill = NA),
legend.key = element_rect(fill = NA), axis.text.x = element_blank(),
legend.title = element_text(size = 8), legend.text = element_text(size = 6)) +
geom_rect(data = data.frame(xmin = as.Date('2011-10-01'), xmax = as.Date('2015-09-30'), ymin = -Inf, ymax = Inf),
fill = "red", alpha = 0.3, mapping = aes(xmin = xmin, xmax = xmax, ymin = ymin, ymax = ymax)) +
xlim(as.Date('1985-08-01'),as.Date('2020-01-01')) +
ylab(expression('AET (mm yr'^-1*')')) + xlab('Year')
p6
#Create the Soil Moisture Panel
p7 <- ggplot() +
# geom_line(mapping = aes(group = .geo), color = 'dark gray', size = 0.2, alpha = 0.2) +
geom_hline(yintercept = 0) + #geom_vline(xintercept = 0, linetype = 'dashed') +
geom_line(data = pixel.data %>%
filter(!is.na(Soil_Moisture) & fire.year <= 2010 & fire.year >= 1920 & stand.age >= 2 & !is.na(fire.year.bin)) %>%
group_by(date, fire.year.bin) %>%
summarize(Soil_Moisture.mean = mean(Soil_Moisture), count = n()) %>%
filter(if_else(fire.year.bin == '2001-2010' | fire.year.bin == '1986-2000', count >= 3800, count >= 0)),
mapping = aes(x = date, y = Soil_Moisture.mean, color = fire.year.bin, linetype = fire.year.bin),
size = 1) +
#Soil Moisture 95% CI
geom_ribbon(data = pixel.data %>%
filter(!is.na(Soil_Moisture) & fire.year <= 2010 & fire.year >= 1920 & stand.age >= 2 & !is.na(fire.year.bin)) %>%
group_by(date, fire.year.bin) %>%
summarize(Soil_Moisture.mean = mean(Soil_Moisture),
Soil_Moisture.sd = sd(Soil_Moisture), Soil_Moisture.n = n(), count = n()) %>%
filter(if_else(fire.year.bin == '2001-2010' | fire.year.bin == '1986-2000', count >= 3800, count >= 0)),
mapping = aes(ymin=Soil_Moisture.mean - 1.96*(Soil_Moisture.sd / sqrt(Soil_Moisture.n)),
ymax=Soil_Moisture.mean + 1.96*(Soil_Moisture.sd / sqrt(Soil_Moisture.n)),
x = date, fill = fire.year.bin), alpha = 0.3) +
#Do the Formatting
scale_color_brewer(type = 'seq', palette = 'Greens', name = 'Fire Years') +
scale_linetype(name = 'Fire Years') +
scale_fill_brewer(palette = 'Greens') +
guides(color = guide_legend(), linetype = guide_legend(), fill = 'none') +
guides(color = guide_legend(), linetype = guide_legend()) +
theme_dark() +
theme(axis.text.y = element_text(size = 8), axis.title.y = element_text(size = 10),
axis.title.x = element_blank(), legend.position = "none", legend.background = element_rect(colour = NA, fill = NA),
legend.key = element_rect(fill = NA), axis.text.x = element_blank(),
legend.title = element_text(size = 8), legend.text = element_text(size = 6)) +
geom_rect(data = data.frame(xmin = as.Date('2011-10-01'), xmax = as.Date('2015-09-30'), ymin = -Inf, ymax = Inf),
fill = "red", alpha = 0.3, mapping = aes(xmin = xmin, xmax = xmax, ymin = ymin, ymax = ymax)) +
xlim(as.Date('1985-08-01'),as.Date('2020-01-01')) +
ylab(expression('Soil Moisture (mm)')) + xlab('Year')
p7
#Create the Water Stress Panel
p8 <- ggplot() +
# geom_line(mapping = aes(group = .geo), color = 'dark gray', size = 0.2, alpha = 0.2) +
geom_hline(yintercept = 0) + #geom_vline(xintercept = 0, linetype = 'dashed') +
geom_line(data = pixel.data %>%
filter(!is.na(Water_Stress) & fire.year <= 2010 & fire.year >= 1920 & stand.age >= 2 & !is.na(fire.year.bin)) %>%
group_by(date, fire.year.bin) %>%
summarize(Water_Stress.mean = mean(Water_Stress), count = n()) %>%
filter(if_else(fire.year.bin == '2001-2010' | fire.year.bin == '1986-2000', count >= 3800, count >= 0)),
mapping = aes(x = date, y = Water_Stress.mean, color = fire.year.bin, linetype = fire.year.bin),
size = 1) +
#Water Stress 95% CI
geom_ribbon(data = pixel.data %>%
filter(!is.na(Water_Stress) & fire.year <= 2010 & fire.year >= 1950 & stand.age >= 2 & !is.na(fire.year.bin)) %>%
group_by(date, fire.year.bin) %>%
summarize(Water_Stress.mean = mean(Water_Stress),
Water_Stress.sd = sd(Water_Stress), Water_Stress.n = n(), count = n()) %>%
filter(if_else(fire.year.bin == '2001-2010' | fire.year.bin == '1986-2000', count >= 3800, count >= 0)),
mapping = aes(ymin=Water_Stress.mean - 1.96*(Water_Stress.sd / sqrt(Water_Stress.n)),
ymax=Water_Stress.mean + 1.96*(Water_Stress.sd / sqrt(Water_Stress.n)),
x = date, fill = fire.year.bin), alpha = 0.3) +
#Do the Formatting
scale_color_brewer(type = 'seq', palette = 'Greens', name = 'Fire Years') +
scale_linetype(name = 'Fire Years') +
scale_fill_brewer(palette = 'Greens') +
guides(color = guide_legend(), linetype = guide_legend(), fill = 'none') +
theme_dark() +
theme(axis.text.y = element_text(size = 8), axis.title.y = element_text(size = 10),
axis.title.x = element_text(size = 10), legend.position = c(0.15, 0.35), legend.background = element_rect(colour = NA, fill = NA),
legend.key = element_rect(fill = NA), axis.text.x = element_text(size = 8),
legend.title = element_text(size = 8), legend.text = element_text(size = 6)) +
geom_rect(data = data.frame(xmin = as.Date('2011-10-01'), xmax = as.Date('2015-09-30'), ymin = -Inf, ymax = Inf),
fill = "red", alpha = 0.3, mapping = aes(xmin = xmin, xmax = xmax, ymin = ymin, ymax = ymax)) +
xlim(as.Date('1985-08-01'),as.Date('2020-01-01')) +
ylab(expression('Water Stress (mm)')) + xlab('Year')
p8
f3 <- ggarrange(p5, p6, p7, p8, ncol = 1, nrow = 4, common.legend = FALSE, heights = c(0.9, 0.9, 0.9, 1), align = "v", labels = c('a)', 'b)', 'c)', 'd)'))
f3
#Save the data
ggsave(filename = 'Fig4_water_stress_stand_age_frap_perimeter_50pt_sample_300m_time_series.png', height=22, width= 16, units = 'cm', dpi=900)
p11 <- ggplot(data = pixel.data %>% dplyr::filter(fire.year <= 2010 & fire.year >= 1920) %>% dplyr::group_by(system.index) %>%
summarize(dTree = Tree_Cover[vi.year == 2019] - Tree_Cover[vi.year == 2015], Water_Stress.4yr = Water_Stress[vi.year == 2015], fire.year.bin = fire.year.bin[vi.year == 2010])) +
geom_point(mapping = aes(x = Water_Stress.4yr, y = dTree, color = fire.year.bin), size = 1) +
geom_smooth(method = 'lm', mapping = aes(x = Water_Stress.4yr, y = dTree, color = fire.year.bin , linetype = fire.year.bin)) +
stat_cor( mapping = aes(x = Water_Stress.4yr, y = dTree, color = fire.year.bin)) +
theme_bw()
p11
ggsave(filename = 'Fig6_water_stress_stand_age_frap_50pt_sample_300m.png', height=16, width= 18, units = 'cm', dpi=900)
p12 <- ggplot(data = pixel.data %>% dplyr::filter(fire.year <= 2010 & fire.year >= 1920) %>% dplyr::group_by(system.index) %>%
summarize(dTree = Tree_Cover[vi.year == 2019] - Tree_Cover[vi.year == 2015], Water_Stress = Water_Stress[vi.year == 2015], SPI48 = SPI48[vi.year == 2015], fire.year.bin = fire.year.bin[vi.year == 2010])) +
geom_point(mapping = aes(x = SPI48, y = dTree, color = fire.year.bin), size = 1) +
geom_smooth(method = 'lm', mapping = aes(x = SPI48, y = dTree, color = fire.year.bin , linetype = fire.year.bin)) +
stat_cor( mapping = aes(x = SPI48, y = dTree, color = fire.year.bin)) +
theme_bw()
p12
ggsave(filename = 'Fig7_SPI48_stand_age_frap_50pt_sample_300m.png', height=16, width= 18, units = 'cm', dpi=900)
pixel.data$PrET <- pixel.data$ppt - pixel.data$AET
p13 <- ggplot(data = pixel.data %>% dplyr::filter(fire.year <= 2010 & fire.year >= 1920 ) %>% dplyr::group_by(system.index) %>%
summarize(dTree = Tree_Cover[vi.year == 2019] - Tree_Cover[vi.year == 2015], Water_Stress = Water_Stress[vi.year == 2015], SPI48 = SPI48[vi.year == 2015], PrET.4yr = sum(PrET[vi.year %in% c(2012,2013,2014,2015)]), fire.year.bin = fire.year.bin[vi.year == 2010])) +
geom_point(mapping = aes(x = PrET.4yr, y = dTree, color = fire.year.bin), size = 1) +
geom_smooth(method = 'lm', mapping = aes(x = PrET.4yr, y = dTree, color = fire.year.bin , linetype = fire.year.bin)) +
stat_cor(mapping = aes(x = PrET.4yr, y = dTree, color = fire.year.bin) ) +
theme_bw()
p13
ggsave(filename = 'Fig8_PrET4yr_stand_age_frap_50pt_sample_300m.png', height=16, width= 18, units = 'cm', dpi=900)
# pixel.data %>% dplyr::filter(!is.na(stand.age) & stand.age >= 0 & fire.year <= 2010 & fire.year >= 1910) %>%
#   dplyr::group_by(system.index) %>%
#   summarize(dTree = Tree_Cover[vi.year == 2016] - Tree_Cover[vi.year == 2012], stand.age = stand.age[vi.year == 2010], SPI48 = SPI48[vi.year == 2015]) %>%
#   group_by(stand.age) %>%
#   summarize(dTree = mean(dTree), dTree.n = n(), dTree.sd = sd(dTree))
#Years since fire versus dTree
p14 <- ggplot() +
#The full data
geom_point(data = pixel.data %>% dplyr::filter(!is.na(stand.age) & stand.age >= 0 & fire.year <= 2010 & fire.year >= 1920) %>%
dplyr::group_by(system.index) %>%
summarize(dTree = (Tree_Cover[vi.year == 2019] - Tree_Cover[vi.year == 2015]), stand.age = stand.age[vi.year == 2010], Water_Stress = Water_Stress[vi.year == 2015]),
mapping = aes(x = stand.age, y = dTree), size = 0.5, alpha = 0.3, color = 'gray') +
#The summarized data
geom_smooth(data = pixel.data %>% dplyr::filter(!is.na(stand.age) & stand.age >= 0 & fire.year <= 2010 & fire.year >= 1920) %>%
dplyr::group_by(system.index) %>%
summarize(dTree = (Tree_Cover[vi.year == 2019] - Tree_Cover[vi.year == 2015]), stand.age = stand.age[vi.year == 2010], Water_Stress = Water_Stress[vi.year == 2015]),
method = 'lm', mapping = aes(x = stand.age, y = dTree)) +
stat_cor(data = pixel.data %>% dplyr::filter(!is.na(stand.age) & stand.age >= 0 & fire.year <= 2010 & fire.year >= 1920) %>%
dplyr::group_by(system.index) %>%
summarize(dTree = (Tree_Cover[vi.year == 2019] - Tree_Cover[vi.year == 2015]), stand.age = stand.age[vi.year == 2010], Water_Stress = Water_Stress[vi.year == 2015]),
mapping = aes(x = stand.age, y = dTree) ) +
geom_point(data = pixel.data %>% dplyr::filter(!is.na(stand.age) & stand.age >= 0 & fire.year <= 2010 & fire.year >= 1920) %>%
dplyr::group_by(system.index) %>%
summarize(dTree = (Tree_Cover[vi.year == 2019] - Tree_Cover[vi.year == 2015]), stand.age = stand.age[vi.year == 2010], Water_Stress = Water_Stress[vi.year == 2015]) %>%
group_by(stand.age) %>%
summarize(dTree = mean(dTree), dTree.n = n(), dTree.sd = sd(dTree)),
mapping = aes(x = stand.age, y = dTree), size = 2) + ylim(-25, 25) +
# geom_smooth(method = 'lm', mapping = aes(x = stand.age, y = dTree), linetype = 'dotdash', size = 2) +
# stat_cor(mapping = aes(x = stand.age, y = dTree)) +
theme_bw() #+ facet_grid(. ~ lf_evt_2001)
p14
ggsave(filename = 'Fig9_dTree_stand_age_wildfire_frap_50pt_sample_300m.png', height=16, width= 18, units = 'cm', dpi=900)
p15 <- ggplot() +
geom_point(data = pixel.data %>% dplyr::filter(!is.na(stand.age) & stand.age >= 0 & fire.year <= 2010 & fire.year >= 1920) %>%
dplyr::group_by(system.index) %>%
summarize(tpa_max = max(tpa_max[vi.year %in% c(2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019)], na.rm = TRUE), stand.age = stand.age[vi.year == 2010], SPI48 = SPI48[vi.year == 2015]),
mapping = aes(x = stand.age, y = tpa_max), size = 0.5, alpha = 0.3, color = 'gray') +
geom_smooth(data = pixel.data %>% dplyr::filter(!is.na(stand.age) & stand.age >= 0 & fire.year <= 2010 & fire.year >= 1920) %>%
dplyr::group_by(system.index) %>%
summarize(tpa_max = max(tpa_max[vi.year %in% c(2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019)], na.rm = TRUE), stand.age = stand.age[vi.year == 2010], SPI48 = SPI48[vi.year == 2015]),
method = 'lm', mapping = aes(x = stand.age, y = tpa_max)) +
stat_cor(data = pixel.data %>% dplyr::filter(!is.na(stand.age) & stand.age >= 0 & fire.year <= 2010 & fire.year >= 1920) %>%
dplyr::group_by(system.index) %>%
summarize(tpa_max = max(tpa_max[vi.year %in% c(2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019)], na.rm = TRUE), stand.age = stand.age[vi.year == 2010], SPI48 = SPI48[vi.year == 2015]),
mapping = aes(x = stand.age, y = tpa_max), color = 'blue') +
geom_point(data = pixel.data %>% dplyr::filter(!is.na(stand.age) & stand.age >= 0 & fire.year <= 2010 & fire.year >= 1920) %>%
dplyr::group_by(system.index) %>%
summarize(tpa_max = max(tpa_max[vi.year %in% c(2012, 2013, 2014, 2015, 2016, 2017, 2017, 2018, 2019)], na.rm = TRUE), stand.age = stand.age[vi.year == 2010], SPI48 = SPI48[vi.year == 2015]) %>%
group_by(stand.age) %>%
summarize(tpa_max = mean(tpa_max), tpa_max.n = n(), tpa_max.sd = sd(tpa_max)),
mapping = aes(x = stand.age, y = tpa_max), size = 2) +
# geom_smooth(data = pixel.data %>% dplyr::filter(!is.na(stand.age) & stand.age >= 0 & fire.year <= 2010 & fire.year >= 1920) %>%
#              dplyr::group_by(system.index) %>%
#              summarize(tpa_max = max(tpa_max[vi.year %in% c(2012, 2013, 2014, 2015, 2016, 2017, 2017, 2018, 2019)], na.rm = TRUE), stand.age = stand.age[vi.year == 2010], SPI48 = SPI48[vi.year == 2015]) %>%
#              group_by(stand.age) %>%
#              summarize(tpa_max = mean(tpa_max), tpa_max.n = n(), tpa_max.sd = sd(tpa_max)),
#            method = 'lm', mapping = aes(x = stand.age, y = tpa_max), size = 2, color = 'black', linetype = 'dash') +
# stat_cor(data = pixel.data %>% dplyr::filter(!is.na(stand.age) & stand.age >= 0 & fire.year <= 2010 & fire.year >= 1920) %>%
#              dplyr::group_by(system.index) %>%
#              summarize(tpa_max = max(tpa_max[vi.year %in% c(2012, 2013, 2014, 2015, 2016, 2017, 2017, 2018, 2019)], na.rm = TRUE), stand.age = stand.age[vi.year == 2010], SPI48 = SPI48[vi.year == 2015]) %>%
#              group_by(stand.age) %>%
#              summarize(tpa_max = mean(tpa_max), tpa_max.n = n(), tpa_max.sd = sd(tpa_max)),
#            mapping = aes(x = stand.age, y = tpa_max), color = 'black') +
# geom_smooth(method = 'lm', mapping = aes(x = stand.age, y = dTree), linetype = 'dotdash', size = 2) +
# stat_cor(mapping = aes(x = stand.age, y = dTree)) +
theme_bw() #+ facet_grid(. ~ lf_evt_2001)
p15
ggsave(filename = 'Fig10_dTree_stand_age_wildfire_0pt5pct_4groups.png', height=16, width= 18, units = 'cm', dpi=900)
p16 <- ggplot(data = pixel.data %>% dplyr::filter(!is.na(stand.age) & stand.age >= 0 & fire.year <= 2010 & fire.year >= 1920) %>%
dplyr::group_by(system.index, fire.year.bin) %>%
summarize(dTree = (Tree_Cover[vi.year == 2019] - Tree_Cover[vi.year == 2015]), stand.age = stand.age[vi.year == 2010], Tree = Tree_Cover[vi.year == 2015])) +
geom_point(mapping = aes(x = Tree, y = dTree), size = 0.5, alpha = 0.3, color = 'black') +
xlab('Tree Cover (%)') + ylab('dTree Cover (%)') +
theme_bw() + facet_grid(. ~ fire.year.bin)
p16
ggsave(filename = 'Fig11_dTree_Tree_frap_50pts_300m.png', height=16, width= 18, units = 'cm', dpi=900)
p <- c("RSQLite","dbplyr","ggplot2","dplyr","tidyr", "ggpubr", "RColorBrewer",
'gt', 'gtsummary', 'webshot', 'kableExtra', 'broom')
# If necessary: install/update packages
# install.packages('rlang',repo='https://cloud.r-project.org/')
# library("agricolae")
# Load packages
lapply(p,require,character.only=TRUE)
#Set working directory
#setwd("/C/Users/Carl/mystuff/Goulden_Lab/Forest_Dieback/dieback/figure_set/field_data")
#cd /C/Users/Carl/mystuff/Goulden_Lab/Forest_Dieback/dieback/figure_set/field_data
#cd /C/Users/can02/mystuff/fireDieoff/FIA
#Command for calling the script in the command line: R < stand_age_dieoff.r --vanilla
#INstalling packages: install.packages('RColorBrewer',repo='https://cran.cnr.berkeley.edu/')
setwd('C:/Users/can02/mystuff/fireDieoff/FIA')
#Add Data Sets
sql_dir <- 'D:\\Large_Files\\FIA\\SQLite_FIADB_CA\\2019_version' #Download from FIA DataMart
fiaCA <- file.path(sql_dir, 'FIADB_CA.db')
sqlite.driver <- dbDriver("SQLite")
db <- dbConnect(sqlite.driver,
dbname = fiaCA)
#Add extension functions, allows more math functions
initExtension(db)
# summary(db)
#Query for FIA live trees, 2014-2019
q1 <- dbSendQuery(db, "SELECT
t.tree, -- tree identified code
(t.carbon_ag * 2)*(t.tpa_unadj) live_biomass, -- biomass (lbs) of tree
t.tpa_unadj count, --trees/acre
t.dia, -- DBH in inches
t.ht, --Total live tree height in feet
t.actualht, --The measure height in feet
t.agentcd, --tree damage
t.mortyr, --mortality year
t.plot, t.statuscd, t.invyr, r.common_name, t.spcd, c.fortypcd,
c.fldtypcd, rft.meaning, c.stdage, c.fldage, t.totage, t.bhage,
c.dstrbcd1, c.dstrbyr1
FROM
cond c,
plot p,
tree t, -- tree table must be included for tree-level estimates
ref_species r,
ref_forest_type rft
WHERE p.cn = c.plt_cn
AND t.plt_cn = c.plt_cn
AND t.condid = c.condid
AND c.cond_status_cd = 1 --2 means non-forest
--AND t.statuscd = 1 --1 means live trees, 2 means dead trees
AND t.spcd = r.spcd
AND t.dia >= 1.0 -- additional where_clause from ref_pop_attribute table
AND rft.value = c.fldtypcd
AND (P.ECOSUBCD = 'M261Ep' OR P.ECOSUBCD = 'M261Eq' OR P.ECOSUBCD = 'M261Eu' OR P.ECOSUBCD = 'M261Er' OR P.ECOSUBCD = 'M261Eo' OR P.ECOSUBCD = 'M261Es') --South Sierra Nevada P.ECOSUBCD = 'M262Bb' OR P.ECOSUBCD = 'M262Ba' OR
AND (c.dstrbcd1 = 0 OR c.dstrbcd1 = 10 OR c.dstrbcd1 = 11 OR c.dstrbcd1 = 12 OR c.dstrbcd1 = 54 OR c.dstrbcd1 = 70) -- No Fires OR c.dstrbcd1 = 30 OR c.dstrbcd1 = 31 OR c.dstrbcd1 = 32)
")
#DSTRBCD1 == 30, 31, 32 reference fires
live <- dbFetch(q1, n = -1)
# dbDisconnect(db)
summary(live)
#Convert per acre to per hectare
live$count <- live$count * 2.47105 # Convert to per hectare
live$DIA <- live$DIA * (2.54) #Convert to centimeters
live$basal_area <- (((live$DIA / 2)^2) * pi)*(1/10000) * live$count
#Calculate the Quintiles of stand age
stdage.q <- as.data.frame(unname(quantile(live$STDAGE, prob = seq(0,1, 1/5), type = 3, na.rm = TRUE)))
# precip.q
colnames(stdage.q) <- 'STDAGE'
stdage.q$'Quintile' <- c(0.0, 0.2, 0.4, 0.6, 0.8, 1.0)
# temp.q
stdage.q
#Bin data by Stand Age. Bins are quintiles.
live <- live %>% mutate(stdage.bin = case_when(
STDAGE >= stdage.q %>% filter(Quintile == 0.8) %>% dplyr::select(STDAGE) %>% as.numeric() ~ '210+',
STDAGE >= stdage.q %>% filter(Quintile == 0.6) %>% dplyr::select(STDAGE) %>% as.numeric() &
STDAGE < stdage.q %>% filter(Quintile == 0.8) %>% dplyr::select(STDAGE) %>% as.numeric() ~ '160-209',
STDAGE >= stdage.q %>% filter(Quintile == 0.4) %>% dplyr::select(STDAGE) %>% as.numeric() &
STDAGE < stdage.q %>% filter(Quintile == 0.6) %>% dplyr::select(STDAGE) %>% as.numeric() ~ '120-159',
STDAGE >= stdage.q %>% filter(Quintile == 0.2) %>% dplyr::select(STDAGE) %>% as.numeric() &
STDAGE < stdage.q %>% filter(Quintile == 0.4) %>% dplyr::select(STDAGE) %>% as.numeric() ~ '93-119',
STDAGE < stdage.q %>% filter(Quintile == 0.2) %>% dplyr::select(STDAGE) %>% as.numeric() ~ '0-92'))
#Order the stand age bins
live$stdage.bin = with(live, factor(stdage.bin, levels = c('0-92','93-119','120-159','160-209','210+')))
# summary(live)
#Replace MORTYR that is NA with INVYR
live[is.na(live$MORTYR), ]$MORTYR <- live[is.na(live$MORTYR), ]$INVYR
# live%>% dplyr::filter(stdage.bin == '138-154')
#Calculate the Quintiles of tree age (breast height age)
bhage.q <- as.data.frame(unname(quantile(live$BHAGE, prob = seq(0,1, 1/5), type = 3, na.rm = TRUE)))
# precip.q
colnames(bhage.q) <- 'BHAGE'
bhage.q$'Quintile' <- c(0.0, 0.2, 0.4, 0.6, 0.8, 1.0)
# temp.q
bhage.q
# live %>% filter(!is.na(BHAGE))
#Bin data by Stand Age. Bins are quintiles.
live <- live %>% filter(!is.na(BHAGE)) %>% mutate(bhage.bin = case_when(
BHAGE >= bhage.q %>% filter(Quintile == 0.8) %>% dplyr::select(BHAGE) %>% as.numeric() ~ '171+',
BHAGE >= bhage.q %>% filter(Quintile == 0.6) %>% dplyr::select(BHAGE) %>% as.numeric() &
BHAGE < bhage.q %>% filter(Quintile == 0.8) %>% dplyr::select(BHAGE) %>% as.numeric() ~ '110-170',
BHAGE >= bhage.q %>% filter(Quintile == 0.4) %>% dplyr::select(BHAGE) %>% as.numeric() &
BHAGE < bhage.q %>% filter(Quintile == 0.6) %>% dplyr::select(BHAGE) %>% as.numeric() ~ '78-109',
BHAGE >= bhage.q %>% filter(Quintile == 0.2) %>% dplyr::select(BHAGE) %>% as.numeric()  &
BHAGE < bhage.q %>% filter(Quintile == 0.4) %>% dplyr::select(BHAGE) %>% as.numeric() ~ '57-77',
BHAGE < bhage.q %>% filter(Quintile == 0.2) %>% dplyr::select(BHAGE) %>% as.numeric() ~ '6-56'))
#Order the stand age bins
live$bhage.bin = with(live, factor(bhage.bin, levels = c('6-56','57-77','78-109','110-170','171+')))
live %>% filter(!is.na(MORTYR)) %>% select(PLOT) %>% unique() %>% count()
test <- live %>% select(PLOT, INVYR) %>% group_by(PLOT, INVYR) %>% summarize(count = n())
total <- live %>% group_by(INVYR, PLOT) %>% summarize(count = n(), tpa.all = sum(count), basal_area.all = sum(basal_area), STDAGE = median(STDAGE))
total
#There is a slightly different result when using INVYR instead of MORTYR to calculate annual mortality
dead <- live %>% filter(STATUSCD == 2) %>% group_by(PLOT, INVYR) %>% summarize(count.dead = n(), tpa.dead = sum(count), basal_area.dead = sum(basal_area))
# dead <- dead %>% mutate(INVYR = MORTYR)
dead
join <- left_join(total, dead, by = c('PLOT', 'INVYR'))
#Replace the NAs with 0s
join <- join %>% dplyr::mutate(basal_area.dead = replace(basal_area.dead, is.na(basal_area.dead), 0),
count.dead = replace(count.dead, is.na(count.dead), 0),
tpa.dead = replace(tpa.dead, is.na(tpa.dead), 0))
stdage.q <- as.data.frame(unname(quantile(join$STDAGE, prob = seq(0,1, 1/5), type = 3, na.rm = TRUE)))
# precip.q
colnames(stdage.q) <- 'STDAGE'
stdage.q$'Quintile' <- c(0.0, 0.2, 0.4, 0.6, 0.8, 1.0)
# temp.q
stdage.q
#Bin data by Stand Age. Bins are quintiles.
join <- join %>% mutate(stdage.bin = case_when(
STDAGE >= stdage.q %>% filter(Quintile == 0.8) %>% dplyr::select(STDAGE) %>% as.numeric() ~ '210+',
STDAGE >= stdage.q %>% filter(Quintile == 0.6) %>% dplyr::select(STDAGE) %>% as.numeric() &
STDAGE < stdage.q %>% filter(Quintile == 0.8) %>% dplyr::select(STDAGE) %>% as.numeric() ~ '160-209',
STDAGE >= stdage.q %>% filter(Quintile == 0.4) %>% dplyr::select(STDAGE) %>% as.numeric() &
STDAGE < stdage.q %>% filter(Quintile == 0.6) %>% dplyr::select(STDAGE) %>% as.numeric() ~ '120-159',
STDAGE >= stdage.q %>% filter(Quintile == 0.2) %>% dplyr::select(STDAGE) %>% as.numeric() &
STDAGE < stdage.q %>% filter(Quintile == 0.4) %>% dplyr::select(STDAGE) %>% as.numeric() ~ '93-119',
STDAGE < stdage.q %>% filter(Quintile == 0.2) %>% dplyr::select(STDAGE) %>% as.numeric() ~ '0-92'))
join
#Order the stand age bins
join$stdage.bin = with(join, factor(stdage.bin, levels = c('0-92','93-119','120-159',
'160-209','210+')))
join %>% group_by(stdage.bin) %>% summarize(basal_area = mean(basal_area.dead), count = n())
# join %>% filter(is.na(stdage.bin))
# join
# # live.plot
# bhage.q <- as.data.frame(unname(quantile(live$BHAGE, prob = seq(0,1, 1/5), type = 3, na.rm = TRUE)))
# live
#Mortality binned by stand age
#Add a new year column
# join <- join %>% mutate(year = case_when(is.na(MORTYR) ~ INVYR, !is.na(MORTYR) ~ MORTYR))
join <- join %>% mutate(age.bin = case_when(
STDAGE >= stdage.q %>% filter(Quintile == 0.8) %>% dplyr::select(STDAGE) %>% as.numeric() ~ '210+',
STDAGE >= stdage.q %>% filter(Quintile == 0.6) %>% dplyr::select(STDAGE) %>% as.numeric() &
STDAGE < stdage.q %>% filter(Quintile == 0.8) %>% dplyr::select(STDAGE) %>% as.numeric() ~ '160-209',
STDAGE >= stdage.q %>% filter(Quintile == 0.4) %>% dplyr::select(STDAGE) %>% as.numeric() &
STDAGE < stdage.q %>% filter(Quintile == 0.6) %>% dplyr::select(STDAGE) %>% as.numeric() ~ '120-159',
STDAGE < 120 & STDAGE >= 93 ~ '93-119',
STDAGE >= 30 & STDAGE < 93 ~ '30-92',
STDAGE < 29 ~ '0-29'))
#Order the stand age bins
join$age.bin = with(join, factor(age.bin, levels = c('0-29', '30-92', '93-119','120-159',
'160-209','210+')))
summary(join)
#Region white counts of dead and live trees
f1<- ggplot() + #geom_line(data = join %>% group_by(INVYR) %>% summarize(BA.all = mean(basal_area.all)), mapping = aes(x = INVYR, y = BA.all), color = 'green') +
#Mean Die-off
geom_line(data = join %>% filter(!is.na(stdage.bin)) %>% group_by(INVYR) %>% summarize(BA.dead = mean(basal_area.dead)), mapping = aes(x = INVYR, y = BA.dead), color = 'black', size = 1) +
#95% CI Die-off
geom_ribbon(data = join %>% filter(!is.na(stdage.bin)) %>%
group_by(INVYR) %>%
summarize(BA.dead = mean(basal_area.dead),
BA.dead.sd = sd(basal_area.dead), BA.n = n()),
mapping = aes(ymin=BA.dead - 1.96*(BA.dead.sd / sqrt(BA.n)),
ymax=BA.dead + 1.96*(BA.dead.sd / sqrt(BA.n)),
x = INVYR), alpha = 0.3) +
theme_bw() +
theme(axis.title.x = element_blank(), axis.text.x = element_blank()) +
xlab('Year') + ylab(expression('Basal Area (m'^2*' ha'^-1*')'))
f1
f1a <- ggplot() + #geom_line(data = join %>% group_by(INVYR) %>% summarize(BA.all = mean(basal_area.all)), mapping = aes(x = INVYR, y = BA.all), color = 'green') +
geom_line(data = join %>% filter(!is.na(stdage.bin)) %>% group_by(INVYR) %>% summarize(BA.dead = mean(basal_area.dead), BA.n = n()), mapping = aes(x = INVYR, y = BA.n), color = 'black', size = 1) +
theme_bw() +
theme(axis.title.x = element_blank(), axis.text.x = element_blank()) +
xlab('Year') + ylab('# Plots') + ylim(0, 60)
f1a
join %>% filter(STDAGE <= 10) %>% count()
f1b <- ggplot() + #geom_line(data = join %>% group_by(INVYR) %>% summarize(BA.all = mean(basal_area.all)), mapping = aes(x = INVYR, y = BA.all), color = 'green') +
#The data mean
geom_line(data = join %>% filter(!is.na(stdage.bin)) %>%
group_by(INVYR) %>% summarize(BA.all = mean(basal_area.all), BA.n = n()), mapping = aes(x = INVYR, y = BA.all), color = 'black', size = 1) +
#The error bars
geom_ribbon(data = join %>% filter(!is.na(stdage.bin)) %>%
group_by(INVYR) %>%
summarize(BA.mean = mean(basal_area.all),
BA.sd = sd(basal_area.all), BA.n = n()),
mapping = aes(ymin=BA.mean - 1.96*(BA.sd / sqrt(BA.n)),
ymax=BA.mean + 1.96*(BA.sd / sqrt(BA.n)),
x = INVYR), alpha = 0.3) +
xlab('Year') + ylab(expression('Basal Area (m'^2*' ha'^-1*')')) + theme_bw()
f1b
cf1 <- ggarrange(f1, f1a, f1b, ncol = 1, nrow = 3, common.legend = FALSE, heights = c(0.9, 0.9, 1), align = "v", labels = c('a)', 'b)', 'c)'))
cf1
ggsave(filename = 'Fig1_mortality_time_series_FIA.png', height=18, width= 10, units = 'cm', dpi=900)
#Stand Age Histogram with data binned by stand age
f2 <- ggplot() + geom_histogram(data = (join %>% filter(!is.na(STDAGE)) %>% select(STDAGE)), mapping = aes(x =STDAGE), bins = 60) +
geom_vline(xintercept = (stdage.q %>% filter(Quintile == 0.2) %>% dplyr::select(STDAGE) %>% as.numeric()), color = 'black') +
geom_vline(xintercept = (stdage.q %>% filter(Quintile == 0.4) %>% dplyr::select(STDAGE) %>% as.numeric()), color = 'black') +
geom_vline(xintercept = (stdage.q %>% filter(Quintile == 0.6) %>% dplyr::select(STDAGE) %>% as.numeric()), color = 'black') +
geom_vline(xintercept = (stdage.q %>% filter(Quintile == 0.8) %>% dplyr::select(STDAGE) %>% as.numeric()), color = 'black') +
theme_bw() + xlab('Stand Age') + ylab('Count')
f2
ggsave(filename = 'Fig2_Stand_Age_Quintiles_historgram.png', height=6, width= 10, units = 'cm', dpi=900)
#For some reason Right now this is showing the youngest stands with the most die-off. However, the youngest stands are pretty old
f3<- ggplot() +
#Do the mean line
geom_line(data = join %>% filter(!is.na(stdage.bin)) %>%
group_by(INVYR, stdage.bin) %>%
summarize(BA.dead = mean(basal_area.dead), BA.n = n()),
mapping = aes(x = INVYR, y = BA.dead, color = stdage.bin, linetype = stdage.bin), size = 1) +
#Do the 95% CI Ribbon
geom_ribbon(data = join %>% filter(!is.na(stdage.bin)) %>%
group_by(INVYR, stdage.bin) %>%
summarize(BA.dead = mean(basal_area.dead), BA.n = n(), BA.dead.sd = sd(basal_area.dead)),
mapping = aes(x = INVYR, ymin=BA.dead - 1.96*(BA.dead.sd / sqrt(BA.n)),
ymax=BA.dead + 1.96*(BA.dead.sd / sqrt(BA.n)), fill = stdage.bin), alpha = 0.3) +
xlab('Year') + ylab(expression('Mortality (m'^2*' ha'^-1*')')) + theme_bw()
f3
ggsave(filename = 'Fig3_stand_age_mortality_time_series_FIA.png', height=6, width= 15, units = 'cm', dpi=900)
summary(join)
f3a<- ggplot() +
#Do the mean line
geom_line(data = join %>% filter(!is.na(stdage.bin)) %>%
group_by(INVYR, stdage.bin) %>%
summarize(BA.dead = mean(basal_area.dead), BA.n = n()),
mapping = aes(x = INVYR, y = BA.n, color = stdage.bin, linetype = stdage.bin), size = 1) +
#Do the 95% CI Ribbon
# geom_ribbon(data = join %>% filter(!is.na(stdage.bin)) %>%
#               group_by(INVYR, stdage.bin) %>%
#               summarize(BA.dead = mean(basal_area.dead), BA.n = n(), BA.dead.sd = sd(basal_area.dead)),
#             mapping = aes(x = INVYR, ymin=BA.dead - 1.96*(BA.dead.sd / sqrt(BA.n)),
#                           ymax=BA.dead + 1.96*(BA.dead.sd / sqrt(BA.n)), fill = stdage.bin), alpha = 0.3) +
xlab('Year') + ylab('Count') + theme_bw()
f3a
ggsave(filename = 'Fig3a_stand_age_count_time_series_FIA.png', height=6, width= 15, units = 'cm', dpi=900)
#For some reason Right now this is showing the youngest stands with the most die-off. However, the youngest stands are pretty old
f4<- ggplot() + #geom_line(data = live %>% filter(STATUSCD == 1  & !is.na(STDAGE)) %>% group_by(INVYR, stdage.bin) %>% summarize(Live.count = sum(count)), mapping = aes(x = INVYR, y = Live.count), color = 'green') +
geom_line(data = join %>% filter(!is.na(stdage.bin)) %>% group_by(INVYR, stdage.bin) %>% summarize(tpa.dead = mean(tpa.dead)), mapping = aes(x = INVYR, y = tpa.dead, color = stdage.bin, linetype = stdage.bin), size = 1) +
xlab('Year') + ylab(expression('Mortality (trees ha'^-1*')')) + theme_bw()# + facet_wrap(~stdage.bin, ncol = 5)
# %>% filter(!is.na(stdage.bin))
f4
ggsave(filename = 'Fig4_stand_age_count_mortality_time_series_FIA.png', height=6, width= 15, units = 'cm', dpi=900)
f5<- ggplot() + #geom_line(data = live %>% filter(STATUSCD == 1  & !is.na(STDAGE)) %>% group_by(INVYR, stdage.bin) %>% summarize(Live.count = sum(count)), mapping = aes(x = INVYR, y = Live.count), color = 'green') +
geom_line(data = join %>% filter(!is.na(age.bin)) %>% group_by(INVYR, age.bin) %>% summarize(BA.dead = mean(basal_area.dead)), mapping = aes(x = INVYR, y = BA.dead, color = age.bin, linetype = age.bin), size = 1) +
xlab('Year') + ylab(expression('Mortality (m'^2*' ha'^-1*')')) + theme_bw()# + facet_wrap(~stdage.bin, ncol = 5)
# %>% filter(!is.na(stdage.bin))
f5
ggsave(filename = 'Fig5_stand_age_basal_area_mortality_time_series_FIA.png', height=6, width= 15, units = 'cm', dpi=900)
p6 <- ggplot() + geom_point(data = join %>% filter(INVYR %in% c(2013,2014,2015,2016,2017,2018,2019) & STDAGE <= 250), mapping = aes(x = STDAGE, y = basal_area.all)) +
theme_bw()
p6
p7 <- ggplot() + geom_point(data = join %>% filter(INVYR %in% c(2013,2014,2015,2016,2017,2018,2019) & STDAGE <= 250), mapping = aes(x = STDAGE, y = tpa.all)) +
theme_bw()
p7
p8 <- ggplot() + geom_point(data = join %>% filter(INVYR %in% c(2013,2014,2015,2016,2017,2018,2019) & STDAGE <= 250), mapping = aes(x = STDAGE, y = basal_area.dead)) +
theme_bw() #+ geom_smooth(data = join %>% filter(INVYR %in% c(2013,2014,2015,2016,2017,2018,2019)), mapping = aes(x = STDAGE, y = basal_area.dead), method = 'lm')
p8
p9 <- ggplot() + geom_point(data = join %>% filter(INVYR %in% c(2013,2014,2015,2016,2017,2018,2019) & STDAGE <= 250), mapping = aes(x = basal_area.all, y = basal_area.dead)) +
theme_bw()
p9
fig2 <- ggarrange(p6, p7, p8, p9, ncol = 2, nrow = 2, common.legend = FALSE, align = "v", labels = c('a)', 'b)', 'c)', 'd)'))
fig2
ggsave(filename = 'Fig6_mortality_standage_FIA.png', height=18, width= 18, units = 'cm', dpi=900)
join %>% filter(INVYR %in% c(2013,2014,2015,2016,2017,2018,2019) & !is.na(STDAGE))
join$stdage.bin <- as.factor(join$stdage.bin)
#Calculate the Quintiles of stand age
std.q <- as.data.frame(unname(quantile((join %>% filter(INVYR %in% c(2015,2016,2017,2018,2019) & !is.na(STDAGE)))$STDAGE, prob = seq(0,1, 1/20), type = 3, na.rm = TRUE)))
# precip.q
colnames(std.q) <- 'STDAGE'
std.q$'Quintile' <- c(0.0, 0.05, 0.1, 0.15, 0.2, 0.25, 0.3, 0.35, 0.4, 0.45, 0.5, 0.55, 0.6, 0.65, 0.7, 0.75, 0.8, 0.85, 0.9, 0.95, 1.0)
# temp.q
std.q
join <- join %>% mutate(std.bin = case_when(
STDAGE >= std.q %>% filter(Quintile == 0.9) %>% dplyr::select(STDAGE) %>% as.numeric() ~ '265+',
STDAGE >= std.q %>% filter(Quintile == 0.8) %>% dplyr::select(STDAGE) %>% as.numeric() &
STDAGE < std.q %>% filter(Quintile == 0.9) %>% dplyr::select(STDAGE) %>% as.numeric() ~ '215-264',
STDAGE >= std.q %>% filter(Quintile == 0.7) %>% dplyr::select(STDAGE) %>% as.numeric() &
STDAGE < std.q %>% filter(Quintile == 0.8) %>% dplyr::select(STDAGE) %>% as.numeric() ~ '190-214',
STDAGE >= std.q %>% filter(Quintile == 0.6) %>% dplyr::select(STDAGE) %>% as.numeric() &
STDAGE < std.q %>% filter(Quintile == 0.7) %>% dplyr::select(STDAGE) %>% as.numeric() ~ '165-189',
STDAGE >= std.q %>% filter(Quintile == 0.5) %>% dplyr::select(STDAGE) %>% as.numeric() &
STDAGE < std.q %>% filter(Quintile == 0.6) %>% dplyr::select(STDAGE) %>% as.numeric() ~ '155-164',
STDAGE >= std.q %>% filter(Quintile == 0.4) %>% dplyr::select(STDAGE) %>% as.numeric() &
STDAGE < std.q %>% filter(Quintile == 0.5) %>% dplyr::select(STDAGE) %>% as.numeric() ~ '130-154',
STDAGE >= std.q %>% filter(Quintile == 0.3) %>% dplyr::select(STDAGE) %>% as.numeric() &
STDAGE < std.q %>% filter(Quintile == 0.4) %>% dplyr::select(STDAGE) %>% as.numeric() ~ '114-129',
STDAGE >= std.q %>% filter(Quintile == 0.2) %>% dplyr::select(STDAGE) %>% as.numeric() &
STDAGE < std.q %>% filter(Quintile == 0.3) %>% dplyr::select(STDAGE) %>% as.numeric() ~ '105-113',
STDAGE >= std.q %>% filter(Quintile == 0.1) %>% dplyr::select(STDAGE) %>% as.numeric() &
STDAGE < std.q %>% filter(Quintile == 0.2) %>% dplyr::select(STDAGE) %>% as.numeric() ~ '85-104',
STDAGE >= std.q %>% filter(Quintile == 0.05) %>% dplyr::select(STDAGE) %>% as.numeric() &
STDAGE < std.q %>% filter(Quintile == 0.1) %>% dplyr::select(STDAGE) %>% as.numeric() ~ '65-84',
STDAGE < std.q %>% filter(Quintile == 0.05) %>% dplyr::select(STDAGE) %>% as.numeric() ~ '0-64'))
#Order the stand age bins
join$std.bin = with(join, factor(std.bin, levels = c('0-64', '65-84', '85-104', '105-113', '114-129', '130-154',  '155-164', '165-189','190-214', '215-264','265+')))
# summary(live)
p10 <- ggplot(data = join %>% filter(INVYR %in% c(2015,2016,2017,2018,2019) & !is.na(STDAGE)), mapping = aes(x = std.bin, y = basal_area.dead)) +
geom_point(stat = 'summary', mapping = aes(color = std.bin)) + geom_errorbar(stat = 'summary', mapping = aes(color = std.bin)) + theme_bw()
p10
ggsave(filename = 'Fig7_mortality_standage_pointrange_FIA.png', height=14, width= 22, units = 'cm', dpi=900)
